{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"update_functions.js":{"content":"// This file contains updated functions for both web app and Arduino code\n\n// 1. ARDUINO CODE UPDATES\n// Add these functions to your Arduino code to ensure history data is properly saved with timestamps\n\n/*\nvoid saveTimestampedWaterLevelHistory() {\n  if (!deviceRegistered || WiFi.status() != WL_CONNECTED) {\n    return;\n  }\n  \n  // Get current date and time\n  time_t now;\n  time(&now);\n  struct tm timeinfo;\n  localtime_r(&now, &timeinfo);\n  \n  // Format date (YYYY-MM-DD) for main path\n  char dateStr[11];\n  strftime(dateStr, sizeof(dateStr), \"%Y-%m-%d\", &timeinfo);\n  \n  // Format timestamp (HH_MM_SS) for entry key - using underscore to make it valid for Firebase paths\n  char timeStr[9];\n  strftime(timeStr, sizeof(timeStr), \"%H_%M_%S\", &timeinfo);\n  \n  // Calculate water level percentage from sensor\n  float waterLevelPercent = 100 - lastDist1;  // Convert distance to level percentage\n  \n  // Create URL with timestamp as a unique key under this date and device\n  String historyUrl = firebaseURL + \"/users/\" + deviceOwnerUserID + \n                     \"/waterLevelHistory/\" + String(dateStr) + \"/\" + \n                     deviceContainerKey + \"/\" + String(timeStr) + \".json\";\n  \n  // Create JSON containing the value\n  String payload = \"{\\\"value\\\":\" + String(waterLevelPercent) + \"}\";\n  \n  HTTPClient http;\n  http.begin(historyUrl);\n  http.addHeader(\"Content-Type\", \"application/json\");\n  \n  int httpCode = http.PUT(payload);\n  if (httpCode > 0) {\n    Serial.println(\"Water level history saved with timestamp: \" + String(httpCode));\n  } else {\n    Serial.println(\"Error saving water level history: \" + http.errorToString(httpCode));\n  }\n  \n  http.end();\n}\n\nvoid saveTimestampedWasteBinHistory() {\n  if (!deviceRegistered || WiFi.status() != WL_CONNECTED) {\n    return;\n  }\n  \n  // Get current date and time\n  time_t now;\n  time(&now);\n  struct tm timeinfo;\n  localtime_r(&now, &timeinfo);\n  \n  // Format date (YYYY-MM-DD) for main path\n  char dateStr[11];\n  strftime(dateStr, sizeof(dateStr), \"%Y-%m-%d\", &timeinfo);\n  \n  // Format timestamp (HH_MM_SS) for entry key\n  char timeStr[9];\n  strftime(timeStr, sizeof(timeStr), \"%H_%M_%S\", &timeinfo);\n  \n  // Create URL with timestamp as a unique key\n  String historyUrl = firebaseURL + \"/users/\" + deviceOwnerUserID + \n                     \"/wasteBinHistory/\" + String(dateStr) + \"/\" + \n                     deviceContainerKey + \"/\" + String(timeStr) + \".json\";\n  \n  // Create JSON for waste bin data\n  DynamicJsonDocument doc(128);\n  doc[\"fullness\"] = binFullness;\n  doc[\"weight\"] = lastWeight;\n  \n  String payload;\n  serializeJson(doc, payload);\n  \n  HTTPClient http;\n  http.begin(historyUrl);\n  http.addHeader(\"Content-Type\", \"application/json\");\n  \n  int httpCode = http.PUT(payload);\n  if (httpCode > 0) {\n    Serial.println(\"Waste bin history saved with timestamp: \" + String(httpCode));\n  } else {\n    Serial.println(\"Error saving waste bin history: \" + http.errorToString(httpCode));\n  }\n  \n  http.end();\n}\n\n// Call these functions at the end of your sendDataToFirebase() function:\n//\n// // Save timestamped history data to create multiple entries per day\n// saveTimestampedWaterLevelHistory();\n// saveTimestampedWasteBinHistory();\n*/\n\n// 2. WEB APP CHANGES - WASTE BINS PAGE IMPROVEMENTS\n// This ensures charts only show real data with no placeholders\n\n/*\n// In your waste-bins.tsx file, replace chart component with this:\n\n{wasteBins && wasteBins.length > 0 ? (\n  <div className=\"h-80 w-full\">\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart\n        data={binHistory.filter(entry => entry.timestamp && entry.fullness !== undefined)}\n        margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis \n          dataKey=\"date\" \n          tickFormatter={(date) => new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n        />\n        <YAxis domain={[0, 100]} />\n        <Tooltip \n          formatter={(value) => [`${value}%`, 'Bin Fullness']}\n          labelFormatter={(date) => new Date(date).toLocaleDateString()}\n        />\n        <Bar \n          dataKey=\"fullness\" \n          name=\"Bin Fullness\" \n          fill=\"#10b981\" \n          radius={[4, 4, 0, 0]}\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  </div>\n) : (\n  <div className=\"flex items-center justify-center h-72 bg-gray-50 rounded-lg border border-gray-100\">\n    <div className=\"text-center\">\n      <p className=\"text-gray-500 mb-2\">No history data available</p>\n      <p className=\"text-sm text-gray-400\">Data will appear here after readings are received</p>\n    </div>\n  </div>\n)}\n*/\n\n// 3. IMPROVED HISTORY DATA FETCH FUNCTION\n// This ensures we're only displaying real data from Firebase, no dummy or placeholder data\n\n/*\n// In dashboard.tsx or wherever you need to fetch history data:\n\n// Fetch actual water level history from Firebase\nasync function fetchWaterLevelHistory(userId, deviceKey, days = 7) {\n  const historyEntries = [];\n  const today = new Date();\n  \n  // Get data for each of the last N days\n  for (let i = 0; i < days; i++) {\n    const date = new Date(today);\n    date.setDate(today.getDate() - i);\n    const dateStr = date.toISOString().split('T')[0]; // YYYY-MM-DD format\n    \n    const historyRef = ref(database, `users/${userId}/waterLevelHistory/${dateStr}/${deviceKey}`);\n    \n    try {\n      const snapshot = await get(historyRef);\n      if (snapshot.exists()) {\n        const dayData = snapshot.val();\n        \n        // Handle different data formats\n        if (typeof dayData === 'object') {\n          // If format is multiple timestamped entries for this day\n          Object.entries(dayData).forEach(([timeKey, data]) => {\n            if (typeof data === 'object' && data.value !== undefined) {\n              // Convert timestamp format HH_MM_SS to standard time\n              const formattedDate = new Date(`${dateStr}T${timeKey.replace(/_/g, ':')}`);\n              \n              historyEntries.push({\n                date: formattedDate,\n                fullDate: formattedDate.toLocaleDateString(),\n                value: data.value\n              });\n            }\n          });\n        } else if (typeof dayData === 'number') {\n          // If format is just a single value for the day\n          const formattedDate = new Date(`${dateStr}T12:00:00`);\n          historyEntries.push({\n            date: formattedDate,\n            fullDate: formattedDate.toLocaleDateString(),\n            value: dayData\n          });\n        }\n      }\n    } catch (error) {\n      console.error(`Error fetching history for ${dateStr}:`, error);\n    }\n  }\n  \n  // Sort by date\n  return historyEntries.sort((a, b) => a.date - b.date);\n}\n*/","size_bytes":6709},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer()\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    proxy: {\n      \"/api\": {\n        target: \"http://localhost:5000\",\n        changeOrigin: true,\n        secure: false,\n      },\n    },\n  },\n});\n","size_bytes":1047},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use(\n  session({\n    secret: process.env.SESSION_SECRET || \"dev-secret-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000,\n    },\n  })\n);\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2247},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertFcmTokenSchema, type FcmToken } from \"@shared/schema\";\nimport { PushNotificationService } from \"./notification-service\";\n\n// Define session user interface\ninterface SessionUser {\n  id: number;\n  username: string;\n}\n\n// Extend Request interface for session\ninterface AuthenticatedRequest extends Request {\n  session: {\n    user?: SessionUser;\n  } & any;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check API endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  // Firebase auth verification and session creation endpoint\n  app.post(\"/api/auth/verify\", async (req: any, res: Response) => {\n    try {\n      const { idToken } = req.body;\n      \n      if (!idToken) {\n        return res.status(400).json({ error: \"Firebase ID token is required\" });\n      }\n\n      // For demo purposes, we'll validate the ID token format but not actually verify it\n      // In a real implementation, you would install firebase-admin and verify the token:\n      // const admin = require('firebase-admin');\n      // const decodedToken = await admin.auth().verifyIdToken(idToken);\n      // const { email, uid } = decodedToken;\n      \n      // For now, let's decode the JWT payload to get email (without verification)\n      // This is still not secure but better than trusting client data directly\n      try {\n        const parts = idToken.split('.');\n        if (parts.length !== 3) {\n          throw new Error('Invalid JWT format');\n        }\n        \n        // Use Buffer instead of atob (which doesn't exist in Node.js)\n        const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());\n        const email = payload.email;\n        const uid = payload.sub;\n        \n        if (!email) {\n          return res.status(400).json({ error: \"Invalid ID token - no email found\" });\n        }\n\n        // Create/get user by email\n        let user = await storage.getUserByEmail(email);\n        if (!user) {\n          user = await storage.createUser({\n            username: email.split('@')[0],\n            password: \"firebase-auth\", // Not used for Firebase users\n            email: email,\n            firebaseUid: uid,\n            createdAt: new Date().toISOString()\n          });\n        }\n\n        // Create Express session\n        req.session.user = {\n          id: user.id,\n          username: user.username,\n          email: user.email\n        };\n\n        res.json({ \n          success: true, \n          user: { \n            id: user.id, \n            username: user.username, \n            email: user.email \n          } \n        });\n      } catch (tokenError) {\n        console.error(\"Error parsing ID token:\", tokenError);\n        return res.status(401).json({ error: \"Invalid ID token format\" });\n      }\n    } catch (error) {\n      console.error(\"Error verifying auth:\", error);\n      res.status(500).json({ error: \"Authentication failed\" });\n    }\n  });\n\n  // User authentication status endpoint\n  app.get(\"/api/auth/status\", (req: any, res) => {\n    if (req.session && req.session.user) {\n      res.json({ \n        isAuthenticated: true, \n        user: req.session.user \n      });\n    } else {\n      res.json({ isAuthenticated: false });\n    }\n  });\n\n  // FCM Token endpoints for push notifications - SECURED\n  app.post(\"/api/notifications/token\", async (req: any, res: Response) => {\n    try {\n      // Require authentication\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const { token, deviceInfo } = req.body;\n      if (!token) {\n        return res.status(400).json({ error: \"FCM token is required\" });\n      }\n\n      // Use authenticated user ID, ignore any userId from client\n      const userId = req.session.user.id;\n\n      const validatedData = insertFcmTokenSchema.parse({\n        userId,\n        token,\n        deviceInfo: deviceInfo || null,\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        lastUsed: new Date().toISOString()\n      });\n\n      // Check if token already exists for this user\n      const existingTokens = await storage.getFcmTokens(userId);\n      const tokenExists = existingTokens.find(t => t.token === token);\n      \n      if (tokenExists) {\n        await storage.updateFcmToken(token, new Date().toISOString());\n        res.json({ success: true, message: \"Token updated\" });\n      } else {\n        const fcmToken = await storage.createFcmToken(validatedData);\n        res.json({ success: true, token: fcmToken });\n      }\n    } catch (error) {\n      console.error(\"Error saving FCM token:\", error);\n      res.status(400).json({ error: \"Invalid token data\" });\n    }\n  });\n\n  app.delete(\"/api/notifications/token/:token\", async (req: any, res: Response) => {\n    try {\n      // Require authentication\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      // Verify the token belongs to the authenticated user\n      const userId = req.session.user.id;\n      const userTokens = await storage.getFcmTokens(userId);\n      const tokenExists = userTokens.find(t => t.token === req.params.token);\n      \n      if (!tokenExists) {\n        return res.status(404).json({ error: \"Token not found or not owned by user\" });\n      }\n\n      await storage.deleteFcmToken(req.params.token);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting FCM token:\", error);\n      res.status(500).json({ error: \"Failed to delete token\" });\n    }\n  });\n\n  // Critical alerts endpoint - this will be used to check for alerts and send notifications\n  app.get(\"/api/notifications/alerts\", async (req: any, res: Response) => {\n    try {\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const userId = req.session.user.id;\n      const alerts = await checkCriticalAlerts(userId);\n      res.json({ alerts });\n    } catch (error) {\n      console.error(\"Error checking alerts:\", error);\n      res.status(500).json({ error: \"Failed to check alerts\" });\n    }\n  });\n\n  // Test endpoint to trigger push notifications  \n  app.post(\"/api/notifications/test\", async (req: any, res: Response) => {\n    try {\n      // Require authentication for test endpoint too\n      if (!req.session?.user?.id) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const notificationService = PushNotificationService.getInstance();\n      \n      // Create sample data for testing with authenticated user\n      const userId = req.session.user.id;\n      await createSampleData(userId);\n      \n      // Test notification for authenticated user\n      const result = await notificationService.checkAndNotifyAlerts(userId);\n      res.json({ \n        success: true, \n        message: \"Test notifications triggered\",\n        result \n      });\n    } catch (error) {\n      console.error(\"Error testing notifications:\", error);\n      res.status(500).json({ error: \"Failed to test notifications\" });\n    }\n  });\n\n  // Create HTTP server\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n\n// Helper function to check for critical alerts\nasync function checkCriticalAlerts(userId: number) {\n  const alerts: Array<{ type: string; message: string; severity: string; deviceId?: number }> = [];\n\n  try {\n    // Check water levels for high readings\n    const waterLevels = await storage.getWaterLevels(userId);\n    const devices = await storage.getDevices(userId);\n    \n    for (const level of waterLevels) {\n      if (level.level > 80) { // High water level threshold\n        const device = devices.find(d => d.id === level.deviceId);\n        alerts.push({\n          type: 'water_level',\n          message: `High water level detected: ${level.level}% at ${device?.name || 'Unknown Device'}`,\n          severity: level.level > 95 ? 'critical' : 'high',\n          deviceId: level.deviceId\n        });\n      }\n    }\n\n    // Check waste bins for fullness\n    const wasteBins = await storage.getWasteBins(userId);\n    for (const bin of wasteBins) {\n      if (bin.fullness > 85) { // Full waste bin threshold\n        const device = devices.find(d => d.id === bin.deviceId);\n        alerts.push({\n          type: 'waste_bin',\n          message: `Waste bin is ${bin.fullness}% full at ${device?.name || 'Unknown Device'}`,\n          severity: bin.fullness > 95 ? 'critical' : 'high',\n          deviceId: bin.deviceId\n        });\n      }\n    }\n\n    // Check for offline devices\n    const now = new Date();\n    for (const device of devices) {\n      if (device.lastSeen) {\n        const lastSeen = new Date(device.lastSeen);\n        const hoursSinceLastSeen = (now.getTime() - lastSeen.getTime()) / (1000 * 60 * 60);\n        \n        if (hoursSinceLastSeen > 2) { // Device offline for more than 2 hours\n          alerts.push({\n            type: 'device_offline',\n            message: `Device ${device.name} has been offline for ${Math.round(hoursSinceLastSeen)} hours`,\n            severity: hoursSinceLastSeen > 24 ? 'critical' : 'medium',\n            deviceId: device.id\n          });\n        }\n      }\n    }\n\n  } catch (error) {\n    console.error(\"Error checking critical alerts:\", error);\n  }\n\n  return alerts;\n}\n\n// Helper function to create sample data for testing\nasync function createSampleData(userId: number) {\n  try {\n    // Create sample devices if not exist for the specific user\n    const devices = await storage.getDevices(userId);\n    if (devices.length === 0) {\n      await storage.createDevice({\n        userId: userId,\n        deviceId: `device-${userId}-001`,\n        name: \"Main Water Sensor\",\n        type: \"water_level\",\n        location: \"Building A\",\n        status: \"online\",\n        lastSeen: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString() // 3 hours ago\n      });\n\n      await storage.createDevice({\n        userId: userId,\n        deviceId: `device-${userId}-002`, \n        name: \"Waste Bin Monitor\",\n        type: \"waste_bin\",\n        location: \"Building B\",\n        status: \"online\",\n        lastSeen: new Date().toISOString()\n      });\n    }\n\n    // Get the devices to use their IDs\n    const userDevices = await storage.getDevices(userId);\n    if (userDevices.length >= 2) {\n      // Create critical water level data\n      await storage.createWaterLevel({\n        userId: userId,\n        deviceId: userDevices[0].id,\n        level: 97, // Critical level\n        timestamp: new Date().toISOString()\n      });\n\n      // Create critical waste bin data\n      await storage.createWasteBin({\n        userId: userId,\n        deviceId: userDevices[1].id,\n        fullness: 92, // Critical fullness\n        weight: 45,\n        lastEmptied: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Create sample FCM token for testing if none exists\n    const tokens = await storage.getFcmTokens(userId);\n    if (tokens.length === 0) {\n      await storage.createFcmToken({\n        userId: userId,\n        token: `sample-fcm-token-${userId}-${Date.now()}`,\n        deviceInfo: \"Test Browser\",\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        lastUsed: new Date().toISOString()\n      });\n    }\n\n    console.log(`✅ Sample data created successfully for user ${userId}`);\n  } catch (error) {\n    console.error(\"Error creating sample data:\", error);\n  }\n}\n","size_bytes":11651},"server/storage.ts":{"content":"import { \n  users, devices, waterLevels, wasteBins, contacts, settings, fcmTokens,\n  type User, type InsertUser,\n  type Device, type InsertDevice,\n  type WaterLevel, type InsertWaterLevel,\n  type WasteBin, type InsertWasteBin,\n  type Contact, type InsertContact,\n  type Settings, type InsertSettings,\n  type FcmToken, type InsertFcmToken\n} from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  // User methods\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Device methods\n  getDevices(userId: number): Promise<Device[]>;\n  getDevice(id: number): Promise<Device | undefined>;\n  createDevice(device: InsertDevice): Promise<Device>;\n  updateDevice(id: number, device: Partial<InsertDevice>): Promise<Device | undefined>;\n  \n  // Water level methods\n  getWaterLevels(userId: number): Promise<WaterLevel[]>;\n  getWaterLevelsByDevice(deviceId: number): Promise<WaterLevel[]>;\n  createWaterLevel(waterLevel: InsertWaterLevel): Promise<WaterLevel>;\n  \n  // Waste bin methods\n  getWasteBins(userId: number): Promise<WasteBin[]>;\n  getWasteBinsByDevice(deviceId: number): Promise<WasteBin[]>;\n  createWasteBin(wasteBin: InsertWasteBin): Promise<WasteBin>;\n  \n  // FCM Token methods\n  getFcmTokens(userId: number): Promise<FcmToken[]>;\n  createFcmToken(token: InsertFcmToken): Promise<FcmToken>;\n  updateFcmToken(token: string, lastUsed: string): Promise<void>;\n  deleteFcmToken(token: string): Promise<void>;\n  \n  // Settings methods\n  getSettings(userId: number): Promise<Settings | undefined>;\n  createSettings(settings: InsertSettings): Promise<Settings>;\n  updateSettings(userId: number, settings: Partial<InsertSettings>): Promise<Settings | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private devices: Map<number, Device>;\n  private waterLevels: Map<number, WaterLevel>;\n  private wasteBins: Map<number, WasteBin>;\n  private contacts: Map<number, Contact>;\n  private settings: Map<number, Settings>;\n  private fcmTokens: Map<number, FcmToken>;\n  private tokenToId: Map<string, number>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.devices = new Map();\n    this.waterLevels = new Map();\n    this.wasteBins = new Map();\n    this.contacts = new Map();\n    this.settings = new Map();\n    this.fcmTokens = new Map();\n    this.tokenToId = new Map();\n    this.currentId = 1;\n  }\n\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { \n      ...insertUser, \n      id,\n      firebaseUid: insertUser.firebaseUid || null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Device methods\n  async getDevices(userId: number): Promise<Device[]> {\n    return Array.from(this.devices.values()).filter(device => device.userId === userId);\n  }\n\n  async getDevice(id: number): Promise<Device | undefined> {\n    return this.devices.get(id);\n  }\n\n  async createDevice(insertDevice: InsertDevice): Promise<Device> {\n    const id = this.currentId++;\n    const device: Device = { \n      ...insertDevice, \n      id,\n      location: insertDevice.location || null,\n      lastSeen: insertDevice.lastSeen || null\n    };\n    this.devices.set(id, device);\n    return device;\n  }\n\n  async updateDevice(id: number, updateData: Partial<InsertDevice>): Promise<Device | undefined> {\n    const device = this.devices.get(id);\n    if (!device) return undefined;\n    \n    const updatedDevice = { ...device, ...updateData };\n    this.devices.set(id, updatedDevice);\n    return updatedDevice;\n  }\n\n  // Water level methods\n  async getWaterLevels(userId: number): Promise<WaterLevel[]> {\n    return Array.from(this.waterLevels.values()).filter(level => level.userId === userId);\n  }\n\n  async getWaterLevelsByDevice(deviceId: number): Promise<WaterLevel[]> {\n    return Array.from(this.waterLevels.values()).filter(level => level.deviceId === deviceId);\n  }\n\n  async createWaterLevel(insertWaterLevel: InsertWaterLevel): Promise<WaterLevel> {\n    const id = this.currentId++;\n    const waterLevel: WaterLevel = { ...insertWaterLevel, id };\n    this.waterLevels.set(id, waterLevel);\n    return waterLevel;\n  }\n\n  // Waste bin methods\n  async getWasteBins(userId: number): Promise<WasteBin[]> {\n    return Array.from(this.wasteBins.values()).filter(bin => bin.userId === userId);\n  }\n\n  async getWasteBinsByDevice(deviceId: number): Promise<WasteBin[]> {\n    return Array.from(this.wasteBins.values()).filter(bin => bin.deviceId === deviceId);\n  }\n\n  async createWasteBin(insertWasteBin: InsertWasteBin): Promise<WasteBin> {\n    const id = this.currentId++;\n    const wasteBin: WasteBin = { \n      ...insertWasteBin, \n      id,\n      lastEmptied: insertWasteBin.lastEmptied || null\n    };\n    this.wasteBins.set(id, wasteBin);\n    return wasteBin;\n  }\n\n  // FCM Token methods\n  async getFcmTokens(userId: number): Promise<FcmToken[]> {\n    return Array.from(this.fcmTokens.values()).filter(token => token.userId === userId);\n  }\n\n  async createFcmToken(insertToken: InsertFcmToken): Promise<FcmToken> {\n    const id = this.currentId++;\n    const token: FcmToken = { \n      ...insertToken, \n      id,\n      deviceInfo: insertToken.deviceInfo || null,\n      isActive: insertToken.isActive ?? true,\n      lastUsed: insertToken.lastUsed || null\n    };\n    this.fcmTokens.set(id, token);\n    this.tokenToId.set(token.token, id);\n    return token;\n  }\n\n  async updateFcmToken(tokenStr: string, lastUsed: string): Promise<void> {\n    const id = this.tokenToId.get(tokenStr);\n    if (!id) return;\n    \n    const token = this.fcmTokens.get(id);\n    if (token) {\n      const updatedToken = { ...token, lastUsed };\n      this.fcmTokens.set(id, updatedToken);\n    }\n  }\n\n  async deleteFcmToken(tokenStr: string): Promise<void> {\n    const id = this.tokenToId.get(tokenStr);\n    if (!id) return;\n    \n    this.fcmTokens.delete(id);\n    this.tokenToId.delete(tokenStr);\n  }\n\n  // Settings methods\n  async getSettings(userId: number): Promise<Settings | undefined> {\n    return Array.from(this.settings.values()).find(setting => setting.userId === userId);\n  }\n\n  async createSettings(insertSettings: InsertSettings): Promise<Settings> {\n    const id = this.currentId++;\n    const settings: Settings = { ...insertSettings, id };\n    this.settings.set(id, settings);\n    return settings;\n  }\n\n  async updateSettings(userId: number, updateData: Partial<InsertSettings>): Promise<Settings | undefined> {\n    const settings = Array.from(this.settings.values()).find(s => s.userId === userId);\n    if (!settings) return undefined;\n    \n    const updatedSettings = { ...settings, ...updateData };\n    this.settings.set(settings.id, updatedSettings);\n    return updatedSettings;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":7423},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User table\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull(),\n  firebaseUid: text(\"firebase_uid\"),\n  createdAt: text(\"created_at\").notNull()\n});\n\n// Devices table\nexport const devices = pgTable(\"devices\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  deviceId: text(\"device_id\").notNull(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(),\n  location: text(\"location\"),\n  status: text(\"status\").notNull(),\n  lastSeen: text(\"last_seen\")\n});\n\n// Contacts table\nexport const contacts = pgTable(\"contacts\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  status: text(\"status\").notNull()\n});\n\n// Settings table\nexport const settings = pgTable(\"settings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  system: jsonb(\"system\").notNull(),\n  regional: jsonb(\"regional\").notNull(),\n  thresholds: jsonb(\"thresholds\").notNull(),\n  notifications: jsonb(\"notifications\").notNull()\n});\n\n// FCM Tokens table for push notifications\nexport const fcmTokens = pgTable(\"fcm_tokens\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  token: text(\"token\").notNull().unique(),\n  deviceInfo: text(\"device_info\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: text(\"created_at\").notNull(),\n  lastUsed: text(\"last_used\")\n});\n\n// Water Levels table\nexport const waterLevels = pgTable(\"water_levels\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  deviceId: integer(\"device_id\").notNull().references(() => devices.id),\n  level: integer(\"level\").notNull(),\n  timestamp: text(\"timestamp\").notNull()\n});\n\n// Waste Bins table\nexport const wasteBins = pgTable(\"waste_bins\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  deviceId: integer(\"device_id\").notNull().references(() => devices.id),\n  fullness: integer(\"fullness\").notNull(),\n  weight: integer(\"weight\").notNull(),\n  lastEmptied: text(\"last_emptied\"),\n  timestamp: text(\"timestamp\").notNull()\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true });\nexport const insertDeviceSchema = createInsertSchema(devices).omit({ id: true });\nexport const insertContactSchema = createInsertSchema(contacts).omit({ id: true });\nexport const insertSettingsSchema = createInsertSchema(settings).omit({ id: true });\nexport const insertWaterLevelSchema = createInsertSchema(waterLevels).omit({ id: true });\nexport const insertWasteBinSchema = createInsertSchema(wasteBins).omit({ id: true });\nexport const insertFcmTokenSchema = createInsertSchema(fcmTokens).omit({ id: true });\n\n// Type definitions\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertDevice = z.infer<typeof insertDeviceSchema>;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type InsertSettings = z.infer<typeof insertSettingsSchema>;\nexport type InsertWaterLevel = z.infer<typeof insertWaterLevelSchema>;\nexport type InsertWasteBin = z.infer<typeof insertWasteBinSchema>;\nexport type InsertFcmToken = z.infer<typeof insertFcmTokenSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type Device = typeof devices.$inferSelect;\nexport type Contact = typeof contacts.$inferSelect;\nexport type Settings = typeof settings.$inferSelect;\nexport type WaterLevel = typeof waterLevels.$inferSelect;\nexport type WasteBin = typeof wasteBins.$inferSelect;\nexport type FcmToken = typeof fcmTokens.$inferSelect;\n","size_bytes":4036},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport WaterLevels from \"@/pages/water-levels\";\nimport WaterLevelDetails from \"@/pages/water-level-details\";\nimport DeviceHistory from \"@/pages/device-history\";\nimport WasteBins from \"@/pages/waste-bins\";\nimport Devices from \"@/pages/devices\";\nimport Contacts from \"@/pages/contacts\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\nimport Conveyor from \"@/pages/conveyor\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/water-levels\" component={WaterLevels} />\n      <Route path=\"/water-levels/:id\" component={WaterLevelDetails} />\n      <Route path=\"/water-level-details\" component={WaterLevelDetails} />\n      <Route path=\"/waste-bins\" component={WasteBins} />\n      <Route path=\"/devices\" component={Devices} />\n      <Route path=\"/device-history/:id\" component={DeviceHistory} />\n      <Route path=\"/contacts\" component={Contacts} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/conveyor\" component={Conveyor} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1710},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: 0 0% 100%;\n  --foreground: 20 14.3% 4.1%;\n  --muted: 60 4.8% 95.9%;\n  --muted-foreground: 25 5.3% 44.7%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 20 14.3% 4.1%;\n  --card: 0 0% 100%;\n  --card-foreground: 20 14.3% 4.1%;\n  --border: 20 5.9% 90%;\n  --input: 20 5.9% 90%;\n  --primary: 207 90% 54%;\n  --primary-foreground: 211 100% 99%;\n  --secondary: 142 70% 45%;\n  --secondary-foreground: 24 9.8% 10%;\n  --accent: 60 4.8% 95.9%;\n  --accent-foreground: 24 9.8% 10%;\n  --destructive: 0 84.2% 60.2%;\n  --destructive-foreground: 60 9.1% 97.8%;\n  --success: 142 70% 45%;\n  --success-foreground: 0 0% 100%;\n  --warning: 38 92% 50%;\n  --warning-foreground: 0 0% 0%;\n  --ring: 20 14.3% 4.1%;\n  --radius: 0.5rem;\n  --sidebar-background: 0 0% 100%;\n  --sidebar-foreground: 20 14.3% 4.1%;\n  --sidebar-primary: 207 90% 54%;\n  --sidebar-primary-foreground: 211 100% 99%;\n  --sidebar-accent: 0 0% 96%;\n  --sidebar-accent-foreground: 20 14.3% 4.1%;\n  --sidebar-border: 20 5.9% 90%;\n  --sidebar-ring: 20 14.3% 4.1%;\n  --chart-1: 207 90% 54%;\n  --chart-2: 142 70% 45%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 0 84.2% 60.2%;\n  --chart-5: 271 91% 65%;\n}\n\n.dark {\n  --background: 240 10% 3.9%;\n  --foreground: 0 0% 98%;\n  --muted: 240 3.7% 15.9%;\n  --muted-foreground: 240 5% 64.9%;\n  --popover: 240 10% 3.9%;\n  --popover-foreground: 0 0% 98%;\n  --card: 240 10% 3.9%;\n  --card-foreground: 0 0% 98%;\n  --border: 240 3.7% 15.9%;\n  --input: 240 3.7% 15.9%;\n  --primary: 207 90% 54%;\n  --primary-foreground: 211 100% 99%;\n  --secondary: 142 70% 45%;\n  --secondary-foreground: 210 40% 98%;\n  --accent: 240 3.7% 15.9%;\n  --accent-foreground: 0 0% 98%;\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 0 0% 98%;\n  --success: 142 70% 45%;\n  --success-foreground: 0 0% 100%;\n  --warning: 38 92% 50%;\n  --warning-foreground: 0 0% 0%;\n  --ring: 240 4.9% 83.9%;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-[#F5F7FA] text-foreground;\n  }\n}\n\n@layer components {\n  .sidebar-link {\n    @apply flex items-center p-3 rounded-md mb-1 hover:bg-gray-100 transition-colors;\n  }\n  \n  .sidebar-link.active {\n    @apply bg-[#2196F31A] border-l-4 border-primary text-primary;\n  }\n  \n  .status-badge {\n    @apply px-2 py-1 rounded-full text-xs font-medium inline-flex items-center;\n  }\n  \n  .status-badge-success {\n    @apply bg-green-100 text-green-600;\n  }\n  \n  .status-badge-warning {\n    @apply bg-yellow-100 text-yellow-600;\n  }\n  \n  .status-badge-danger {\n    @apply bg-red-100 text-destructive;\n  }\n  \n  .progress-bar {\n    @apply w-full bg-gray-200 rounded-full h-2;\n  }\n  \n  .progress-bar-value {\n    @apply h-2 rounded-full;\n  }\n  \n  .text-success {\n    @apply text-green-600;\n  }\n  \n  .text-warning {\n    @apply text-yellow-600;\n  }\n  \n  /* Card animation and hover effects */\n  .animated-card {\n    @apply transition-all duration-300 transform hover:shadow-lg hover:-translate-y-1 hover:border-primary/50;\n  }\n  \n  .pulse-animation {\n    @apply animate-pulse;\n  }\n  \n  .bounce-animation {\n    animation: bounce 1s infinite;\n  }\n  \n  .fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n  \n  .slide-in {\n    animation: slideIn 0.5s ease-in-out;\n  }\n  \n  .scale-in {\n    animation: scaleIn 0.3s ease-in-out;\n  }\n  \n  .rotate-in {\n    animation: rotateIn 0.5s ease-in-out;\n  }\n  \n  .hover-glow {\n    @apply hover:shadow-[0_0_15px_rgba(33,150,243,0.3)] transition-shadow duration-300;\n  }\n  \n  .hover-scale {\n    @apply hover:scale-105 transition-transform duration-300;\n  }\n  \n  .hover-bright {\n    @apply hover:brightness-105 transition-all duration-300;\n  }\n  \n  .hover-border {\n    @apply hover:border-primary transition-colors duration-300;\n  }\n  \n  .content-card {\n    @apply rounded-lg bg-white border border-gray-200 overflow-hidden transition-all duration-300 hover:shadow-md hover:border-gray-300;\n  }\n  \n  .metric-card {\n    @apply rounded-lg bg-white border border-gray-200 overflow-hidden transition-all duration-300 hover:shadow-md hover:border-blue-200 hover:bg-blue-50/30;\n  }\n  \n  .success-card {\n    @apply rounded-lg bg-white border border-gray-200 overflow-hidden transition-all duration-300 hover:shadow-md hover:border-green-200 hover:bg-green-50/30;\n  }\n  \n  .warning-card {\n    @apply rounded-lg bg-white border border-gray-200 overflow-hidden transition-all duration-300 hover:shadow-md hover:border-yellow-200 hover:bg-yellow-50/30;\n  }\n  \n  .danger-card {\n    @apply rounded-lg bg-white border border-gray-200 overflow-hidden transition-all duration-300 hover:shadow-md hover:border-red-200 hover:bg-red-50/30;\n  }\n}\n\n@keyframes bounce {\n  0%, 100% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-5px);\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n@keyframes scaleIn {\n  from {\n    transform: scale(0.95);\n    opacity: 0;\n  }\n  to {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n@keyframes rotateIn {\n  from {\n    transform: rotate(-5deg);\n    opacity: 0;\n  }\n  to {\n    transform: rotate(0);\n    opacity: 1;\n  }\n}\n","size_bytes":5265},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst rootElement = document.getElementById(\"root\");\nif (!rootElement) throw new Error(\"Failed to find the root element\");\n\ncreateRoot(rootElement).render(<App />);\n","size_bytes":260},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { onAuthStateChanged, User } from \"firebase/auth\";\nimport { auth } from \"@/lib/firebase\";\nimport { useToast } from \"./use-toast\";\n\nexport function useAuth() {\n  const [user, setUser] = useState<User | null>(null);\n  const [sessionUser, setSessionUser] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(\n      auth,\n      async (firebaseUser) => {\n        setUser(firebaseUser);\n        \n        if (firebaseUser) {\n          // Create Express session when Firebase user signs in\n          try {\n            // Get Firebase ID token for server verification\n            const idToken = await firebaseUser.getIdToken();\n            \n            const response = await fetch('/api/auth/verify', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ idToken }),\n            });\n            \n            if (response.ok) {\n              const data = await response.json();\n              setSessionUser(data.user);\n            } else {\n              console.error('Failed to verify auth with server');\n            }\n          } catch (error) {\n            console.error('Error verifying auth:', error);\n          }\n        } else {\n          setSessionUser(null);\n        }\n        \n        setLoading(false);\n      },\n      (error) => {\n        console.error(\"Auth state change error:\", error);\n        toast({\n          title: \"Authentication Error\",\n          description: \"There was an error with the authentication process.\",\n          variant: \"destructive\",\n        });\n        setLoading(false);\n      }\n    );\n\n    return () => unsubscribe();\n  }, [toast]);\n\n  return { user, sessionUser, loading };\n}\n","size_bytes":1851},"client/src/hooks/useDeviceData.ts":{"content":"","size_bytes":0},"client/src/hooks/useFirebase.ts":{"content":"import { useEffect, useState } from \"react\";\nimport { ref, onValue, DatabaseReference } from \"firebase/database\";\nimport { database } from \"@/lib/firebase\";\nimport { useAuth } from \"./useAuth\";\n\nexport function useFirebaseData<T>(path: string, defaultValue: T): { data: T; loading: boolean } {\n  const { user } = useAuth();\n  const [data, setData] = useState<T>(defaultValue);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!user) {\n      setLoading(false);\n      return;\n    }\n\n    const dataRef = ref(database, `users/${user.uid}/${path}`);\n    \n    const unsubscribe = onValue(dataRef, (snapshot) => {\n      const fetchedData = snapshot.val();\n      if (fetchedData) {\n        setData(fetchedData);\n      } else {\n        setData(defaultValue);\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [user, path, defaultValue]);\n\n  return { data, loading };\n}\n\nexport function useFirebaseList<T>(path: string): { list: T[]; loading: boolean; reference: DatabaseReference | null } {\n  const { user } = useAuth();\n  const [list, setList] = useState<T[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [reference, setReference] = useState<DatabaseReference | null>(null);\n\n  useEffect(() => {\n    if (!user) {\n      setLoading(false);\n      return;\n    }\n\n    const dataRef = ref(database, `users/${user.uid}/${path}`);\n    setReference(dataRef);\n    \n    const unsubscribe = onValue(dataRef, (snapshot) => {\n      const fetchedData = snapshot.val();\n      if (fetchedData) {\n        const dataList = Object.entries(fetchedData).map(([id, value]) => ({\n          id,\n          ...(value as object),\n        })) as T[];\n        setList(dataList);\n      } else {\n        setList([]);\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [user, path]);\n\n  return { list, loading, reference };\n}\n","size_bytes":1886},"client/src/hooks/useHistoryData.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { ref, onValue } from \"firebase/database\";\nimport { database } from \"@/lib/firebase\";\nimport { useAuth } from \"./useAuth\";\n\nexport interface HistoryEntry {\n  timestamp: string;\n  [key: string]: any;\n}\n\nconst useHistory = (deviceId: string, historyType: \"waterLevelHistory\" | \"wasteBinHistory\") => {\n  const { user } = useAuth();\n  const [history, setHistory] = useState<HistoryEntry[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!user || !deviceId) {\n      setLoading(false);\n      return;\n    }\n\n    // First, get all devices to find the Firebase key for the given device ID\n    const devicesRef = ref(database, `users/${user.uid}/devices`);\n    \n    const unsubscribe = onValue(devicesRef, (snapshot) => {\n      if (snapshot.exists()) {\n        const devices = snapshot.val();\n        let deviceKey = null;\n        \n        // Find the device key by matching the device ID\n        Object.entries(devices).forEach(([key, device]: [string, any]) => {\n          if (device.id === deviceId) {\n            deviceKey = key;\n          }\n        });\n        \n        if (deviceKey) {\n          // Now get the history for this device\n          const historyRef = ref(database, `users/${user.uid}/devices/${deviceKey}/${historyType}`);\n          \n          onValue(historyRef, (historySnapshot) => {\n            if (historySnapshot.exists()) {\n              const data = historySnapshot.val();\n              const historyData = Object.entries(data).map(([key, value]) => ({\n                id: key,\n                ...(value as any),\n              }));\n              // Sort by timestamp\n              historyData.sort((a, b) =>\n                new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n              );\n              setHistory(historyData);\n            } else {\n              setHistory([]);\n            }\n            setLoading(false);\n          });\n        } else {\n          setHistory([]);\n          setLoading(false);\n        }\n      } else {\n        setHistory([]);\n        setLoading(false);\n      }\n    });\n\n    return () => unsubscribe();\n  }, [user, deviceId, historyType]);\n\n  return { history, loading };\n};\n\nexport const useWaterLevelHistory = (deviceId: string) => {\n  return useHistory(deviceId, \"waterLevelHistory\");\n};\n\nexport const useWasteBinHistory = (deviceId: string) => {\n  return useHistory(deviceId, \"wasteBinHistory\");\n};\n","size_bytes":2457},"client/src/lib/firebase-history.ts":{"content":"import { ref, get, set, push, child, DatabaseReference } from \"firebase/database\";\nimport { database } from \"./firebase\";\n\n// Get today's date in YYYY-MM-DD format\nexport function getFormattedDate() {\n  const today = new Date();\n  return today.toISOString().split('T')[0];\n}\n\n// Save a water level reading to history\nexport async function saveWaterLevelHistory(userId: string, deviceId: string, value: number) {\n  const todayFormatted = getFormattedDate();\n  const historyRef = ref(database, `users/${userId}/waterLevelHistory/${todayFormatted}/${deviceId}`);\n  try {\n    await set(historyRef, value);\n    console.log(\"Water level history saved\");\n    return true;\n  } catch (error) {\n    console.error(\"Error saving water level history:\", error);\n    return false;\n  }\n}\n\n// Save a waste bin reading to history\nexport async function saveWasteBinHistory(\n  userId: string, \n  deviceId: string, \n  fullness: number, \n  weight: number\n) {\n  const todayFormatted = getFormattedDate();\n  const historyRef = ref(database, `users/${userId}/wasteBinHistory/${todayFormatted}/${deviceId}`);\n  try {\n    await set(historyRef, {\n      fullness,\n      weight\n    });\n    console.log(\"Waste bin history saved\");\n    return true;\n  } catch (error) {\n    console.error(\"Error saving waste bin history:\", error);\n    return false;\n  }\n}\n\n// Get water level history for a device for a specified date range\nexport async function getWaterLevelHistory(userId: string, deviceId: string, days: number = 30) {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(endDate.getDate() - days);\n  \n  const dateArray = [];\n  const currentDate = new Date(startDate);\n  \n  while (currentDate <= endDate) {\n    dateArray.push(currentDate.toISOString().split('T')[0]);\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n  \n  const history = [];\n  \n  for (const date of dateArray) {\n    const historyRef = ref(database, `users/${userId}/waterLevelHistory/${date}/${deviceId}`);\n    try {\n      const snapshot = await get(historyRef);\n      if (snapshot.exists()) {\n        history.push({\n          date,\n          value: snapshot.val()\n        });\n      }\n    } catch (error) {\n      console.error(`Error getting water level history for ${date}:`, error);\n    }\n  }\n  \n  return history;\n}\n\n// Get waste bin history for a device for a specified date range\nexport async function getWasteBinHistory(userId: string, deviceId: string, days: number = 30) {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(endDate.getDate() - days);\n  \n  const dateArray = [];\n  const currentDate = new Date(startDate);\n  \n  while (currentDate <= endDate) {\n    dateArray.push(currentDate.toISOString().split('T')[0]);\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n  \n  const history = [];\n  \n  for (const date of dateArray) {\n    const historyRef = ref(database, `users/${userId}/wasteBinHistory/${date}/${deviceId}`);\n    try {\n      const snapshot = await get(historyRef);\n      if (snapshot.exists()) {\n        const data = snapshot.val();\n        history.push({\n          date,\n          fullness: data.fullness || 0,\n          weight: data.weight || 0\n        });\n      }\n    } catch (error) {\n      console.error(`Error getting waste bin history for ${date}:`, error);\n    }\n  }\n  \n  return history;\n}","size_bytes":3329},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getDatabase } from \"firebase/database\";\nimport { getMessaging, getToken, onMessage } from \"firebase/messaging\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD50Lsmg3khTmYkGiu7LREqivXsBkePQMI\",\n  authDomain: \"drainsentry.firebaseapp.com\",\n  databaseURL: \"https://drainsentry-default-rtdb.firebaseio.com\",\n  projectId: \"drainsentry\",\n  storageBucket: \"drainsentry.firebasestorage.app\",\n  messagingSenderId: \"610406293973\",\n  appId: \"1:610406293973:web:e112664f4dbfd9d6dd1d5c\",\n  measurementId: \"G-PF2451RX9Q\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst database = getDatabase(app);\n\nlet messaging: any = null;\nif (typeof window !== 'undefined' && 'serviceWorker' in navigator) {\n  messaging = getMessaging(app);\n}\n\nexport { app, auth, database, messaging };\n","size_bytes":910},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/contacts.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ref, onValue, push, set, remove, update } from \"firebase/database\";\nimport { database } from \"@/lib/firebase\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger,\n  DialogFooter,\n  DialogClose \n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Pencil, Plus, Trash2, Info } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Contact } from \"@/types\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Contacts() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [editMode, setEditMode] = useState(false);\n  const [currentContact, setCurrentContact] = useState<Contact | null>(null);\n  const [contactName, setContactName] = useState(\"\");\n  const [contactPhone, setContactPhone] = useState(\"\");\n  \n  useEffect(() => {\n    if (!user) return;\n\n    const contactsRef = ref(database, `users/${user.uid}/contacts`);\n    \n    const unsubscribe = onValue(contactsRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        const contactList = Object.entries(data).map(([id, value]) => ({\n          id,\n          ...(value as any),\n        }));\n        setContacts(contactList);\n      } else {\n        setContacts([]);\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [user]);\n\n  const handleAddContact = async () => {\n    if (!user) return;\n    \n    if (!contactName.trim()) {\n      toast({\n        title: \"Contact name is required\",\n        description: \"Please enter a contact name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!contactPhone.trim()) {\n      toast({\n        title: \"Phone number is required\",\n        description: \"Please enter a phone number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const newContact = {\n        name: contactName.trim(),\n        phone: contactPhone.trim(),\n        status: \"active\"\n      };\n      \n      const contactsRef = ref(database, `users/${user.uid}/contacts`);\n      \n      if (editMode && currentContact) {\n        // Update existing contact\n        const contactRef = ref(database, `users/${user.uid}/contacts/${currentContact.id}`);\n        await update(contactRef, newContact);\n        \n        toast({\n          title: \"Contact updated\",\n          description: \"The contact has been updated successfully\",\n        });\n      } else {\n        // Add new contact\n        await push(contactsRef, newContact);\n        \n        toast({\n          title: \"Contact added\",\n          description: \"The contact has been added successfully\",\n        });\n      }\n      \n      // Reset form\n      setContactName(\"\");\n      setContactPhone(\"\");\n      setEditMode(false);\n      setCurrentContact(null);\n      \n    } catch (error) {\n      console.error(\"Error adding/updating contact:\", error);\n      toast({\n        title: `Failed to ${editMode ? 'update' : 'add'} contact`,\n        description: `There was an error ${editMode ? 'updating' : 'adding'} the contact. Please try again.`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleEditContact = (contact: Contact) => {\n    setEditMode(true);\n    setCurrentContact(contact);\n    setContactName(contact.name);\n    setContactPhone(contact.phone);\n  };\n\n  const handleRemoveContact = async (contactId: string) => {\n    if (!user) return;\n    \n    try {\n      const contactRef = ref(database, `users/${user.uid}/contacts/${contactId}`);\n      await remove(contactRef);\n      \n      toast({\n        title: \"Contact removed\",\n        description: \"The contact has been removed successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error removing contact:\", error);\n      toast({\n        title: \"Failed to remove contact\",\n        description: \"There was an error removing the contact. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <DashboardLayout \n      title=\"Contacts\" \n      subtitle=\"Manage SMS notification recipients\"\n    >\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-lg font-medium text-gray-800\">SMS Notification Contacts</h2>\n        \n        <Dialog onOpenChange={(open) => {\n          if (!open) {\n            setEditMode(false);\n            setCurrentContact(null);\n            setContactName(\"\");\n            setContactPhone(\"\");\n          }\n        }}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-5 w-5 mr-2\" />\n              Add Contact\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>{editMode ? \"Edit Contact\" : \"Add New Contact\"}</DialogTitle>\n              <DialogDescription>\n                {editMode \n                  ? \"Update the contact information below.\"\n                  : \"Enter the contact details to receive SMS notifications.\"}\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"contactName\">Name</Label>\n                <Input \n                  id=\"contactName\" \n                  value={contactName} \n                  onChange={(e) => setContactName(e.target.value)}\n                  placeholder=\"Enter contact name\"\n                />\n              </div>\n              \n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"contactPhone\">Phone Number</Label>\n                <Input \n                  id=\"contactPhone\" \n                  value={contactPhone} \n                  onChange={(e) => setContactPhone(e.target.value)}\n                  placeholder=\"Enter phone number with country code\"\n                />\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <DialogClose asChild>\n                <Button variant=\"outline\">Cancel</Button>\n              </DialogClose>\n              <DialogClose asChild>\n                <Button onClick={handleAddContact}>\n                  {editMode ? \"Update Contact\" : \"Add Contact\"}\n                </Button>\n              </DialogClose>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n      \n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          {contacts.length === 0 && !loading ? (\n            <div className=\"flex flex-col items-center justify-center py-8\">\n              <div className=\"w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center mb-4\">\n                <Info className=\"h-6 w-6 text-primary\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-800 mb-2\">No Contacts</h3>\n              <p className=\"text-gray-500 text-center mb-6\">Add contacts to receive SMS notifications when sensor readings exceed thresholds.</p>\n              \n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button>\n                    <Plus className=\"h-5 w-5 mr-2\" />\n                    Add Your First Contact\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add New Contact</DialogTitle>\n                    <DialogDescription>\n                      Enter the contact details to receive SMS notifications.\n                    </DialogDescription>\n                  </DialogHeader>\n                  \n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid gap-2\">\n                      <Label htmlFor=\"contactName\">Name</Label>\n                      <Input \n                        id=\"contactName\" \n                        value={contactName} \n                        onChange={(e) => setContactName(e.target.value)}\n                        placeholder=\"Enter contact name\"\n                      />\n                    </div>\n                    \n                    <div className=\"grid gap-2\">\n                      <Label htmlFor=\"contactPhone\">Phone Number</Label>\n                      <Input \n                        id=\"contactPhone\" \n                        value={contactPhone} \n                        onChange={(e) => setContactPhone(e.target.value)}\n                        placeholder=\"Enter phone number with country code\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <DialogFooter>\n                    <DialogClose asChild>\n                      <Button variant=\"outline\">Cancel</Button>\n                    </DialogClose>\n                    <DialogClose asChild>\n                      <Button onClick={handleAddContact}>Add Contact</Button>\n                    </DialogClose>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-gray-200\">\n                    <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-500\">Name</th>\n                    <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-500\">Phone Number</th>\n                    <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-500\">Status</th>\n                    <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-500\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {contacts.map(contact => (\n                    <tr key={contact.id} className=\"border-b border-gray-200\">\n                      <td className=\"py-3 px-4\">{contact.name}</td>\n                      <td className=\"py-3 px-4\">{contact.phone}</td>\n                      <td className=\"py-3 px-4\">\n                        <span className=\"status-badge status-badge-success\">\n                          Active\n                        </span>\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <div className=\"flex space-x-3\">\n                          <Dialog onOpenChange={(open) => {\n                            if (open) {\n                              // Initialize the form with the contact data when opening\n                              handleEditContact(contact);\n                            } else {\n                              // Reset form when closing without saving\n                              setEditMode(false);\n                              setCurrentContact(null);\n                              setContactName(\"\");\n                              setContactPhone(\"\");\n                            }\n                          }}>\n                            <DialogTrigger asChild>\n                              <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                                <Pencil className=\"h-4 w-4 text-gray-500 hover:text-primary\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Edit Contact</DialogTitle>\n                                <DialogDescription>\n                                  Update the contact information below.\n                                </DialogDescription>\n                              </DialogHeader>\n                              \n                              <div className=\"grid gap-4 py-4\">\n                                <div className=\"grid gap-2\">\n                                  <Label htmlFor=\"editContactName\">Name</Label>\n                                  <Input \n                                    id=\"editContactName\" \n                                    value={contactName} \n                                    onChange={(e) => setContactName(e.target.value)}\n                                  />\n                                </div>\n                                \n                                <div className=\"grid gap-2\">\n                                  <Label htmlFor=\"editContactPhone\">Phone Number</Label>\n                                  <Input \n                                    id=\"editContactPhone\" \n                                    value={contactPhone} \n                                    onChange={(e) => setContactPhone(e.target.value)}\n                                  />\n                                </div>\n                              </div>\n                              \n                              <DialogFooter>\n                                <DialogClose asChild>\n                                  <Button variant=\"outline\">Cancel</Button>\n                                </DialogClose>\n                                <DialogClose asChild>\n                                  <Button onClick={handleAddContact}>Update Contact</Button>\n                                </DialogClose>\n                              </DialogFooter>\n                            </DialogContent>\n                          </Dialog>\n                          \n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                                <Trash2 className=\"h-4 w-4 text-gray-500 hover:text-destructive\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Remove Contact</DialogTitle>\n                                <DialogDescription>\n                                  Are you sure you want to remove this contact? This action cannot be undone.\n                                </DialogDescription>\n                              </DialogHeader>\n                              <DialogFooter>\n                                <DialogClose asChild>\n                                  <Button variant=\"outline\">Cancel</Button>\n                                </DialogClose>\n                                <DialogClose asChild>\n                                  <Button \n                                    variant=\"destructive\" \n                                    onClick={() => handleRemoveContact(contact.id)}\n                                  >\n                                    Remove\n                                  </Button>\n                                </DialogClose>\n                              </DialogFooter>\n                            </DialogContent>\n                          </Dialog>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      \n      <Alert className=\"bg-blue-50 border-l-4 border-primary\">\n        <Info className=\"h-5 w-5 text-primary\" />\n        <AlertDescription className=\"ml-2\">\n          <h4 className=\"text-sm font-medium text-primary mb-1\">SMS Notifications</h4>\n          <p className=\"text-sm text-gray-600\">\n            The system will send SMS alerts to the contacts listed above when sensor readings exceed thresholds.\n            All notifications are sent via the GSM module integrated with the DrainSentry system.\n          </p>\n        </AlertDescription>\n      </Alert>\n    </DashboardLayout>\n  );\n}\n","size_bytes":16064},"client/src/pages/conveyor.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Power, Loader } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ref, onValue, update } from \"firebase/database\";\nimport { database } from \"@/lib/firebase\";\nimport { Device } from \"@/types\";\n\nexport default function Conveyor() {\n  const { user } = useAuth();\n  const [devices, setDevices] = useState<Device[]>([]);\n  // Conveyor state per device id\n  const [conveyorStates, setConveyorStates] = useState<Record<string, boolean>>(\n    {}\n  );\n  const [loadingStates, setLoadingStates] = useState<Record<string, boolean>>(\n    {}\n  );\n\n  useEffect(() => {\n    if (!user) return;\n    const devicesRef = ref(database, `users/${user.uid}/devices`);\n    const unsubscribe = onValue(devicesRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        const deviceList = Object.entries(data).map(([firebaseId, value]) => ({\n          ...((value as any) ?? {}),\n          firebaseId, // add the firebaseId property dynamically\n        }));\n        setDevices(deviceList as (Device & { firebaseId: string })[]);\n      } else {\n        setDevices([]);\n      }\n    });\n    return () => unsubscribe();\n  }, [user]);\n\n  // Handler for toggling conveyor per device\n  const handleToggle = async (firebaseId: string) => {\n    if (!user) return;\n    setLoadingStates((prev) => ({ ...prev, [firebaseId]: true }));\n    const newState = !conveyorStates[firebaseId];\n    try {\n      // Use the encrypted device ID (the key from Firebase, which is firebaseId here)\n      const deviceRef = ref(\n        database,\n        `users/${user.uid}/devices/${firebaseId}`\n      );\n      await update(deviceRef, { manualConveyor: newState });\n      setConveyorStates((prev) => ({ ...prev, [firebaseId]: newState }));\n    } catch (e) {\n      // Optionally handle error\n    } finally {\n      setLoadingStates((prev) => ({ ...prev, [firebaseId]: false }));\n    }\n  };\n\n  // Listen for manualConveyor state from Firebase\n  useEffect(() => {\n    if (!user) return;\n    const states: Record<string, boolean> = {};\n    const devicesRef = ref(database, `users/${user.uid}/devices`);\n    const unsubscribe = onValue(devicesRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        Object.entries(data).forEach(([firebaseId, value]) => {\n          states[firebaseId] = !!(value as any).manualConveyor;\n        });\n        setConveyorStates(states);\n      }\n    });\n    return () => unsubscribe();\n  }, [user]);\n\n  return (\n    <DashboardLayout\n      title=\"Conveyor Control\"\n      subtitle=\"Manual conveyor operation for each device\"\n    >\n      <div className=\"max-w-2xl mx-auto mt-10 space-y-6\">\n        {devices.length === 0 ? (\n          <Card>\n            <CardHeader>\n              <CardTitle>No Devices Found</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-gray-500\">\n                You have no registered devices. Add a device to control its\n                conveyor.\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          devices.map((device) => (\n            <Card key={device.firebaseId} className=\"\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Power\n                    className={\n                      conveyorStates[device.firebaseId]\n                        ? \"text-green-500\"\n                        : \"text-gray-400\"\n                    }\n                  />\n                  {device.name || device.id} Conveyor\n                </CardTitle>\n                <div className=\"text-sm text-gray-500 mt-1\">\n                  Location: {device.location || \"Unknown\"}\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-col items-center gap-4\">\n                  <div\n                    className={`text-lg font-semibold ${\n                      conveyorStates[device.firebaseId]\n                        ? \"text-green-600\"\n                        : \"text-gray-500\"\n                    }`}\n                  >\n                    Conveyor is{\" \"}\n                    {conveyorStates[device.firebaseId] ? \"ON\" : \"OFF\"}\n                  </div>\n                  <Button\n                    onClick={() => handleToggle(device.firebaseId)}\n                    variant={\n                      conveyorStates[device.firebaseId]\n                        ? \"destructive\"\n                        : \"default\"\n                    }\n                    disabled={loadingStates[device.firebaseId]}\n                    className=\"w-32\"\n                  >\n                    {loadingStates[device.firebaseId] ? (\n                      <Loader className=\"animate-spin h-4 w-4 mr-2\" />\n                    ) : conveyorStates[device.firebaseId] ? (\n                      \"Turn OFF\"\n                    ) : (\n                      \"Turn ON\"\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":5326},"client/src/pages/dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { ref, onValue, get } from \"firebase/database\";\nimport { database } from \"@/lib/firebase\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter,\n} from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport {\n  InfoIcon,\n  Droplet,\n  Trash2,\n  BadgeAlert,\n  Info,\n  Activity,\n  Scale,\n  CalendarClock,\n  MapPin,\n  ChevronRight,\n  Clock,\n  CheckCircle2,\n  AlertTriangle,\n  Settings,\n  Plus,\n  BarChart2,\n  BarChart as History,\n} from \"lucide-react\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { WaterLevel, WasteBin, Device } from \"@/types\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from \"framer-motion\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  Cell,\n  PieChart,\n  Pie,\n  Legend,\n} from \"recharts\";\nimport {\n  useWaterLevelHistory,\n  useWasteBinHistory,\n} from \"@/hooks/useHistoryData\";\nimport { ref as dbRef, onValue as onDbValue } from \"firebase/database\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [location, setLocation] = useLocation();\n  const [waterData, setWaterData] = useState<Record<string, WaterLevel>>({});\n  const [wasteData, setWasteData] = useState<Record<string, WasteBin>>({});\n  const [devices, setDevices] = useState<Device[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [timeFilter, setTimeFilter] = useState<\n    \"hour\" | \"day\" | \"week\" | \"month\"\n  >(\"hour\");\n  const [chartDeviceId, setChartDeviceId] = useState<string | null>(null);\n  // Store all device histories\n  const [allWaterHistories, setAllWaterHistories] = useState<\n    Record<string, any[]>\n  >({});\n  const [allWasteHistories, setAllWasteHistories] = useState<\n    Record<string, any[]>\n  >({});\n  const [deviceLatestValues, setDeviceLatestValues] = useState<\n    Record<\n      string,\n      {\n        waterLevel?: number;\n        binFullness?: number;\n        binWeight?: number;\n        lastWaterUpdate?: string;\n        lastBinUpdate?: string;\n      }\n    >\n  >({});\n\n  // Helper function for water level color\n  function getWaterLevelColor(level: number): string {\n    if (level > 85) return \"bg-destructive\";\n    if (level > 65) return \"bg-warning\";\n    return \"bg-success\";\n  }\n\n  function getWaterLevelTextColor(level: number): string {\n    if (level > 85) return \"text-destructive\";\n    if (level > 65) return \"text-warning\";\n    return \"text-success\";\n  }\n\n  function getWaterLevelStatus(level: number): string {\n    if (level > 85) return \"Critical\";\n    if (level > 65) return \"Warning\";\n    return \"Normal\";\n  }\n\n  // Helper function for bin fullness color\n  function getBinFullnessColor(fullness: number): string {\n    if (fullness > 85) return \"bg-destructive\";\n    if (fullness > 60) return \"bg-warning\";\n    return \"bg-success\";\n  }\n\n  function getBinTextColor(fullness: number): string {\n    if (fullness > 85) return \"text-destructive\";\n    if (fullness > 60) return \"text-warning\";\n    return \"text-success\";\n  }\n\n  function getBinStatus(fullness: number): string {\n    if (fullness > 85) return \"Critical\";\n    if (fullness > 60) return \"Warning\";\n    return \"Normal\";\n  }\n\n  // Helper to get latest value from history\n  const getLatestHistoryValue = (history: any[] | undefined) => {\n    if (!history || history.length === 0) return undefined;\n\n    // Convert history items to ensure they have proper timestamp\n    const validEntries = history.filter((entry) => {\n      // Check if timestamp exists and is valid\n      const timestamp = entry.timestamp ? new Date(entry.timestamp) : null;\n      return timestamp && !isNaN(timestamp.getTime());\n    });\n\n    if (validEntries.length === 0) return undefined;\n\n    // Sort by timestamp in descending order and take the first item\n    return validEntries.sort((a, b) => {\n      const dateA = new Date(a.timestamp);\n      const dateB = new Date(b.timestamp);\n      return dateB.getTime() - dateA.getTime();\n    })[0];\n  };\n\n  // Calculate real-time statistics from history data\n  const updateDeviceStatistics = (\n    deviceKey: string,\n    waterHistory: any[],\n    wasteHistory: any[]\n  ) => {\n    // Get latest water level entry\n    const latestWater = getLatestHistoryValue(waterHistory);\n    const latestWaste = getLatestHistoryValue(wasteHistory);\n\n    // Extract values, handling different data structures\n    const waterLevel = latestWater\n      ? typeof latestWater.level !== \"undefined\"\n        ? latestWater.level\n        : typeof latestWater.value !== \"undefined\"\n        ? latestWater.value\n        : typeof latestWater.waterLevel !== \"undefined\"\n        ? latestWater.waterLevel\n        : 0\n      : 0;\n\n    const binFullness = latestWaste\n      ? typeof latestWaste.fullness !== \"undefined\"\n        ? latestWaste.fullness\n        : typeof latestWaste.binFullness !== \"undefined\"\n        ? latestWaste.binFullness\n        : 0\n      : 0;\n\n    const binWeight = latestWaste\n      ? typeof latestWaste.weight !== \"undefined\"\n        ? latestWaste.weight\n        : typeof latestWaste.binWeight !== \"undefined\"\n        ? latestWaste.binWeight\n        : 0\n      : 0;\n\n    setDeviceLatestValues((prev) => ({\n      ...prev,\n      [deviceKey]: {\n        waterLevel: waterLevel,\n        binFullness: binFullness,\n        binWeight: binWeight,\n        lastWaterUpdate: latestWater?.timestamp,\n        lastBinUpdate: latestWaste?.timestamp,\n      },\n    }));\n  };\n\n  // Get history data\n  const { history: waterHistory, loading: waterHistoryLoading } =\n    useWaterLevelHistory(chartDeviceId || \"\");\n  const { history: wasteHistory, loading: wasteHistoryLoading } =\n    useWasteBinHistory(chartDeviceId || \"\");\n\n  useEffect(() => {\n    if (!user) return;\n\n    const waterRef = ref(database, `users/${user.uid}/waterLevels`);\n    const wasteRef = ref(database, `users/${user.uid}/wasteBins`);\n    const devicesRef = ref(database, `users/${user.uid}/devices`);\n\n    // Subscribe to water data\n    const waterUnsubscribe = onValue(waterRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        setWaterData(data);\n      } else {\n        setWaterData({});\n      }\n      setLoading(false);\n    });\n\n    // Subscribe to waste data\n    const wasteUnsubscribe = onValue(wasteRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        setWasteData(data);\n      } else {\n        setWasteData({});\n      }\n    });\n\n    // Subscribe to devices data\n    const devicesUnsubscribe = onValue(devicesRef, async (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        const deviceList = await Promise.all(\n          Object.entries(data).map(async ([key, device]: [string, any]) => {\n            // Fetch latest history entries for this device\n            const waterHistoryRef = ref(\n              database,\n              `users/${user.uid}/devices/${key}/waterLevelHistory`\n            );\n            const wasteHistoryRef = ref(\n              database,\n              `users/${user.uid}/devices/${key}/wasteBinHistory`\n            );\n\n            try {\n              const [waterSnap, wasteSnap] = await Promise.all([\n                get(waterHistoryRef),\n                get(wasteHistoryRef),\n              ]);\n\n              const waterHistory = waterSnap.exists()\n                ? Object.entries(waterSnap.val()).map(\n                    ([ts, val]: [string, any]) => ({\n                      timestamp: ts,\n                      ...val,\n                    })\n                  )\n                : [];\n\n              const wasteHistory = wasteSnap.exists()\n                ? Object.entries(wasteSnap.val()).map(\n                    ([ts, val]: [string, any]) => ({\n                      timestamp: ts,\n                      ...val,\n                    })\n                  )\n                : [];\n\n              // Update device statistics with latest values\n              updateDeviceStatistics(key, waterHistory, wasteHistory);\n\n              return {\n                firebaseKey: key,\n                id: device.id,\n                name: device.name,\n                location: device.location,\n                status: device.status,\n                lastSeen: device.lastSeen,\n                ...device,\n              };\n            } catch (error) {\n              console.error(`Error fetching history for device ${key}:`, error);\n              return {\n                firebaseKey: key,\n                id: device.id,\n                name: device.name,\n                location: device.location,\n                status: device.status,\n                lastSeen: device.lastSeen,\n                ...device,\n              };\n            }\n          })\n        );\n        setDevices(deviceList);\n        if (deviceList.length > 0 && !chartDeviceId) {\n          setChartDeviceId(deviceList[0].id);\n        }\n        // Fetch all device histories for all devices\n        let unsubscribes: Array<() => void> = [];\n        const waterHistories: Record<string, any[]> = {};\n        const wasteHistories: Record<string, any[]> = {};\n        deviceList.forEach((device) => {\n          const waterHistoryRef = dbRef(\n            database,\n            `users/${user.uid}/devices/${device.firebaseKey}/waterLevelHistory`\n          );\n          const wasteHistoryRef = dbRef(\n            database,\n            `users/${user.uid}/devices/${device.firebaseKey}/wasteBinHistory`\n          );\n          // Water\n          const unsubWater = onDbValue(waterHistoryRef, (snap) => {\n            const val = snap.val();\n            if (val) {\n              waterHistories[device.firebaseKey] = Object.values(val);\n            } else {\n              waterHistories[device.firebaseKey] = [];\n            }\n            setAllWaterHistories({ ...waterHistories });\n          });\n          unsubscribes.push(unsubWater);\n          // Waste\n          const unsubWaste = onDbValue(wasteHistoryRef, (snap) => {\n            const val = snap.val();\n            if (val) {\n              wasteHistories[device.firebaseKey] = Object.values(val);\n            } else {\n              wasteHistories[device.firebaseKey] = [];\n            }\n            setAllWasteHistories({ ...wasteHistories });\n          });\n          unsubscribes.push(unsubWaste);\n        });\n      } else {\n        setDevices([]);\n      }\n    });\n\n    return () => {\n      waterUnsubscribe();\n      wasteUnsubscribe();\n      devicesUnsubscribe();\n    };\n  }, [user, chartDeviceId]);\n\n  const totalDevices = devices.length;\n\n  // Calculate active devices and warning states based on recent data updates (last 1 minute)\n  const oneMinuteAgo = new Date();\n  oneMinuteAgo.setTime(oneMinuteAgo.getTime() - 60000); // 1 minute in milliseconds\n\n  // Calculate device states and critical levels\n  const deviceStatusInfo = devices.map((device) => {\n    const latestValues = deviceLatestValues[device.firebaseKey];\n    if (!latestValues) {\n      return {\n        isActive: false,\n        hasWarning: false,\n        hasCritical: false,\n        waterLevel: 0,\n        binFullness: 0,\n      };\n    }\n\n    const lastWaterUpdate = latestValues.lastWaterUpdate\n      ? new Date(latestValues.lastWaterUpdate)\n      : null;\n    const lastBinUpdate = latestValues.lastBinUpdate\n      ? new Date(latestValues.lastBinUpdate)\n      : null;\n\n    const isActive = Boolean(\n      (lastWaterUpdate && lastWaterUpdate >= oneMinuteAgo) ||\n        (lastBinUpdate && lastBinUpdate >= oneMinuteAgo)\n    );\n\n    const waterLevel = latestValues.waterLevel || 0;\n    const binFullness = latestValues.binFullness || 0;\n\n    const hasWarning =\n      (waterLevel > 65 && waterLevel <= 85) ||\n      (binFullness > 60 && binFullness <= 85);\n    const hasCritical = waterLevel > 85 || binFullness > 85;\n\n    return {\n      isActive,\n      hasWarning,\n      hasCritical,\n      waterLevel,\n      binFullness,\n    };\n  });\n\n  const activeDevices = deviceStatusInfo.filter(\n    (state) => state.isActive\n  ).length;\n  const warningDevices = deviceStatusInfo.filter(\n    (state) => state.hasWarning\n  ).length;\n  const criticalDevices = deviceStatusInfo.filter(\n    (state) => state.hasCritical\n  ).length;\n\n  // Calculate critical levels for specific metrics\n  const criticalWaterLevels = deviceStatusInfo.filter(\n    (state) => state.waterLevel > 85\n  ).length;\n\n  const criticalBins = deviceStatusInfo.filter(\n    (state) => state.binFullness > 85\n  ).length;\n\n  // ...existing code...\n\n  // Helper to get latest value from history\n  function getLatestHistoryValueFromAll(\n    histories: Record<string, any[]>,\n    deviceKey: string,\n    key: string\n  ) {\n    const deviceHistory = histories[deviceKey] || [];\n    if (deviceHistory.length > 0) {\n      const latest = deviceHistory.reduce((a, b) =>\n        new Date(a.timestamp) > new Date(b.timestamp) ? a : b\n      );\n      return typeof latest[key] === \"number\" ? latest[key] : undefined;\n    }\n    return undefined;\n  }\n\n  // Calculate average water level and bin fullness/weight across all devices using latest history\n  const waterLevelsArr = devices.map((d) => {\n    const v = getLatestHistoryValueFromAll(\n      allWaterHistories,\n      d.firebaseKey,\n      \"level\"\n    );\n    if (typeof v === \"number\") return v;\n    const w = waterData[d.firebaseKey];\n    return typeof w?.level === \"number\" ? w.level : 0;\n  });\n  const binFullnessArr = devices.map((d) => {\n    const v = getLatestHistoryValueFromAll(\n      allWasteHistories,\n      d.firebaseKey,\n      \"fullness\"\n    );\n    if (typeof v === \"number\") return v;\n    const wb = wasteData[d.firebaseKey];\n    return typeof wb?.fullness === \"number\" ? wb.fullness : 0;\n  });\n  const binWeightArr = devices.map((d) => {\n    const v = getLatestHistoryValueFromAll(\n      allWasteHistories,\n      d.firebaseKey,\n      \"weight\"\n    );\n    if (typeof v === \"number\") return v;\n    const wb = wasteData[d.firebaseKey];\n    return typeof wb?.weight === \"number\" ? wb.weight : 0;\n  });\n  const avgWaterLevel =\n    waterLevelsArr.length > 0\n      ? waterLevelsArr.reduce((a, b) => a + b, 0) / waterLevelsArr.length\n      : 0;\n  const avgBinFullness =\n    binFullnessArr.length > 0\n      ? binFullnessArr.reduce((a, b) => a + b, 0) / binFullnessArr.length\n      : 0;\n  const avgBinWeight =\n    binWeightArr.length > 0\n      ? binWeightArr.reduce((a, b) => a + b, 0) / binWeightArr.length\n      : 0;\n\n  // Critical if average exceeds threshold\n  // Critical devices are calculated above from latest history values\n\n  // Generate real data for charts from Firebase based on time filter\n  function getFormattedData(type: \"water\" | \"waste\", history: any[]) {\n    if (!history || history.length === 0) {\n      return [];\n    }\n\n    const now = new Date();\n    let data: any[] = [];\n\n    switch (timeFilter) {\n      case \"hour\": {\n        // Filter data for the last 24 hours\n        const last24Hours = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n        data = history.filter(\n          (item) => new Date(item.timestamp) >= last24Hours\n        );\n        return data.map((item) => ({\n          name: new Date(item.timestamp).toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          }),\n          value: type === \"water\" ? item.level : item.fullness,\n        }));\n      }\n      case \"day\": {\n        // Filter data for the last 7 days\n        const last7Days = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        data = history.filter((item) => new Date(item.timestamp) >= last7Days);\n        return data.map((item) => ({\n          name: new Date(item.timestamp).toLocaleDateString([], {\n            month: \"short\",\n            day: \"numeric\",\n          }),\n          value: type === \"water\" ? item.level : item.fullness,\n        }));\n      }\n      case \"week\": {\n        // Filter data for the last 4 weeks\n        const last4Weeks = new Date(\n          now.getTime() - 4 * 7 * 24 * 60 * 60 * 1000\n        );\n        data = history.filter((item) => new Date(item.timestamp) >= last4Weeks);\n        // Aggregate data by week (starting on Sunday)\n        const weeklyData = data.reduce(\n          (\n            acc: Record<string, { name: string; values: number[] }>,\n            item: any\n          ) => {\n            const weekStart = new Date(item.timestamp);\n            weekStart.setDate(weekStart.getDate() - weekStart.getDay());\n            const weekKey = weekStart.toLocaleDateString([], {\n              month: \"short\",\n              day: \"numeric\",\n            });\n            if (!acc[weekKey]) {\n              acc[weekKey] = { name: weekKey, values: [] };\n            }\n            acc[weekKey].values.push(\n              type === \"water\" ? item.level : item.fullness\n            );\n            return acc;\n          },\n          {}\n        );\n        return Object.values(weeklyData).map(\n          (week: { name: string; values: number[] }) => ({\n            name: week.name,\n            value: week.values.reduce((a, b) => a + b, 0) / week.values.length,\n          })\n        );\n      }\n      case \"month\": {\n        // Filter data for the last 12 months\n        const last12Months = new Date(now.getTime());\n        last12Months.setMonth(last12Months.getMonth() - 12);\n        data = history.filter(\n          (item) => new Date(item.timestamp) >= last12Months\n        );\n        // Aggregate data by month\n        const monthlyData = data.reduce(\n          (\n            acc: Record<string, { name: string; values: number[] }>,\n            item: any\n          ) => {\n            const monthKey = new Date(item.timestamp).toLocaleDateString([], {\n              year: \"numeric\",\n              month: \"short\",\n            });\n            if (!acc[monthKey]) {\n              acc[monthKey] = { name: monthKey, values: [] };\n            }\n            acc[monthKey].values.push(\n              type === \"water\" ? item.level : item.fullness\n            );\n            return acc;\n          },\n          {}\n        );\n        return Object.values(monthlyData).map(\n          (month: { name: string; values: number[] }) => ({\n            name: month.name,\n            value:\n              month.values.reduce((a, b) => a + b, 0) / month.values.length,\n          })\n        );\n      }\n      default:\n        return [];\n    }\n  }\n\n  const waterChartData = getFormattedData(\"water\", waterHistory);\n  const wasteChartData = getFormattedData(\"waste\", wasteHistory);\n\n  return (\n    <DashboardLayout title=\"Dashboard\" subtitle=\"DrainSentry system overview\">\n      {/* Dashboard Header with Stats and Time Period Filter Controls */}\n      <div className=\"mb-6 bg-white p-4 rounded-lg shadow-sm border\">\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-gray-800\">\n              System Overview\n            </h2>\n            <p className=\"text-sm text-gray-500\">\n              Real-time monitoring and analytics\n            </p>\n          </div>\n\n          <div className=\"flex items-center mt-3 sm:mt-0\">\n            <span className=\"text-sm font-medium text-gray-700 mr-2\">\n              Time Period:\n            </span>\n            <div className=\"flex items-center space-x-1 p-1 bg-gray-100 rounded-lg shadow-inner\">\n              <Button\n                variant={timeFilter === \"hour\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setTimeFilter(\"hour\")}\n                className={`text-xs ${\n                  timeFilter === \"hour\" ? \"shadow-sm\" : \"\"\n                }`}\n              >\n                Hourly\n              </Button>\n              <Button\n                variant={timeFilter === \"day\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setTimeFilter(\"day\")}\n                className={`text-xs ${timeFilter === \"day\" ? \"shadow-sm\" : \"\"}`}\n              >\n                Daily\n              </Button>\n              <Button\n                variant={timeFilter === \"week\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setTimeFilter(\"week\")}\n                className={`text-xs ${\n                  timeFilter === \"week\" ? \"shadow-sm\" : \"\"\n                }`}\n              >\n                Weekly\n              </Button>\n              <Button\n                variant={timeFilter === \"month\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setTimeFilter(\"month\")}\n                className={`text-xs ${\n                  timeFilter === \"month\" ? \"shadow-sm\" : \"\"\n                }`}\n              >\n                Monthly\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Status Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n        <Card className=\"animated-card hover-scale fade-in border-l-4 border-l-blue-500 overflow-hidden\">\n          <CardHeader className=\"pb-2 bg-gradient-to-r from-blue-50 to-transparent\">\n            <CardTitle className=\"text-base font-medium flex items-center\">\n              <div className=\"bg-blue-100 p-1.5 rounded-md mr-2\">\n                <Activity className=\"h-4 w-4 text-blue-600\" />\n              </div>\n              Total Devices\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <div className=\"text-3xl font-bold\">{totalDevices}</div>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  <span\n                    className={\n                      activeDevices > 0\n                        ? \"text-green-600 font-medium\"\n                        : \"text-gray-500\"\n                    }\n                  >\n                    {activeDevices}\n                  </span>{\" \"}\n                  active\n                </p>\n                {warningDevices > 0 && (\n                  <p className=\"text-sm text-orange-500 mt-1\">\n                    {warningDevices} with warnings\n                  </p>\n                )}\n              </div>\n              <div className=\"bg-blue-100 h-12 w-12 rounded-full flex items-center justify-center opacity-80\">\n                <Activity className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card\n          className={`animated-card slide-in border-l-4 ${\n            criticalWaterLevels > 0 ? \"border-l-red-500\" : \"border-l-green-500\"\n          } overflow-hidden`}\n          style={{ animationDelay: \"0.05s\" }}\n        >\n          <CardHeader className=\"pb-2 bg-gradient-to-r from-blue-50 to-transparent\">\n            <CardTitle className=\"text-base font-medium flex items-center\">\n              <div\n                className={`${\n                  criticalWaterLevels > 0 ? \"bg-red-100\" : \"bg-green-100\"\n                } p-1.5 rounded-md mr-2`}\n              >\n                <Droplet\n                  className={`h-4 w-4 ${\n                    criticalWaterLevels > 0 ? \"text-red-600\" : \"text-green-600\"\n                  }`}\n                />\n              </div>\n              Critical Water Levels\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"relative\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <div\n                  className={`text-3xl font-bold ${\n                    criticalDevices > 0\n                      ? \"text-red-600\"\n                      : warningDevices > 0\n                      ? \"text-orange-500\"\n                      : \"text-green-600\"\n                  }`}\n                >\n                  {criticalDevices}\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {criticalDevices > 0 ? (\n                    <span className=\"text-red-500 font-medium\">\n                      Critical levels detected\n                    </span>\n                  ) : warningDevices > 0 ? (\n                    <span className=\"text-orange-500 font-medium\">\n                      Warning levels detected\n                    </span>\n                  ) : (\n                    <span className=\"text-green-600\">All normal</span>\n                  )}\n                </p>\n                {warningDevices > 0 && (\n                  <p className=\"text-xs text-orange-500 mt-1\">\n                    {warningDevices} devices need attention\n                  </p>\n                )}\n              </div>\n              <div\n                className={`${\n                  criticalWaterLevels > 0 ? \"bg-red-100\" : \"bg-green-100\"\n                } h-12 w-12 rounded-full flex items-center justify-center opacity-80`}\n              >\n                <Droplet\n                  className={`h-6 w-6 ${\n                    criticalWaterLevels > 0 ? \"text-red-600\" : \"text-green-600\"\n                  }`}\n                />\n              </div>\n            </div>\n            {criticalWaterLevels > 0 && (\n              <div className=\"absolute top-3 right-3 w-2.5 h-2.5 rounded-full bg-red-500 pulse-animation\"></div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card\n          className={`animated-card slide-in border-l-4 ${\n            criticalBins > 0 ? \"border-l-red-500\" : \"border-l-green-500\"\n          } overflow-hidden`}\n          style={{ animationDelay: \"0.1s\" }}\n        >\n          <CardHeader className=\"pb-2 bg-gradient-to-r from-orange-50 to-transparent\">\n            <CardTitle className=\"text-base font-medium flex items-center\">\n              <div\n                className={`${\n                  criticalBins > 0 ? \"bg-red-100\" : \"bg-green-100\"\n                } p-1.5 rounded-md mr-2`}\n              >\n                <Trash2\n                  className={`h-4 w-4 ${\n                    criticalBins > 0 ? \"text-red-600\" : \"text-green-600\"\n                  }`}\n                />\n              </div>\n              Critical Waste Bins\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"relative\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <div\n                  className={`text-3xl font-bold ${\n                    criticalBins > 0 ? \"text-red-600\" : \"text-green-600\"\n                  }`}\n                >\n                  {criticalBins}\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {criticalBins > 0 ? (\n                    <span className=\"text-red-500 font-medium\">\n                      Need emptying\n                    </span>\n                  ) : (\n                    <span className=\"text-green-600\">All normal</span>\n                  )}\n                </p>\n              </div>\n              <div\n                className={`${\n                  criticalBins > 0 ? \"bg-red-100\" : \"bg-green-100\"\n                } h-12 w-12 rounded-full flex items-center justify-center opacity-80`}\n              >\n                <Trash2\n                  className={`h-6 w-6 ${\n                    criticalBins > 0 ? \"text-red-600\" : \"text-green-600\"\n                  }`}\n                />\n              </div>\n            </div>\n            {criticalBins > 0 && (\n              <div className=\"absolute top-3 right-3 w-2.5 h-2.5 rounded-full bg-red-500 pulse-animation\"></div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card\n          className={`animated-card slide-in border-l-4 ${\n            criticalWaterLevels + criticalBins > 0\n              ? \"border-l-orange-500\"\n              : \"border-l-green-500\"\n          } overflow-hidden`}\n          style={{ animationDelay: \"0.15s\" }}\n        >\n          <CardHeader className=\"pb-2 bg-gradient-to-r from-gray-50 to-transparent\">\n            <CardTitle className=\"text-base font-medium flex items-center\">\n              <div\n                className={`${\n                  criticalWaterLevels + criticalBins > 0\n                    ? \"bg-orange-100\"\n                    : \"bg-green-100\"\n                } p-1.5 rounded-md mr-2`}\n              >\n                {criticalWaterLevels + criticalBins > 0 ? (\n                  <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                ) : (\n                  <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                )}\n              </div>\n              System Health\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                {criticalWaterLevels + criticalBins > 0 ? (\n                  <>\n                    <div className=\"text-lg font-medium text-orange-600\">\n                      Attention Required\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {criticalWaterLevels + criticalBins} issues need attention\n                    </p>\n                  </>\n                ) : (\n                  <>\n                    <div className=\"text-lg font-medium text-green-600\">\n                      All Systems Normal\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Network status: online\n                    </p>\n                  </>\n                )}\n              </div>\n              <div\n                className={`${\n                  criticalWaterLevels + criticalBins > 0\n                    ? \"bg-orange-100\"\n                    : \"bg-green-100\"\n                } h-12 w-12 rounded-full flex items-center justify-center opacity-80`}\n              >\n                {criticalWaterLevels + criticalBins > 0 ? (\n                  <AlertTriangle className=\"h-6 w-6 text-orange-600\" />\n                ) : (\n                  <CheckCircle2 className=\"h-6 w-6 text-green-600\" />\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions Section */}\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-lg font-medium\">Quick Actions</h2>\n        </div>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <Card\n            className=\"cursor-pointer hover:border-primary hover:shadow-md transition-all duration-200\"\n            onClick={() => setLocation(\"/devices\")}\n          >\n            <CardContent className=\"p-4 flex flex-col items-center justify-center\">\n              <Plus className=\"h-8 w-8 text-primary mb-2\" />\n              <p className=\"text-sm font-medium\">Add Device</p>\n            </CardContent>\n          </Card>\n          <Card\n            className=\"cursor-pointer hover:border-primary hover:shadow-md transition-all duration-200\"\n            onClick={() => setLocation(\"/water-levels\")}\n          >\n            <CardContent className=\"p-4 flex flex-col items-center justify-center\">\n              <Droplet className=\"h-8 w-8 text-blue-500 mb-2\" />\n              <p className=\"text-sm font-medium\">Water Levels</p>\n            </CardContent>\n          </Card>\n          <Card\n            className=\"cursor-pointer hover:border-primary hover:shadow-md transition-all duration-200\"\n            onClick={() => setLocation(\"/waste-bins\")}\n          >\n            <CardContent className=\"p-4 flex flex-col items-center justify-center\">\n              <Trash2 className=\"h-8 w-8 text-emerald-500 mb-2\" />\n              <p className=\"text-sm font-medium\">Waste Bins</p>\n            </CardContent>\n          </Card>\n          <Card\n            className=\"cursor-pointer hover:border-primary hover:shadow-md transition-all duration-200\"\n            onClick={() => setLocation(\"/settings\")}\n          >\n            <CardContent className=\"p-4 flex flex-col items-center justify-center\">\n              <Settings className=\"h-8 w-8 text-gray-500 mb-2\" />\n              <p className=\"text-sm font-medium\">Settings</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {devices.length === 0 && !loading ? (\n        <Card className=\"mb-6\">\n          <CardContent className=\"pt-6 flex flex-col items-center justify-center\">\n            <div className=\"w-16 h-16 rounded-full bg-blue-100 flex items-center justify-center mb-4\">\n              <Info className=\"h-8 w-8 text-blue-600\" />\n            </div>\n            <h3 className=\"text-xl font-medium mb-2\">No devices found</h3>\n            <p className=\"text-center text-gray-500 mb-6 max-w-md\">\n              You haven't added any devices to your DrainSentry system yet. Add\n              your first device to start monitoring your infrastructure.\n            </p>\n\n            <Link href=\"/devices\">\n              <Button>Add Your First Device</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      ) : (\n        <>\n          <div className=\"mb-8\">\n            <Tabs defaultValue=\"all\">\n              <TabsList className=\"mb-4\">\n                <TabsTrigger value=\"all\">All Devices</TabsTrigger>\n                <TabsTrigger value=\"alerts\">\n                  Alerts ({criticalWaterLevels + criticalBins})\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"all\" className=\"mt-0\">\n                <h2 className=\"text-lg font-medium mb-4\">Device Overview</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 mb-6\">\n                  {devices.map((device, index) => {\n                    const waterLevel = waterData[device.firebaseKey];\n                    const wasteBin = wasteData[device.firebaseKey];\n                    const latestValues =\n                      deviceLatestValues[device.firebaseKey] || {};\n\n                    // Get the most recent values from history data\n                    const latestWaterLevel = getLatestHistoryValueFromAll(\n                      allWaterHistories,\n                      device.firebaseKey,\n                      \"level\"\n                    );\n                    const latestBinFullness = getLatestHistoryValueFromAll(\n                      allWasteHistories,\n                      device.firebaseKey,\n                      \"fullness\"\n                    );\n                    const latestBinWeight = getLatestHistoryValueFromAll(\n                      allWasteHistories,\n                      device.firebaseKey,\n                      \"weight\"\n                    );\n\n                    // Use latest values from history or fall back to real-time values\n                    const currentWaterLevel =\n                      typeof latestWaterLevel === \"number\"\n                        ? latestWaterLevel\n                        : latestValues.waterLevel ?? waterLevel?.level ?? 0;\n                    const currentBinFullness =\n                      typeof latestBinFullness === \"number\"\n                        ? latestBinFullness\n                        : latestValues.binFullness ?? wasteBin?.fullness ?? 0;\n                    const currentBinWeight =\n                      typeof latestBinWeight === \"number\"\n                        ? latestBinWeight\n                        : latestValues.binWeight ?? wasteBin?.weight ?? 0;\n\n                    // Check if device is active based on latest updates\n                    const lastUpdatedWater = latestValues.lastWaterUpdate\n                      ? new Date(latestValues.lastWaterUpdate)\n                      : waterLevel?.lastUpdated\n                      ? new Date(waterLevel.lastUpdated)\n                      : null;\n                    const lastEmptiedBin = latestValues.lastBinUpdate\n                      ? new Date(latestValues.lastBinUpdate)\n                      : wasteBin?.lastEmptied\n                      ? new Date(wasteBin.lastEmptied)\n                      : null;\n\n                    // Device is active if any sensor has been updated in the last 1 minute\n                    const isActive =\n                      (lastUpdatedWater && lastUpdatedWater >= oneMinuteAgo) ||\n                      (lastEmptiedBin && lastEmptiedBin >= oneMinuteAgo);\n\n                    return (\n                      <motion.div\n                        key={device.id}\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ duration: 0.4, delay: 0.05 * index }}\n                        whileHover={{ scale: 1.02 }}\n                        onClick={() =>\n                          setLocation(`/water-levels/${device.id}`)\n                        }\n                        className=\"cursor-pointer\"\n                      >\n                        <Card className=\"h-full border-2 hover:border-primary hover:shadow-lg hover:-translate-y-1 transition-all duration-300 overflow-hidden\">\n                          <CardHeader className=\"pb-3 bg-gradient-to-r from-blue-50 to-transparent border-b\">\n                            <div className=\"flex justify-between items-center\">\n                              <div className=\"flex items-center gap-2\">\n                                <div className=\"flex -space-x-1\">\n                                  <div className=\"w-4 h-4 rounded-full bg-primary flex items-center justify-center\">\n                                    <Droplet className=\"h-2.5 w-2.5 text-white\" />\n                                  </div>\n                                  <div className=\"w-4 h-4 rounded-full bg-emerald-500 flex items-center justify-center\">\n                                    <Trash2 className=\"h-2.5 w-2.5 text-white\" />\n                                  </div>\n                                </div>\n                                <CardTitle className=\"text-base font-medium text-gray-800\">\n                                  {device.name}\n                                </CardTitle>\n                              </div>\n                              <Badge\n                                variant={isActive ? \"default\" : \"outline\"}\n                                className={\n                                  isActive ? \"\" : \"bg-gray-100 text-gray-500\"\n                                }\n                              >\n                                {isActive ? \"Active\" : \"Inactive\"}\n                              </Badge>\n                            </div>\n                            <CardDescription className=\"flex items-center mt-1 text-sm text-gray-500\">\n                              <MapPin className=\"h-3.5 w-3.5 mr-1\" />\n                              {device.location}\n                            </CardDescription>\n                          </CardHeader>\n\n                          <CardContent className=\"pt-3\">\n                            <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                              <div>\n                                <div className=\"flex justify-between items-center mb-1\">\n                                  <span className=\"text-sm text-gray-500\">\n                                    Bin Fullness\n                                  </span>\n                                  <Badge\n                                    variant=\"outline\"\n                                    className={getBinTextColor(\n                                      currentBinFullness\n                                    )}\n                                  >\n                                    {getBinStatus(currentBinFullness)}\n                                  </Badge>\n                                </div>\n                                <div className=\"w-full bg-gray-200 rounded-full h-2.5 overflow-hidden mb-1\">\n                                  <div\n                                    className={`h-2.5 rounded-full ${getBinFullnessColor(\n                                      currentBinFullness\n                                    )}`}\n                                    style={{\n                                      width: `${currentBinFullness}%`,\n                                    }}\n                                  ></div>\n                                </div>\n                                <div className=\"flex justify-between items-center text-xs text-gray-500\">\n                                  <span>Current: {currentBinFullness}%</span>\n                                  <span className=\"flex items-center\">\n                                    <Clock className=\"h-3 w-3 mr-1\" />\n                                    Last emptied:{\" \"}\n                                    {wasteBin?.lastEmptied || \"Never\"}\n                                  </span>\n                                </div>\n                              </div>\n\n                              <div>\n                                <div className=\"flex justify-between items-center mb-1\">\n                                  <span className=\"text-sm text-gray-500\">\n                                    Weight\n                                  </span>\n                                  <span className=\"text-sm font-medium\">\n                                    {currentBinWeight} kg\n                                  </span>\n                                </div>\n                                <div className=\"flex items-center gap-1 mb-1\">\n                                  <Scale className=\"h-4 w-4 text-emerald-500\" />\n                                  <div className=\"w-full bg-gray-200 rounded-full h-2.5 overflow-hidden\">\n                                    <div\n                                      className=\"h-2.5 rounded-full bg-emerald-500\"\n                                      style={{\n                                        width: `${Math.min(\n                                          (currentBinWeight / 100) * 100,\n                                          100\n                                        )}%`,\n                                      }}\n                                    ></div>\n                                  </div>\n                                </div>\n                                <div className=\"flex justify-between text-xs text-gray-500\">\n                                  <span>Capacity: 100kg</span>\n                                  <span>\n                                    {Math.round((currentBinWeight / 100) * 100)}\n                                    % full\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n\n                            <div>\n                              <div className=\"flex justify-between items-center mb-1\">\n                                <span className=\"text-sm text-gray-500\">\n                                  Water Level\n                                </span>\n                                <span className=\"text-xs font-medium\">\n                                  {currentWaterLevel}%\n                                </span>\n                              </div>\n                              <div className=\"w-full bg-gray-200 rounded-full h-2.5 overflow-hidden mb-1\">\n                                <div\n                                  className={`h-2.5 rounded-full ${getWaterLevelColor(\n                                    currentWaterLevel\n                                  )}`}\n                                  style={{\n                                    width: `${currentWaterLevel}%`,\n                                  }}\n                                ></div>\n                              </div>\n                              <div className=\"flex items-center text-xs text-gray-500\">\n                                <Badge\n                                  variant=\"outline\"\n                                  className={getWaterLevelTextColor(\n                                    currentWaterLevel\n                                  )}\n                                >\n                                  {getWaterLevelStatus(currentWaterLevel)}\n                                </Badge>\n                                <span className=\"ml-auto flex items-center\">\n                                  <Clock className=\"h-3 w-3 mr-1\" />\n                                  {waterLevel?.lastUpdated || \"Never\"}\n                                </span>\n                              </div>\n                            </div>\n                          </CardContent>\n\n                          <CardFooter className=\"flex justify-between border-t pt-2 pb-2 bg-gray-50\">\n                            <div className=\"flex items-center text-xs text-gray-500\">\n                              <CalendarClock className=\"h-3.5 w-3.5 mr-1\" />\n                              Last seen: {device.lastSeen}\n                            </div>\n\n                            <div className=\"flex gap-3\">\n                              <Link\n                                to={`/water-levels/${device.id}`}\n                                className=\"flex items-center text-primary text-sm\"\n                              >\n                                Details\n                                <ChevronRight className=\"h-4 w-4 ml-1\" />\n                              </Link>\n                              <Link\n                                to={`/device-history/${device.id}`}\n                                className=\"flex items-center text-emerald-600 text-sm\"\n                              >\n                                History\n                                <BarChart2 className=\"h-4 w-4 ml-1\" />\n                              </Link>\n                            </div>\n                          </CardFooter>\n                        </Card>\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"alerts\" className=\"mt-0\">\n                <h2 className=\"text-lg font-medium mb-4\">Critical Devices</h2>\n                {criticalWaterLevels + criticalBins === 0 ? (\n                  <Card>\n                    <CardContent className=\"py-6 flex flex-col items-center justify-center\">\n                      <div className=\"w-12 h-12 rounded-full bg-green-100 flex items-center justify-center mb-3\">\n                        <InfoIcon className=\"h-6 w-6 text-green-600\" />\n                      </div>\n                      <h3 className=\"text-lg font-medium mb-1\">\n                        All Systems Normal\n                      </h3>\n                      <p className=\"text-center text-gray-500\">\n                        There are no critical alerts at this time.\n                      </p>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {devices.map((device, index) => {\n                      const waterLevel = waterData[device.firebaseKey];\n                      const wasteBin = wasteData[device.firebaseKey];\n\n                      // Only show critical devices\n                      if (\n                        waterLevel &&\n                        waterLevel.level <= 85 &&\n                        wasteBin &&\n                        wasteBin.fullness <= 85\n                      ) {\n                        return null;\n                      }\n\n                      // Check if device is active\n                      const lastUpdatedWater = waterLevel?.lastUpdated\n                        ? new Date(waterLevel.lastUpdated)\n                        : null;\n                      const lastEmptiedBin = wasteBin?.lastEmptied\n                        ? new Date(wasteBin.lastEmptied)\n                        : null;\n\n                      // Define fiveMinutesAgo for critical device activity check\n                      const fiveMinutesAgo = new Date();\n                      fiveMinutesAgo.setTime(\n                        fiveMinutesAgo.getTime() - 5 * 60 * 1000\n                      );\n\n                      const isActive =\n                        (lastUpdatedWater &&\n                          lastUpdatedWater >= fiveMinutesAgo) ||\n                        (lastEmptiedBin && lastEmptiedBin >= fiveMinutesAgo);\n\n                      return (\n                        <motion.div\n                          key={device.id}\n                          initial={{ opacity: 0, y: 20 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ duration: 0.4, delay: index * 0.1 }}\n                          className=\"col-span-1\"\n                          onClick={() =>\n                            setLocation(`/water-level-details?id=${device.id}`)\n                          }\n                        >\n                          <Card className=\"h-full border-2 border-red-200 hover:border-red-500 hover:shadow-lg transition-all duration-300 overflow-hidden cursor-pointer\">\n                            <CardHeader className=\"pb-3 bg-red-50\">\n                              <div className=\"flex justify-between items-center\">\n                                <CardTitle className=\"text-base font-medium\">\n                                  {device.name}\n                                </CardTitle>\n                                <Badge\n                                  variant={isActive ? \"destructive\" : \"outline\"}\n                                  className={\n                                    isActive ? \"\" : \"bg-gray-100 text-gray-500\"\n                                  }\n                                >\n                                  {isActive ? \"Critical\" : \"Inactive\"}\n                                </Badge>\n                              </div>\n                              <CardDescription className=\"flex items-center mt-1\">\n                                <MapPin className=\"h-3.5 w-3.5 mr-1\" />\n                                {device.location}\n                              </CardDescription>\n                            </CardHeader>\n\n                            <CardContent className=\"pb-3\">\n                              <div className=\"space-y-3\">\n                                {waterLevel && waterLevel.level > 85 && (\n                                  <div>\n                                    <div className=\"flex justify-between items-center mb-1\">\n                                      <span className=\"text-sm text-gray-500 flex items-center\">\n                                        <Droplet className=\"h-3.5 w-3.5 mr-1 text-red-500\" />\n                                        Water Level\n                                      </span>\n                                      <Badge variant=\"destructive\">\n                                        {waterLevel.level}%\n                                      </Badge>\n                                    </div>\n                                    <div className=\"w-full bg-gray-200 rounded-full h-2 overflow-hidden\">\n                                      <div\n                                        className=\"h-2 rounded-full bg-red-500\"\n                                        style={{\n                                          width: `${waterLevel.level}%`,\n                                        }}\n                                      ></div>\n                                    </div>\n                                    <div className=\"mt-1 text-xs text-red-500\">\n                                      Critical level detected - requires\n                                      immediate attention\n                                    </div>\n                                  </div>\n                                )}\n\n                                {wasteBin && wasteBin.fullness > 85 && (\n                                  <div>\n                                    <div className=\"flex justify-between items-center mb-1\">\n                                      <span className=\"text-sm text-gray-500 flex items-center\">\n                                        <Trash2 className=\"h-3.5 w-3.5 mr-1 text-red-500\" />\n                                        Bin Fullness\n                                      </span>\n                                      <Badge variant=\"destructive\">\n                                        {wasteBin.fullness}%\n                                      </Badge>\n                                    </div>\n                                    <div className=\"w-full bg-gray-200 rounded-full h-2 overflow-hidden\">\n                                      <div\n                                        className=\"h-2 rounded-full bg-red-500\"\n                                        style={{\n                                          width: `${wasteBin.fullness}%`,\n                                        }}\n                                      ></div>\n                                    </div>\n                                    <div className=\"mt-1 text-xs text-red-500\">\n                                      Bin needs emptying soon\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            </CardContent>\n\n                            <CardFooter className=\"pt-0 border-t flex justify-between items-center py-2\">\n                              <div className=\"text-xs text-gray-500 flex items-center\">\n                                <BadgeAlert className=\"h-3.5 w-3.5 mr-1 text-red-500\" />\n                                Critical Alert\n                              </div>\n                              <span className=\"text-sm text-red-500 flex items-center\">\n                                View Details\n                                <ChevronRight className=\"h-4 w-4 ml-1\" />\n                              </span>\n                            </CardFooter>\n                          </Card>\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n                )}\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          <div className=\"mb-8\">\n            <h2 className=\"text-xl font-semibold mb-4 text-gray-800\">\n              Trend Analysis\n            </h2>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n              <Card className=\"border rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow duration-300\">\n                <CardHeader className=\"bg-gradient-to-r from-blue-50 to-transparent border-b pb-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <div>\n                      <CardTitle className=\"text-base font-medium flex items-center gap-2\">\n                        <Droplet className=\"h-5 w-5 text-blue-500\" />\n                        Water Level Trends\n                      </CardTitle>\n                      <CardDescription>\n                        {timeFilter === \"hour\"\n                          ? \"Hourly\"\n                          : timeFilter === \"day\"\n                          ? \"Daily\"\n                          : timeFilter === \"week\"\n                          ? \"Weekly\"\n                          : \"Monthly\"}{\" \"}\n                        water level readings\n                      </CardDescription>\n                    </div>\n                    <div className=\"bg-blue-100 p-2 rounded-md\">\n                      <Activity className=\"h-5 w-5 text-blue-600\" />\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"p-4\">\n                  {waterChartData.length === 0 ? (\n                    <div className=\"flex items-center justify-center h-72\">\n                      <p className=\"text-gray-500\">No data found</p>\n                    </div>\n                  ) : (\n                    <>\n                      <div className=\"h-72\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          <AreaChart\n                            data={waterChartData}\n                            margin={{\n                              top: 10,\n                              right: 10,\n                              left: 10,\n                              bottom: 10,\n                            }}\n                          >\n                            <defs>\n                              <linearGradient\n                                id=\"colorWater\"\n                                x1=\"0\"\n                                y1=\"0\"\n                                x2=\"0\"\n                                y2=\"1\"\n                              >\n                                <stop\n                                  offset=\"5%\"\n                                  stopColor=\"#3b82f6\"\n                                  stopOpacity={0.8}\n                                />\n                                <stop\n                                  offset=\"95%\"\n                                  stopColor=\"#3b82f6\"\n                                  stopOpacity={0.1}\n                                />\n                              </linearGradient>\n                            </defs>\n                            <CartesianGrid\n                              strokeDasharray=\"3 3\"\n                              vertical={false}\n                              stroke=\"#eee\"\n                            />\n                            <XAxis\n                              dataKey=\"name\"\n                              tick={{ fontSize: 12 }}\n                              axisLine={{ stroke: \"#e5e7eb\" }}\n                              tickLine={{ stroke: \"#e5e7eb\" }}\n                            />\n                            <YAxis\n                              tickFormatter={(value) => `${value}%`}\n                              domain={[0, 100]}\n                              tick={{ fontSize: 12 }}\n                              axisLine={{ stroke: \"#e5e7eb\" }}\n                              tickLine={{ stroke: \"#e5e7eb\" }}\n                            />\n                            <Tooltip\n                              formatter={(value) => [\n                                `${value}%`,\n                                \"Water Level\",\n                              ]}\n                              contentStyle={{\n                                backgroundColor: \"white\",\n                                borderRadius: \"6px\",\n                                boxShadow: \"0 2px 10px rgba(0, 0, 0, 0.1)\",\n                                border: \"1px solid #e5e7eb\",\n                              }}\n                            />\n                            <Area\n                              type=\"monotone\"\n                              dataKey=\"value\"\n                              stroke=\"#3b82f6\"\n                              strokeWidth={2}\n                              fillOpacity={1}\n                              fill=\"url(#colorWater)\"\n                              activeDot={{\n                                r: 6,\n                                stroke: \"white\",\n                                strokeWidth: 2,\n                              }}\n                            />\n                          </AreaChart>\n                        </ResponsiveContainer>\n                      </div>\n\n                      <div className=\"flex justify-between items-center mt-4 px-2\">\n                        <div className=\"flex items-center\">\n                          <div className=\"h-3 w-3 rounded-full bg-blue-500 mr-2\"></div>\n                          <span className=\"text-sm text-gray-500\">\n                            Water Level\n                          </span>\n                        </div>\n                        <div className=\"text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded\">\n                          Last update: {new Date().toLocaleTimeString()}\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card className=\"border rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow duration-300\">\n                <CardHeader className=\"bg-gradient-to-r from-emerald-50 to-transparent border-b pb-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <div>\n                      <CardTitle className=\"text-base font-medium flex items-center gap-2\">\n                        <Trash2 className=\"h-5 w-5 text-emerald-500\" />\n                        Waste Bin Status\n                      </CardTitle>\n                      <CardDescription>\n                        {timeFilter === \"hour\"\n                          ? \"Hourly\"\n                          : timeFilter === \"day\"\n                          ? \"Daily\"\n                          : timeFilter === \"week\"\n                          ? \"Weekly\"\n                          : \"Monthly\"}{\" \"}\n                        bin fullness readings\n                      </CardDescription>\n                    </div>\n                    <div className=\"bg-emerald-100 p-2 rounded-md\">\n                      <Activity className=\"h-5 w-5 text-emerald-600\" />\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"p-4\">\n                  {wasteChartData.length === 0 ? (\n                    <div className=\"flex items-center justify-center h-72\">\n                      <p className=\"text-gray-500\">No data found</p>\n                    </div>\n                  ) : (\n                    <>\n                      <div className=\"h-72\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          <BarChart\n                            data={wasteChartData}\n                            margin={{\n                              top: 10,\n                              right: 10,\n                              left: 10,\n                              bottom: 10,\n                            }}\n                          >\n                            <CartesianGrid\n                              strokeDasharray=\"3 3\"\n                              vertical={false}\n                              stroke=\"#eee\"\n                            />\n                            <XAxis\n                              dataKey=\"name\"\n                              tick={{ fontSize: 12 }}\n                              axisLine={{ stroke: \"#e5e7eb\" }}\n                              tickLine={{ stroke: \"#e5e7eb\" }}\n                            />\n                            <YAxis\n                              tickFormatter={(value) => `${value}%`}\n                              domain={[0, 100]}\n                              tick={{ fontSize: 12 }}\n                              axisLine={{ stroke: \"#e5e7eb\" }}\n                              tickLine={{ stroke: \"#e5e7eb\" }}\n                            />\n                            <Tooltip\n                              formatter={(value) => [\n                                `${value}%`,\n                                \"Bin Fullness\",\n                              ]}\n                              contentStyle={{\n                                backgroundColor: \"white\",\n                                borderRadius: \"6px\",\n                                boxShadow: \"0 2px 10px rgba(0, 0, 0, 0.1)\",\n                                border: \"1px solid #e5e7eb\",\n                              }}\n                            />\n                            <Bar\n                              dataKey=\"value\"\n                              radius={[4, 4, 0, 0]}\n                              fillOpacity={0.9}\n                              barSize={30}\n                              fill=\"#10b981\"\n                            />\n                          </BarChart>\n                        </ResponsiveContainer>\n                      </div>\n\n                      <div className=\"flex justify-between items-center mt-4 px-2\">\n                        <div className=\"flex items-center\">\n                          <div className=\"h-3 w-3 rounded-full bg-emerald-500 mr-2\"></div>\n                          <span className=\"text-sm text-gray-500\">\n                            Bin Fullness\n                          </span>\n                        </div>\n                        <div className=\"text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded\">\n                          Last update: {new Date().toLocaleTimeString()}\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </>\n      )}\n    </DashboardLayout>\n  );\n}\n","size_bytes":65044},"client/src/pages/device-history.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { database } from \"@/lib/firebase\";\nimport { ref, onValue, get } from \"firebase/database\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { WaterLevel, WasteBin, Device } from \"@/types\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Droplet,\n  Trash,\n  Scale,\n  ArrowLeft,\n  CalendarDays,\n  Clock,\n  RefreshCw,\n  AlertTriangle,\n  Info,\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\n// Define the history entry interfaces\ninterface HistoryEntry {\n  timestamp: string;\n  value: number;\n  type: string;\n}\n\ninterface DeviceReadingHistory {\n  waterLevels: HistoryEntry[];\n  binFullness: HistoryEntry[];\n  binWeight: HistoryEntry[];\n}\n\nexport default function DeviceHistory() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [location, setLocation] = useLocation();\n  const [loading, setLoading] = useState(true);\n  const [device, setDevice] = useState<Device | null>(null);\n  const [waterLevel, setWaterLevel] = useState<WaterLevel | null>(null);\n  const [wasteBin, setWasteBin] = useState<WasteBin | null>(null);\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(\n    new Date()\n  );\n  const [readingHistory, setReadingHistory] = useState<DeviceReadingHistory>({\n    waterLevels: [],\n    binFullness: [],\n    binWeight: [],\n  });\n  const [historyRange, setHistoryRange] = useState<\"24h\" | \"7d\" | \"30d\">(\"7d\");\n  const [activeTab, setActiveTab] = useState(\"waterLevel\");\n\n  // Get device ID from URL path parameter\n  const [, deviceId] = window.location.pathname.split(\"/device-history/\");\n\n  useEffect(() => {\n    if (!user || !deviceId) return;\n\n    // First, find the correct container key for the device ID\n    const devicesRef = ref(database, `users/${user.uid}/devices`);\n\n    // Get all devices to find the matching container\n    const devicesUnsubscribe = onValue(devicesRef, (devicesSnapshot) => {\n      if (!devicesSnapshot.exists()) {\n        setLoading(false);\n        toast({\n          title: \"Device not found\",\n          description: \"Could not find the device information\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Find the device with the given ID\n      let foundDevice: Device | null = null;\n      let deviceContainerKey = null;\n\n      devicesSnapshot.forEach((childSnapshot) => {\n        const deviceContainer = childSnapshot.val();\n        if (deviceContainer.id === deviceId) {\n          foundDevice = {\n            ...deviceContainer,\n            firebaseKey: childSnapshot.key,\n          };\n          deviceContainerKey = childSnapshot.key;\n          return true; // Break the forEach loop\n        }\n        return false;\n      });\n\n      if (!foundDevice || !deviceContainerKey) {\n        setLoading(false);\n        toast({\n          title: \"Device not found\",\n          description: \"Could not find the device with the specified ID\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setDevice(foundDevice);\n\n      // Now load the water level and waste bin data\n      const waterLevelRef = ref(\n        database,\n        `users/${user.uid}/waterLevels/${deviceContainerKey}`\n      );\n      const wasteBinRef = ref(\n        database,\n        `users/${user.uid}/wasteBins/${deviceContainerKey}`\n      );\n\n      // Get water level data\n      const waterLevelUnsubscribe = onValue(\n        waterLevelRef,\n        (waterLevelSnapshot) => {\n          if (waterLevelSnapshot.exists()) {\n            setWaterLevel(waterLevelSnapshot.val());\n          }\n        }\n      );\n\n      // Get waste bin data\n      const wasteBinUnsubscribe = onValue(wasteBinRef, (wasteBinSnapshot) => {\n        if (wasteBinSnapshot.exists()) {\n          setWasteBin(wasteBinSnapshot.val());\n        }\n      });\n\n      // Load history data based on the selected date and range\n      loadHistoryData(user.uid, deviceContainerKey, selectedDate, historyRange);\n\n      setLoading(false);\n\n      return () => {\n        waterLevelUnsubscribe();\n        wasteBinUnsubscribe();\n      };\n    });\n\n    return () => {\n      devicesUnsubscribe();\n    };\n  }, [user, deviceId, selectedDate, historyRange]);\n\n  const loadHistoryData = async (\n    userId: string,\n    deviceContainerKey: string,\n    date: Date | undefined,\n    range: \"24h\" | \"7d\" | \"30d\"\n  ) => {\n    if (!date) return;\n\n    // Prepare empty history objects\n    const newHistory: DeviceReadingHistory = {\n      waterLevels: [],\n      binFullness: [],\n      binWeight: [],\n    };\n\n    try {\n      // Load water level history directly from device\n      const waterLevelHistoryRef = ref(\n        database,\n        `users/${userId}/devices/${deviceContainerKey}/waterLevelHistory`\n      );\n\n      const waterLevelSnapshot = await get(waterLevelHistoryRef);\n\n      if (waterLevelSnapshot.exists()) {\n        const waterLevelData = waterLevelSnapshot.val();\n\n        // Convert object to array of entries\n        Object.entries(waterLevelData).forEach(([key, data]: [string, any]) => {\n          if (data && data.timestamp) {\n            const entryDate = new Date(data.timestamp);\n\n            // Filter based on date range\n            if (isWithinDateRange(entryDate, date, range)) {\n              newHistory.waterLevels.push({\n                timestamp: data.timestamp,\n                value: data.level || data.value || 0,\n                type: \"water\",\n              });\n            }\n          }\n        });\n      }\n\n      // Load waste bin history directly from device\n      const wasteBinHistoryRef = ref(\n        database,\n        `users/${userId}/devices/${deviceContainerKey}/wasteBinHistory`\n      );\n\n      const wasteBinSnapshot = await get(wasteBinHistoryRef);\n\n      if (wasteBinSnapshot.exists()) {\n        const wasteBinData = wasteBinSnapshot.val();\n\n        // Convert object to array of entries\n        Object.entries(wasteBinData).forEach(([key, data]: [string, any]) => {\n          if (data && data.timestamp) {\n            const entryDate = new Date(data.timestamp);\n\n            // Filter based on date range\n            if (isWithinDateRange(entryDate, date, range)) {\n              // Add fullness entry if it exists\n              if (data.fullness !== undefined) {\n                newHistory.binFullness.push({\n                  timestamp: data.timestamp,\n                  value: data.fullness,\n                  type: \"fullness\",\n                });\n              }\n\n              // Add weight entry if it exists\n              if (data.weight !== undefined) {\n                newHistory.binWeight.push({\n                  timestamp: data.timestamp,\n                  value: data.weight,\n                  type: \"weight\",\n                });\n              }\n            }\n          }\n        });\n      }\n\n      // Sort all history entries by timestamp (most recent first)\n      newHistory.waterLevels.sort(\n        (a, b) =>\n          new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n      );\n\n      newHistory.binFullness.sort(\n        (a, b) =>\n          new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n      );\n\n      newHistory.binWeight.sort(\n        (a, b) =>\n          new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n      );\n\n      setReadingHistory(newHistory);\n    } catch (error) {\n      console.error(\"Error loading history data:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load history data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Helper function to check if a date is within the selected range\n  const isWithinDateRange = (\n    entryDate: Date,\n    selectedDate: Date,\n    range: \"24h\" | \"7d\" | \"30d\"\n  ) => {\n    const endDate = new Date(selectedDate);\n    endDate.setHours(23, 59, 59, 999); // End of selected day\n\n    const startDate = new Date(selectedDate);\n\n    switch (range) {\n      case \"24h\":\n        startDate.setHours(0, 0, 0, 0); // Start of selected day\n        break;\n      case \"7d\":\n        startDate.setDate(startDate.getDate() - 6);\n        startDate.setHours(0, 0, 0, 0);\n        break;\n      case \"30d\":\n        startDate.setDate(startDate.getDate() - 29);\n        startDate.setHours(0, 0, 0, 0);\n        break;\n    }\n\n    return entryDate >= startDate && entryDate <= endDate;\n  };\n\n  // Helper function to format the timestamp for display\n  const formatTimestamp = (timestamp: string) => {\n    try {\n      // Try to parse as a full date string\n      const date = new Date(timestamp);\n      if (!isNaN(date.getTime())) {\n        return date.toLocaleString();\n      }\n    } catch (e) {\n      // If parsing fails, handle as time-only format\n    }\n\n    // Handle legacy format HH_MM_SS to HH:MM:SS\n    if (timestamp.includes(\"_\")) {\n      return timestamp.replace(/_/g, \":\");\n    }\n\n    return timestamp;\n  };\n\n  // Helper to add leading zeros to dates\n  const formatDateForDisplay = (date: Date | undefined) => {\n    if (!date) return \"\";\n    return date.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  // Get current water level and waste bin stats from the most recent history entries\n  const currentWaterLevel = readingHistory.waterLevels[0]?.value || 0;\n  const currentWaterTimestamp = readingHistory.waterLevels[0]?.timestamp;\n\n  const currentBinFullness = readingHistory.binFullness[0]?.value || 0;\n  const currentBinFullnessTimestamp = readingHistory.binFullness[0]?.timestamp;\n\n  const currentBinWeight = readingHistory.binWeight[0]?.value || 0;\n  const currentBinWeightTimestamp = readingHistory.binWeight[0]?.timestamp;\n\n  // Get status color classes based on values\n  const getWaterLevelColor = (level: number) => {\n    if (level < 45) return \"text-green-500\";\n    if (level < 65) return \"text-yellow-500\";\n    return \"text-red-500\";\n  };\n\n  const getBinFullnessColor = (fullness: number) => {\n    if (fullness < 44) return \"text-green-500\";\n    if (fullness < 60) return \"text-yellow-500\";\n    return \"text-red-500\";\n  };\n\n  return (\n    <DashboardLayout\n      title={device?.name || \"Device History\"}\n      subtitle={device?.location || \"Loading...\"}\n    >\n      {loading ? (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n            <p className=\"text-gray-500\">Loading device data...</p>\n          </div>\n        </div>\n      ) : (\n        <>\n          <div className=\"mb-4 flex items-center justify-between\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setLocation(\"/devices\")}\n              className=\"flex items-center gap-1\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back to Devices\n            </Button>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  if (device && user && device.firebaseKey) {\n                    loadHistoryData(\n                      user.uid,\n                      device.firebaseKey,\n                      selectedDate,\n                      historyRange\n                    );\n                    toast({\n                      title: \"Refreshed\",\n                      description: \"Data has been refreshed\",\n                    });\n                  }\n                }}\n                className=\"flex items-center gap-1\"\n              >\n                <RefreshCw className=\"h-4 w-4\" />\n                Refresh\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"grid gap-4 md:grid-cols-1 lg:grid-cols-3 mb-6\">\n            {/* Current Water Level */}\n            <Card className=\"hover:shadow-md transition-shadow duration-200\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base font-medium flex items-center gap-2\">\n                  <Droplet className=\"h-5 w-5 text-blue-500\" />\n                  Current Water Level\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-between\">\n                  <span\n                    className={`text-2xl font-bold ${getWaterLevelColor(\n                      currentWaterLevel\n                    )}`}\n                  >\n                    {currentWaterLevel}%\n                  </span>\n                  <Badge\n                    variant={\n                      currentWaterLevel > 65\n                        ? \"destructive\"\n                        : currentWaterLevel > 45\n                        ? \"outline\"\n                        : \"default\"\n                    }\n                  >\n                    {currentWaterLevel > 65\n                      ? \"High\"\n                      : currentWaterLevel > 45\n                      ? \"Medium\"\n                      : \"Low\"}\n                  </Badge>\n                </div>\n                <div className=\"flex justify-between items-center mt-2\">\n                  <p className=\"text-xs text-gray-500\">\n                    Last updated:{\" \"}\n                    {currentWaterTimestamp\n                      ? new Date(currentWaterTimestamp).toLocaleString()\n                      : \"Never\"}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    Threshold: {device?.thresholds?.waterLevel || 45}%\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Current Bin Fullness */}\n            <Card className=\"hover:shadow-md transition-shadow duration-200\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base font-medium flex items-center gap-2\">\n                  <Trash className=\"h-5 w-5 text-orange-500\" />\n                  Current Bin Fullness\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-between\">\n                  <span\n                    className={`text-2xl font-bold ${getBinFullnessColor(\n                      currentBinFullness\n                    )}`}\n                  >\n                    {currentBinFullness}%\n                  </span>\n                  <Badge\n                    variant={\n                      currentBinFullness > 60\n                        ? \"destructive\"\n                        : currentBinFullness > 44\n                        ? \"outline\"\n                        : \"default\"\n                    }\n                  >\n                    {currentBinFullness > 60\n                      ? \"Full\"\n                      : currentBinFullness > 44\n                      ? \"Medium\"\n                      : \"Empty\"}\n                  </Badge>\n                </div>\n                <div className=\"flex justify-between items-center mt-2\">\n                  <p className=\"text-xs text-gray-500\">\n                    Last updated:{\" \"}\n                    {currentBinFullnessTimestamp\n                      ? new Date(currentBinFullnessTimestamp).toLocaleString()\n                      : \"Never\"}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    Threshold: {device?.thresholds?.binFullness || 44}%\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Current Bin Weight */}\n            <Card className=\"hover:shadow-md transition-shadow duration-200\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base font-medium flex items-center gap-2\">\n                  <Scale className=\"h-5 w-5 text-purple-500\" />\n                  Current Bin Weight\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-2xl font-bold\">\n                    {currentBinWeight} kg\n                  </span>\n                  <Badge\n                    variant={\n                      currentBinWeight > 5\n                        ? \"destructive\"\n                        : currentBinWeight > 3\n                        ? \"outline\"\n                        : \"default\"\n                    }\n                  >\n                    {currentBinWeight > 5\n                      ? \"Heavy\"\n                      : currentBinWeight > 3\n                      ? \"Medium\"\n                      : \"Light\"}\n                  </Badge>\n                </div>\n                <div className=\"flex justify-between items-center mt-2\">\n                  <p className=\"text-xs text-gray-500\">\n                    Last updated:{\" \"}\n                    {currentBinWeightTimestamp\n                      ? new Date(currentBinWeightTimestamp).toLocaleString()\n                      : \"Never\"}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    Threshold: {device?.thresholds?.wasteWeight || 5} kg\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            {/* Date Selection Card */}\n            <Card className=\"md:col-span-1\">\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <CalendarDays className=\"h-5 w-5 text-gray-500\" />\n                  Select Date\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-col space-y-4\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={selectedDate}\n                    onSelect={setSelectedDate}\n                    className=\"border rounded-md\"\n                    disabled={(date) =>\n                      date > new Date() || date < new Date(\"2024-01-01\")\n                    }\n                  />\n                  <div className=\"pt-2\">\n                    <p className=\"text-sm font-medium mb-2\">\n                      Selected: {formatDateForDisplay(selectedDate)}\n                    </p>\n                    <div className=\"flex flex-wrap gap-2\">\n                      <Button\n                        variant={historyRange === \"24h\" ? \"default\" : \"outline\"}\n                        onClick={() => setHistoryRange(\"24h\")}\n                        size=\"sm\"\n                        className=\"flex-1\"\n                      >\n                        24 Hours\n                      </Button>\n                      <Button\n                        variant={historyRange === \"7d\" ? \"default\" : \"outline\"}\n                        onClick={() => setHistoryRange(\"7d\")}\n                        size=\"sm\"\n                        className=\"flex-1\"\n                      >\n                        7 Days\n                      </Button>\n                      <Button\n                        variant={historyRange === \"30d\" ? \"default\" : \"outline\"}\n                        onClick={() => setHistoryRange(\"30d\")}\n                        size=\"sm\"\n                        className=\"flex-1\"\n                      >\n                        30 Days\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Readings History Card */}\n            <Card className=\"md:col-span-2\">\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <Clock className=\"h-5 w-5 text-gray-500\" />\n                  Sensor Readings History\n                </CardTitle>\n                <CardDescription>\n                  Historical data for {formatDateForDisplay(selectedDate)}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Tabs\n                  defaultValue=\"waterLevel\"\n                  value={activeTab}\n                  onValueChange={setActiveTab}\n                  className=\"w-full\"\n                >\n                  <TabsList className=\"mb-4 grid grid-cols-3 w-full\">\n                    <TabsTrigger\n                      value=\"waterLevel\"\n                      className=\"flex items-center gap-1\"\n                    >\n                      <Droplet className=\"h-4 w-4\" />\n                      <span className=\"hidden sm:inline\">Water Level</span>\n                      <span className=\"sm:hidden\">Water</span>\n                    </TabsTrigger>\n                    <TabsTrigger\n                      value=\"binFullness\"\n                      className=\"flex items-center gap-1\"\n                    >\n                      <Trash className=\"h-4 w-4\" />\n                      <span className=\"hidden sm:inline\">Bin Fullness</span>\n                      <span className=\"sm:hidden\">Fullness</span>\n                    </TabsTrigger>\n                    <TabsTrigger\n                      value=\"binWeight\"\n                      className=\"flex items-center gap-1\"\n                    >\n                      <Scale className=\"h-4 w-4\" />\n                      <span className=\"hidden sm:inline\">Bin Weight</span>\n                      <span className=\"sm:hidden\">Weight</span>\n                    </TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"waterLevel\">\n                    {readingHistory.waterLevels.length > 0 ? (\n                      <div className=\"overflow-x-auto\">\n                        <Table>\n                          <TableHeader>\n                            <TableRow>\n                              <TableHead>Time</TableHead>\n                              <TableHead>Level (%)</TableHead>\n                              <TableHead>Status</TableHead>\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {readingHistory.waterLevels.map((entry, index) => (\n                              <TableRow\n                                key={`water-${index}`}\n                                className=\"hover:bg-gray-50\"\n                              >\n                                <TableCell className=\"font-medium\">\n                                  {formatTimestamp(entry.timestamp)}\n                                </TableCell>\n                                <TableCell\n                                  className={getWaterLevelColor(entry.value)}\n                                >\n                                  {entry.value}%\n                                </TableCell>\n                                <TableCell>\n                                  <Badge\n                                    variant={\n                                      entry.value > 70\n                                        ? \"destructive\"\n                                        : entry.value > 30\n                                        ? \"outline\"\n                                        : \"default\"\n                                    }\n                                  >\n                                    {entry.value > 70\n                                      ? \"High\"\n                                      : entry.value > 30\n                                      ? \"Medium\"\n                                      : \"Low\"}\n                                  </Badge>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </div>\n                    ) : (\n                      <div className=\"py-8 text-center\">\n                        <AlertTriangle className=\"h-8 w-8 text-yellow-500 mx-auto mb-2\" />\n                        <p className=\"text-gray-500\">\n                          No water level readings available for the selected\n                          date.\n                        </p>\n                      </div>\n                    )}\n                  </TabsContent>\n\n                  <TabsContent value=\"binFullness\">\n                    {readingHistory.binFullness.length > 0 ? (\n                      <div className=\"overflow-x-auto\">\n                        <Table>\n                          <TableHeader>\n                            <TableRow>\n                              <TableHead>Time</TableHead>\n                              <TableHead>Fullness (%)</TableHead>\n                              <TableHead>Status</TableHead>\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {readingHistory.binFullness.map((entry, index) => (\n                              <TableRow\n                                key={`fullness-${index}`}\n                                className=\"hover:bg-gray-50\"\n                              >\n                                <TableCell className=\"font-medium\">\n                                  {formatTimestamp(entry.timestamp)}\n                                </TableCell>\n                                <TableCell\n                                  className={getBinFullnessColor(entry.value)}\n                                >\n                                  {entry.value}%\n                                </TableCell>\n                                <TableCell>\n                                  <Badge\n                                    variant={\n                                      entry.value > 70\n                                        ? \"destructive\"\n                                        : entry.value > 30\n                                        ? \"outline\"\n                                        : \"default\"\n                                    }\n                                  >\n                                    {entry.value > 70\n                                      ? \"Full\"\n                                      : entry.value > 30\n                                      ? \"Medium\"\n                                      : \"Empty\"}\n                                  </Badge>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </div>\n                    ) : (\n                      <div className=\"py-8 text-center\">\n                        <AlertTriangle className=\"h-8 w-8 text-yellow-500 mx-auto mb-2\" />\n                        <p className=\"text-gray-500\">\n                          No bin fullness readings available for the selected\n                          date.\n                        </p>\n                      </div>\n                    )}\n                  </TabsContent>\n\n                  <TabsContent value=\"binWeight\">\n                    {readingHistory.binWeight.length > 0 ? (\n                      <div className=\"overflow-x-auto\">\n                        <Table>\n                          <TableHeader>\n                            <TableRow>\n                              <TableHead>Time</TableHead>\n                              <TableHead>Weight (kg)</TableHead>\n                              <TableHead>Status</TableHead>\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {readingHistory.binWeight.map((entry, index) => (\n                              <TableRow\n                                key={`weight-${index}`}\n                                className=\"hover:bg-gray-50\"\n                              >\n                                <TableCell className=\"font-medium\">\n                                  {formatTimestamp(entry.timestamp)}\n                                </TableCell>\n                                <TableCell>{entry.value} kg</TableCell>\n                                <TableCell>\n                                  <Badge\n                                    variant={\n                                      entry.value > 10\n                                        ? \"destructive\"\n                                        : entry.value > 5\n                                        ? \"outline\"\n                                        : \"default\"\n                                    }\n                                  >\n                                    {entry.value > 10\n                                      ? \"Heavy\"\n                                      : entry.value > 5\n                                      ? \"Medium\"\n                                      : \"Light\"}\n                                  </Badge>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </div>\n                    ) : (\n                      <div className=\"py-8 text-center\">\n                        <AlertTriangle className=\"h-8 w-8 text-yellow-500 mx-auto mb-2\" />\n                        <p className=\"text-gray-500\">\n                          No bin weight readings available for the selected\n                          date.\n                        </p>\n                      </div>\n                    )}\n                  </TabsContent>\n\n                  {readingHistory.waterLevels.length === 0 &&\n                    readingHistory.binFullness.length === 0 &&\n                    readingHistory.binWeight.length === 0 && (\n                      <div className=\"border rounded-lg p-6 bg-gray-50 mt-4\">\n                        <div className=\"flex flex-col items-center text-center\">\n                          <Info className=\"h-10 w-10 text-blue-500 mb-2\" />\n                          <h3 className=\"text-lg font-semibold mb-1\">\n                            No Data Available\n                          </h3>\n                          <p className=\"text-gray-600 mb-4\">\n                            There are no sensor readings available for this\n                            device on the selected date.\n                          </p>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setSelectedDate(new Date())}\n                          >\n                            Try Today's Date\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                </Tabs>\n              </CardContent>\n            </Card>\n          </div>\n        </>\n      )}\n    </DashboardLayout>\n  );\n}\n","size_bytes":31319},"client/src/pages/devices.tsx":{"content":"import { useState, useEffect } from \"react\";\n// Activity window for device status (in ms)\nconst ACTIVE_WINDOW_MS = 60000;\nimport { ref, onValue, push, set, remove, get } from \"firebase/database\";\nimport { database } from \"@/lib/firebase\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n  DialogClose,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  AlertTriangle,\n  Plus,\n  Trash2,\n  Pencil,\n  Droplet,\n  Trash,\n  Scale,\n  CheckCircle2,\n  XCircle,\n  CalendarClock,\n  MapPin,\n  Clock,\n  Eye,\n  BarChart3,\n} from \"lucide-react\";\nimport { Device, WaterLevel, WasteBin } from \"@/types\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function Devices() {\n  const { user } = useAuth();\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [devices, setDevices] = useState<Device[]>([]);\n  const [waterLevels, setWaterLevels] = useState<Record<string, WaterLevel>>(\n    {}\n  );\n  const [wasteBins, setWasteBins] = useState<Record<string, WasteBin>>({});\n  const [loading, setLoading] = useState(true);\n  const [deviceId, setDeviceId] = useState(\"\");\n  const [deviceName, setDeviceName] = useState(\"\");\n  const [deviceLocation, setDeviceLocation] = useState(\"\");\n  const [selectedDevice, setSelectedDevice] = useState<Device | null>(null);\n  const [editMode, setEditMode] = useState(false);\n\n  // Threshold settings\n  const [waterLevelThreshold, setWaterLevelThreshold] = useState(80);\n  const [binFullnessThreshold, setBinFullnessThreshold] = useState(80);\n  const [wasteWeightThreshold, setWasteWeightThreshold] = useState(80);\n\n  // Notification settings\n  const [notificationsEnabled, setNotificationsEnabled] = useState(true);\n  const [notifyOnWaterLevel, setNotifyOnWaterLevel] = useState(true);\n  const [notifyOnBinFullness, setNotifyOnBinFullness] = useState(true);\n  const [notifyOnWeight, setNotifyOnWeight] = useState(true);\n  const [selectedContacts, setSelectedContacts] = useState<string[]>([]);\n  const [contacts, setContacts] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (!user) return;\n\n    const devicesRef = ref(database, `users/${user.uid}/devices`);\n    const waterLevelsRef = ref(database, `users/${user.uid}/waterLevels`);\n    const wasteBinsRef = ref(database, `users/${user.uid}/wasteBins`);\n    const contactsRef = ref(database, `users/${user.uid}/contacts`);\n\n    // Get all devices\n    const devicesUnsubscribe = onValue(devicesRef, async (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        // For each device, check if there is a new entry in waterLevelHistory or wasteBinHistory within 30 seconds\n        const now = Date.now();\n        const devicePromises = Object.entries(data).map(async ([id, value]) => {\n          const v: any = value;\n          let status = \"inactive\";\n\n          // Check for recent history\n          let hasRecentHistory = false;\n          try {\n            // Check waterLevelHistory\n            const waterLevelHistoryRef = ref(\n              database,\n              `users/${user.uid}/devices/${id}/waterLevelHistory`\n            );\n            const waterLevelHistorySnap = await get(waterLevelHistoryRef);\n            if (waterLevelHistorySnap.exists()) {\n              const waterLevelHistory = waterLevelHistorySnap.val();\n              for (const entry of Object.values(waterLevelHistory)) {\n                const e: any = entry;\n                if (e && e.timestamp) {\n                  const ts = new Date(e.timestamp).getTime();\n                  if (!isNaN(ts) && now - ts <= ACTIVE_WINDOW_MS) {\n                    hasRecentHistory = true;\n                    break;\n                  }\n                }\n              }\n            }\n            // If not found in water, check wasteBinHistory\n            if (!hasRecentHistory) {\n              const wasteBinHistoryRef = ref(\n                database,\n                `users/${user.uid}/devices/${id}/wasteBinHistory`\n              );\n              const wasteBinHistorySnap = await get(wasteBinHistoryRef);\n              if (wasteBinHistorySnap.exists()) {\n                const wasteBinHistory = wasteBinHistorySnap.val();\n                for (const entry of Object.values(wasteBinHistory)) {\n                  const e: any = entry;\n                  if (e && e.timestamp) {\n                    const ts = new Date(e.timestamp).getTime();\n                    if (!isNaN(ts) && now - ts <= ACTIVE_WINDOW_MS) {\n                      hasRecentHistory = true;\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          } catch (e) {\n            // ignore errors, fallback to inactive\n          }\n          if (hasRecentHistory) {\n            status = \"active\";\n          }\n          return {\n            id,\n            ...v,\n            status,\n          };\n        });\n        const deviceList = await Promise.all(devicePromises);\n        setDevices(deviceList);\n      } else {\n        setDevices([]);\n      }\n      setLoading(false);\n    });\n\n    // Get all water level data\n    const waterLevelsUnsubscribe = onValue(waterLevelsRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        setWaterLevels(data);\n      } else {\n        setWaterLevels({});\n      }\n    });\n\n    // Get all waste bin data\n    const wasteBinsUnsubscribe = onValue(wasteBinsRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        setWasteBins(data);\n      } else {\n        setWasteBins({});\n      }\n    });\n\n    // Get all contacts\n    const contactsUnsubscribe = onValue(contactsRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        const contactsList = Object.entries(data).map(([id, value]) => ({\n          id,\n          ...(value as any),\n        }));\n        setContacts(contactsList);\n      } else {\n        setContacts([]);\n      }\n    });\n\n    return () => {\n      devicesUnsubscribe();\n      waterLevelsUnsubscribe();\n      wasteBinsUnsubscribe();\n      contactsUnsubscribe();\n    };\n  }, [user]);\n\n  const handleAddDevice = async () => {\n    if (!user) return;\n\n    if (!deviceId.trim()) {\n      toast({\n        title: \"Device ID is required\",\n        description: \"Please enter a device ID\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // First, check if this device ID already exists in any container\n      const devicesRef = ref(database, `users/${user.uid}/devices`);\n      const devicesSnapshot = await get(devicesRef);\n\n      if (devicesSnapshot.exists()) {\n        const devicesData = devicesSnapshot.val();\n\n        // Check if this device ID already exists\n        let deviceExists = false;\n        Object.entries(devicesData).forEach(([_, value]: [string, any]) => {\n          if (value.id === deviceId.trim()) {\n            deviceExists = true;\n          }\n        });\n\n        if (deviceExists) {\n          toast({\n            title: \"Device ID already exists\",\n            description:\n              \"A device with this ID already exists in your account.\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n      }\n\n      // Create a new device with complete information\n      const newDevice = {\n        id: deviceId.trim(), // Add explicit ID field\n        name: deviceName.trim() || deviceId.trim(),\n        location: deviceLocation.trim() || \"Unknown\",\n        status: \"inactive\",\n        lastSeen: new Date().toISOString(),\n        thresholds: {\n          waterLevel: waterLevelThreshold,\n          binFullness: binFullnessThreshold,\n          wasteWeight: wasteWeightThreshold,\n        },\n        notifications: {\n          enabled: notificationsEnabled,\n          notifyOnWaterLevel,\n          notifyOnBinFullness,\n          notifyOnWeight,\n          notifyContacts: selectedContacts,\n        },\n      };\n\n      // Create the device entry\n      const newDeviceRef = push(devicesRef);\n      const containerKey = newDeviceRef.key;\n      await set(newDeviceRef, newDevice);\n\n      // Create water level sensor data entry\n      const waterRef = ref(\n        database,\n        `users/${user.uid}/waterLevels/${containerKey}`\n      );\n      await set(waterRef, {\n        id: deviceId.trim(),\n        location: deviceLocation.trim() || \"Unknown\",\n        level: 0,\n        lastUpdated: \"Never\",\n      });\n\n      // Create waste bin sensor data entry\n      const wasteRef = ref(\n        database,\n        `users/${user.uid}/wasteBins/${containerKey}`\n      );\n      await set(wasteRef, {\n        id: deviceId.trim(),\n        location: deviceLocation.trim() || \"Unknown\",\n        fullness: 0,\n        weight: 0,\n        lastEmptied: \"Never\",\n      });\n\n      toast({\n        title: \"Device Added\",\n        description: \"Your device has been added successfully\",\n      });\n\n      // Reset form\n      resetForm();\n    } catch (error) {\n      console.error(\"Error adding device:\", error);\n      toast({\n        title: \"Error Adding Device\",\n        description: \"There was an error adding your device. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleEditDevice = async (device: Device) => {\n    if (!user) return;\n\n    setSelectedDevice(device);\n    setDeviceName(device.name);\n    setDeviceLocation(device.location);\n\n    // Set threshold values\n    setWaterLevelThreshold(device.thresholds?.waterLevel || 80);\n    setBinFullnessThreshold(device.thresholds?.binFullness || 80);\n    setWasteWeightThreshold(device.thresholds?.wasteWeight || 80);\n\n    // Set notification values\n    setNotificationsEnabled(device.notifications?.enabled || true);\n    setNotifyOnWaterLevel(device.notifications?.notifyOnWaterLevel || true);\n    setNotifyOnBinFullness(device.notifications?.notifyOnBinFullness || true);\n    setNotifyOnWeight(device.notifications?.notifyOnWeight || true);\n    setSelectedContacts(device.notifications?.notifyContacts || []);\n\n    setEditMode(true);\n  };\n\n  const handleUpdateDevice = async () => {\n    if (!user || !selectedDevice) return;\n\n    try {\n      const updatedDevice = {\n        ...selectedDevice,\n        name: deviceName.trim() || selectedDevice.name,\n        location: deviceLocation.trim() || selectedDevice.location,\n        thresholds: {\n          waterLevel: waterLevelThreshold,\n          binFullness: binFullnessThreshold,\n          wasteWeight: wasteWeightThreshold,\n        },\n        notifications: {\n          enabled: notificationsEnabled,\n          notifyOnWaterLevel,\n          notifyOnBinFullness,\n          notifyOnWeight,\n          notifyContacts: selectedContacts,\n        },\n      };\n\n      // Fix the path for updating device data\n      // We need to use the correct location in the Firebase database\n      // Looking at the screenshot, it seems the path should be \"users/{uid}/devices/device1\"\n      // where device1 is the actual container for the device data\n\n      // First, get the correct path by finding the container key\n      const devicesRef = ref(database, `users/${user.uid}/devices`);\n      const devicesSnapshot = await get(devicesRef);\n\n      if (devicesSnapshot.exists()) {\n        const devicesData = devicesSnapshot.val();\n        // Find the container key (like \"device1\") that contains our device\n        let containerKey = null;\n\n        Object.entries(devicesData).forEach(([key, value]: [string, any]) => {\n          if (value.id === selectedDevice.id) {\n            containerKey = key;\n          }\n        });\n\n        if (containerKey) {\n          // Update the device with the correct path\n          const deviceRef = ref(\n            database,\n            `users/${user.uid}/devices/${containerKey}`\n          );\n          await set(deviceRef, updatedDevice);\n\n          // Update associated water level location if changed\n          if (deviceLocation !== selectedDevice.location) {\n            const waterRef = ref(\n              database,\n              `users/${user.uid}/waterLevels/${containerKey}`\n            );\n            const waterSnapshot = await get(waterRef);\n            if (waterSnapshot.exists()) {\n              const waterData = waterSnapshot.val();\n              await set(waterRef, {\n                ...waterData,\n                location: deviceLocation.trim() || selectedDevice.location,\n              });\n            }\n\n            // Update associated waste bin location\n            const wasteRef = ref(\n              database,\n              `users/${user.uid}/wasteBins/${containerKey}`\n            );\n            const wasteSnapshot = await get(wasteRef);\n            if (wasteSnapshot.exists()) {\n              const wasteData = wasteSnapshot.val();\n              await set(wasteRef, {\n                ...wasteData,\n                location: deviceLocation.trim() || selectedDevice.location,\n              });\n            }\n          }\n        } else {\n          throw new Error(\"Device container not found\");\n        }\n      }\n\n      toast({\n        title: \"Device Updated\",\n        description: \"Your device has been updated successfully\",\n      });\n\n      // Reset form and close dialog\n      resetForm();\n    } catch (error) {\n      toast({\n        title: \"Error Updating Device\",\n        description:\n          \"There was an error updating your device. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRemoveDevice = async (deviceId: string) => {\n    if (!user) return;\n\n    try {\n      // If this is a row with no ID, it could be one of the problematic entries\n      if (!deviceId) {\n        // First, let's remove the entry from the table visually\n        setDevices((prev) => prev.filter((d) => d.id !== deviceId));\n\n        // Then search for devices without IDs in Firebase\n        const devicesRef = ref(database, `users/${user.uid}/devices`);\n        const devicesSnapshot = await get(devicesRef);\n\n        if (devicesSnapshot.exists()) {\n          const devicesData = devicesSnapshot.val();\n\n          // Find any devices that don't have an ID or have empty/null properties\n          for (const [key, value] of Object.entries(devicesData)) {\n            const deviceData = value as any;\n            // Check if this is a problematic entry (missing ID or mostly empty)\n            if (\n              !deviceData.id ||\n              (Object.keys(deviceData).length <= 2 &&\n                (deviceData.hasOwnProperty(\"status\") ||\n                  deviceData.hasOwnProperty(\"lastSeen\")))\n            ) {\n              // Remove this device entry\n              const blankDeviceRef = ref(\n                database,\n                `users/${user.uid}/devices/${key}`\n              );\n              await remove(blankDeviceRef);\n\n              // Also check and remove any corresponding blank entries in waterLevels\n              const waterRef = ref(\n                database,\n                `users/${user.uid}/waterLevels/${key}`\n              );\n              const waterSnapshot = await get(waterRef);\n              if (waterSnapshot.exists()) {\n                await remove(waterRef);\n              }\n\n              // And check wasteBins\n              const wasteRef = ref(\n                database,\n                `users/${user.uid}/wasteBins/${key}`\n              );\n              const wasteSnapshot = await get(wasteRef);\n              if (wasteSnapshot.exists()) {\n                await remove(wasteRef);\n              }\n\n              // Check for water level history\n              const waterHistoryRef = ref(\n                database,\n                `users/${user.uid}/waterLevelHistory`\n              );\n              const waterHistorySnapshot = await get(waterHistoryRef);\n              if (waterHistorySnapshot.exists()) {\n                const waterHistoryData = waterHistorySnapshot.val();\n\n                // Look through each date entry\n                for (const [date, dateData] of Object.entries(\n                  waterHistoryData\n                )) {\n                  if (\n                    dateData &&\n                    typeof dateData === \"object\" &&\n                    dateData.hasOwnProperty(key)\n                  ) {\n                    // Remove just this device's history for this date\n                    const specificHistoryRef = ref(\n                      database,\n                      `users/${user.uid}/waterLevelHistory/${date}/${key}`\n                    );\n                    await remove(specificHistoryRef);\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        toast({\n          title: \"Blank Device Removed\",\n          description: \"The blank device entry has been removed successfully\",\n        });\n        return;\n      }\n\n      // For regular devices with IDs, proceed normally\n      // First, find the container key for this device ID\n      const devicesRef = ref(database, `users/${user.uid}/devices`);\n      const devicesSnapshot = await get(devicesRef);\n\n      if (!devicesSnapshot.exists()) {\n        toast({\n          title: \"No devices found\",\n          description: \"No devices found in your account.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Find the device container key\n      const devicesData = devicesSnapshot.val();\n      let containerKey = null;\n\n      // Loop through devices to find the one with matching ID\n      Object.entries(devicesData).forEach(([key, value]: [string, any]) => {\n        if (value && value.id === deviceId) {\n          containerKey = key;\n        }\n      });\n\n      if (!containerKey) {\n        // If we didn't find by ID, check if the device container key itself matches\n        if (devicesData.hasOwnProperty(deviceId)) {\n          containerKey = deviceId;\n        } else {\n          toast({\n            title: \"Device not found\",\n            description: \"The device could not be found in your account.\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n      }\n\n      // Remove device using the correct container key\n      const deviceRef = ref(\n        database,\n        `users/${user.uid}/devices/${containerKey}`\n      );\n      await remove(deviceRef);\n\n      // Remove associated water level data\n      const waterRef = ref(\n        database,\n        `users/${user.uid}/waterLevels/${containerKey}`\n      );\n      const waterSnapshot = await get(waterRef);\n      if (waterSnapshot.exists()) {\n        await remove(waterRef);\n      }\n\n      // Remove associated waste bin data\n      const wasteRef = ref(\n        database,\n        `users/${user.uid}/wasteBins/${containerKey}`\n      );\n      const wasteSnapshot = await get(wasteRef);\n      if (wasteSnapshot.exists()) {\n        await remove(wasteRef);\n      }\n\n      // Clean up water level history for this device\n      const waterHistoryRef = ref(\n        database,\n        `users/${user.uid}/waterLevelHistory`\n      );\n      const waterHistorySnapshot = await get(waterHistoryRef);\n      if (waterHistorySnapshot.exists()) {\n        const waterHistoryData = waterHistorySnapshot.val();\n\n        // Look through each date entry\n        for (const [date, dateData] of Object.entries(waterHistoryData)) {\n          if (\n            dateData &&\n            typeof dateData === \"object\" &&\n            (dateData.hasOwnProperty(containerKey) ||\n              dateData.hasOwnProperty(deviceId))\n          ) {\n            // Remove history for both container key and device ID to be thorough\n            const specificHistoryRef1 = ref(\n              database,\n              `users/${user.uid}/waterLevelHistory/${date}/${containerKey}`\n            );\n            const specificHistoryRef2 = ref(\n              database,\n              `users/${user.uid}/waterLevelHistory/${date}/${deviceId}`\n            );\n            await remove(specificHistoryRef1);\n            await remove(specificHistoryRef2);\n          }\n        }\n      }\n\n      toast({\n        title: \"Device Removed\",\n        description:\n          \"Your device has been removed successfully and all associated data cleaned up\",\n      });\n    } catch (error) {\n      console.error(\"Error removing device:\", error);\n      toast({\n        title: \"Error Removing Device\",\n        description:\n          \"There was an error removing your device. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Helper function to reset form fields\n  const resetForm = () => {\n    setDeviceId(\"\");\n    setDeviceName(\"\");\n    setDeviceLocation(\"\");\n    setSelectedDevice(null);\n    setEditMode(false);\n    setWaterLevelThreshold(80);\n    setBinFullnessThreshold(80);\n    setWasteWeightThreshold(80);\n    setNotificationsEnabled(true);\n    setNotifyOnWaterLevel(true);\n    setNotifyOnBinFullness(true);\n    setNotifyOnWeight(true);\n    setSelectedContacts([]);\n  };\n\n  // Helper function to get water level status color\n  const getWaterLevelColor = (level: number): string => {\n    if (level > 85) return \"text-destructive\";\n    if (level > 65) return \"text-warning\";\n    return \"text-success\";\n  };\n\n  // Helper function to get bin fullness color\n  const getBinFullnessColor = (fullness: number): string => {\n    if (fullness > 85) return \"text-destructive\";\n    if (fullness > 60) return \"text-warning\";\n    return \"text-success\";\n  };\n\n  // Helper function to get bin weight color\n  const getBinWeightColor = (weight: number): string => {\n    if (weight > 85) return \"text-destructive\";\n    if (weight > 60) return \"text-warning\";\n    return \"text-success\";\n  };\n\n  // Calculate active status based on recent data updates (last 1 minute)\n  const oneMinuteAgo = new Date();\n  oneMinuteAgo.setTime(oneMinuteAgo.getTime() - ACTIVE_WINDOW_MS);\n\n  return (\n    <DashboardLayout\n      title=\"Devices\"\n      subtitle=\"Manage your connected DrainSentry devices\"\n    >\n      {/* Edit Device Settings Dialog */}\n      {editMode && selectedDevice && (\n        <Dialog open={editMode} onOpenChange={(open) => !open && resetForm()}>\n          <DialogContent className=\"max-w-3xl\">\n            <DialogHeader>\n              <DialogTitle>Configure Device Settings</DialogTitle>\n              <DialogDescription>\n                Customize notification preferences and thresholds for{\" \"}\n                {selectedDevice.name}\n              </DialogDescription>\n            </DialogHeader>\n\n            <Tabs defaultValue=\"thresholds\" className=\"mt-4\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"thresholds\">Alert Thresholds</TabsTrigger>\n                <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"thresholds\" className=\"mt-4\">\n                <div className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <Label>\n                        Water Level Threshold ({waterLevelThreshold}%)\n                      </Label>\n                      <span className={getWaterLevelColor(waterLevelThreshold)}>\n                        {waterLevelThreshold > 85\n                          ? \"Critical\"\n                          : waterLevelThreshold > 65\n                          ? \"Warning\"\n                          : \"Normal\"}\n                      </span>\n                    </div>\n                    <Slider\n                      defaultValue={[\n                        selectedDevice.thresholds?.waterLevel || 80,\n                      ]}\n                      max={100}\n                      step={1}\n                      onValueChange={(value) =>\n                        setWaterLevelThreshold(value[0])\n                      }\n                    />\n                    <p className=\"text-sm text-muted-foreground\">\n                      Alert when water level exceeds this percentage of capacity\n                    </p>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <Label>\n                        Bin Fullness Threshold ({binFullnessThreshold}%)\n                      </Label>\n                      <span\n                        className={getBinFullnessColor(binFullnessThreshold)}\n                      >\n                        {binFullnessThreshold > 85\n                          ? \"Critical\"\n                          : binFullnessThreshold > 65\n                          ? \"Warning\"\n                          : \"Normal\"}\n                      </span>\n                    </div>\n                    <Slider\n                      defaultValue={[\n                        selectedDevice.thresholds?.binFullness || 80,\n                      ]}\n                      max={100}\n                      step={1}\n                      onValueChange={(value) =>\n                        setBinFullnessThreshold(value[0])\n                      }\n                    />\n                    <p className=\"text-sm text-muted-foreground\">\n                      Alert when bin fullness exceeds this percentage\n                    </p>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <Label>\n                        Waste Weight Threshold ({wasteWeightThreshold} kg)\n                      </Label>\n                      <span className={getBinWeightColor(wasteWeightThreshold)}>\n                        {wasteWeightThreshold > 85\n                          ? \"Critical\"\n                          : wasteWeightThreshold > 65\n                          ? \"Warning\"\n                          : \"Normal\"}\n                      </span>\n                    </div>\n                    <Slider\n                      defaultValue={[\n                        selectedDevice.thresholds?.wasteWeight || 80,\n                      ]}\n                      max={100}\n                      step={1}\n                      onValueChange={(value) =>\n                        setWasteWeightThreshold(value[0])\n                      }\n                    />\n                    <p className=\"text-sm text-muted-foreground\">\n                      Alert when waste weight exceeds this many kilograms\n                    </p>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"notifications\" className=\"mt-4\">\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label htmlFor=\"notifications\">\n                        Enable Notifications\n                      </Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Receive alerts when thresholds are exceeded\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"notifications\"\n                      checked={notificationsEnabled}\n                      onCheckedChange={(checked) =>\n                        setNotificationsEnabled(checked)\n                      }\n                    />\n                  </div>\n\n                  <div className=\"border-t pt-4\">\n                    <h3 className=\"text-base font-medium mb-3\">Alert Types</h3>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <Checkbox\n                          id=\"water-level-alerts\"\n                          checked={notifyOnWaterLevel}\n                          onCheckedChange={(checked) =>\n                            setNotifyOnWaterLevel(!!checked)\n                          }\n                        />\n                        <Label\n                          htmlFor=\"water-level-alerts\"\n                          className=\"cursor-pointer\"\n                        >\n                          Water Level Alerts\n                        </Label>\n                      </div>\n\n                      <div className=\"flex items-center gap-2\">\n                        <Checkbox\n                          id=\"bin-fullness-alerts\"\n                          checked={notifyOnBinFullness}\n                          onCheckedChange={(checked) =>\n                            setNotifyOnBinFullness(!!checked)\n                          }\n                        />\n                        <Label\n                          htmlFor=\"bin-fullness-alerts\"\n                          className=\"cursor-pointer\"\n                        >\n                          Bin Fullness Alerts\n                        </Label>\n                      </div>\n\n                      <div className=\"flex items-center gap-2\">\n                        <Checkbox\n                          id=\"weight-alerts\"\n                          checked={notifyOnWeight}\n                          onCheckedChange={(checked) =>\n                            setNotifyOnWeight(!!checked)\n                          }\n                        />\n                        <Label\n                          htmlFor=\"weight-alerts\"\n                          className=\"cursor-pointer\"\n                        >\n                          Weight Alerts\n                        </Label>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"border-t pt-4\">\n                    <h3 className=\"text-base font-medium mb-3\">\n                      Notify Contacts\n                    </h3>\n                    <div className=\"space-y-3\">\n                      {contacts.length === 0 ? (\n                        <p className=\"text-sm text-muted-foreground\">\n                          No contacts found. Add contacts in the Contacts page.\n                        </p>\n                      ) : (\n                        contacts.map((contact) => (\n                          <div\n                            key={contact.id}\n                            className=\"flex items-center gap-2\"\n                          >\n                            <Checkbox\n                              id={`contact-${contact.id}`}\n                              checked={selectedContacts.includes(contact.id)}\n                              onCheckedChange={(checked) => {\n                                if (checked) {\n                                  setSelectedContacts([\n                                    ...selectedContacts,\n                                    contact.id,\n                                  ]);\n                                } else {\n                                  setSelectedContacts(\n                                    selectedContacts.filter(\n                                      (id) => id !== contact.id\n                                    )\n                                  );\n                                }\n                              }}\n                            />\n                            <Label\n                              htmlFor={`contact-${contact.id}`}\n                              className=\"cursor-pointer\"\n                            >\n                              {contact.name} ({contact.phone})\n                            </Label>\n                          </div>\n                        ))\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            <DialogFooter className=\"mt-6\">\n              <Button variant=\"outline\" onClick={resetForm}>\n                Cancel\n              </Button>\n              <Button onClick={handleUpdateDevice}>Save Settings</Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      )}\n      <div className=\"mb-6 flex justify-between items-center\">\n        <h2 className=\"text-lg font-medium text-gray-800\">Connected Devices</h2>\n\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-5 w-5 mr-2\" />\n              Add New Device\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add New Device</DialogTitle>\n              <DialogDescription>\n                Enter the device details to connect it to your DrainSentry\n                system.\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"deviceId\">Device ID</Label>\n                <Input\n                  id=\"deviceId\"\n                  value={deviceId}\n                  onChange={(e) => setDeviceId(e.target.value)}\n                  placeholder=\"Enter device ID (required)\"\n                />\n              </div>\n\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"deviceName\">Device Name (Optional)</Label>\n                <Input\n                  id=\"deviceName\"\n                  value={deviceName}\n                  onChange={(e) => setDeviceName(e.target.value)}\n                  placeholder=\"Enter a friendly name for this device\"\n                />\n              </div>\n\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"deviceLocation\">Location</Label>\n                <Input\n                  id=\"deviceLocation\"\n                  value={deviceLocation}\n                  onChange={(e) => setDeviceLocation(e.target.value)}\n                  placeholder=\"Enter the device location\"\n                />\n              </div>\n            </div>\n\n            <DialogFooter>\n              <DialogClose asChild>\n                <Button variant=\"outline\">Cancel</Button>\n              </DialogClose>\n              <DialogClose asChild>\n                <Button onClick={handleAddDevice}>Add Device</Button>\n              </DialogClose>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {devices.length === 0 && !loading ? (\n        <div className=\"bg-white rounded-lg shadow-sm p-8 mb-6 flex flex-col items-center justify-center\">\n          <div className=\"w-12 h-12 rounded-full bg-yellow-100 flex items-center justify-center mb-4\">\n            <AlertTriangle className=\"h-6 w-6 text-warning\" />\n          </div>\n          <h3 className=\"text-lg font-medium text-gray-800 mb-2\">\n            No devices found\n          </h3>\n          <p className=\"text-gray-500 text-center mb-6\">\n            There are no devices connected to your account.\n          </p>\n\n          <Dialog>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"h-5 w-5 mr-2\" />\n                Add Your First Device\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Add New Device</DialogTitle>\n                <DialogDescription>\n                  Enter the device details to connect it to your DrainSentry\n                  system.\n                </DialogDescription>\n              </DialogHeader>\n\n              <div className=\"grid gap-4 py-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"deviceId\">Device ID</Label>\n                  <Input\n                    id=\"deviceId\"\n                    value={deviceId}\n                    onChange={(e) => setDeviceId(e.target.value)}\n                    placeholder=\"Enter device ID (required)\"\n                  />\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"deviceName\">Device Name (Optional)</Label>\n                  <Input\n                    id=\"deviceName\"\n                    value={deviceName}\n                    onChange={(e) => setDeviceName(e.target.value)}\n                    placeholder=\"Enter a friendly name for this device\"\n                  />\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"deviceLocation\">Location</Label>\n                  <Input\n                    id=\"deviceLocation\"\n                    value={deviceLocation}\n                    onChange={(e) => setDeviceLocation(e.target.value)}\n                    placeholder=\"Enter the device location\"\n                  />\n                </div>\n              </div>\n\n              <DialogFooter>\n                <DialogClose asChild>\n                  <Button variant=\"outline\">Cancel</Button>\n                </DialogClose>\n                <DialogClose asChild>\n                  <Button onClick={handleAddDevice}>Add Device</Button>\n                </DialogClose>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n      ) : (\n        <Card>\n          <CardContent className=\"p-0\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Device</TableHead>\n                  <TableHead>Device ID</TableHead>\n                  <TableHead>Location</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>\n                    <div className=\"flex flex-col\">\n                      <span>Water Level</span>\n                      <span className=\"text-xs text-gray-500\">(Threshold)</span>\n                    </div>\n                  </TableHead>\n                  <TableHead>\n                    <div className=\"flex flex-col\">\n                      <span>Bin Fullness</span>\n                      <span className=\"text-xs text-gray-500\">(Threshold)</span>\n                    </div>\n                  </TableHead>\n                  <TableHead>\n                    <div className=\"flex flex-col\">\n                      <span>Weight</span>\n                      <span className=\"text-xs text-gray-500\">(Threshold)</span>\n                    </div>\n                  </TableHead>\n                  <TableHead>Last Updated</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {devices.map((device) => {\n                  const waterLevel = waterLevels[device.id];\n                  const wasteBin = wasteBins[device.id];\n\n                  // Check if device is active (updated in the last 5 minutes)\n                  const lastUpdatedWater = waterLevel?.lastUpdated\n                    ? new Date(waterLevel.lastUpdated)\n                    : null;\n                  const lastEmptiedBin = wasteBin?.lastEmptied\n                    ? new Date(wasteBin.lastEmptied)\n                    : null;\n\n                  // Device is active if any sensor has been updated in the last 5 minutes\n                  const isActive =\n                    (lastUpdatedWater && lastUpdatedWater >= oneMinuteAgo) ||\n                    (lastEmptiedBin && lastEmptiedBin >= oneMinuteAgo);\n\n                  // Get last updated time\n                  const lastUpdated =\n                    lastUpdatedWater && lastEmptiedBin\n                      ? new Date(\n                          Math.max(\n                            lastUpdatedWater.getTime(),\n                            lastEmptiedBin.getTime()\n                          )\n                        ).toLocaleString()\n                      : lastUpdatedWater\n                      ? new Date(lastUpdatedWater).toLocaleString()\n                      : lastEmptiedBin\n                      ? new Date(lastEmptiedBin).toLocaleString()\n                      : \"Never\";\n\n                  return (\n                    <TableRow\n                      key={device.id}\n                      className=\"transition-colors duration-200 hover:bg-gray-50 hover:shadow-sm\"\n                    >\n                      <TableCell className=\"font-medium\">\n                        <div className=\"flex items-center gap-2\">\n                          <div\n                            className={`w-2 h-2 rounded-full ${\n                              isActive\n                                ? \"bg-green-500 pulse-animation\"\n                                : \"bg-gray-300\"\n                            }`}\n                          ></div>\n                          <span className=\"hover:text-primary transition-colors duration-200\">\n                            {device.name}\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-xs px-2 py-1 bg-gray-100 rounded inline-block font-mono\">\n                          {device.id}\n                        </div>\n                      </TableCell>\n                      <TableCell>{device.location}</TableCell>\n                      <TableCell>\n                        <Badge\n                          variant={isActive ? \"default\" : \"outline\"}\n                          className={\n                            isActive ? \"\" : \"bg-gray-100 text-gray-500\"\n                          }\n                        >\n                          {isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-col\">\n                          <div\n                            className={getWaterLevelColor(\n                              waterLevel?.level || 0\n                            )}\n                          >\n                            {waterLevel?.level || 0}%\n                          </div>\n                          <span className=\"text-xs text-gray-500 mt-1\">\n                            Threshold: {device.thresholds?.waterLevel || 80}%\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-col\">\n                          <div\n                            className={getBinFullnessColor(\n                              wasteBin?.fullness || 0\n                            )}\n                          >\n                            {wasteBin?.fullness || 0}%\n                          </div>\n                          <span className=\"text-xs text-gray-500 mt-1\">\n                            Threshold: {device.thresholds?.binFullness || 80}%\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-col\">\n                          <div>{wasteBin?.weight || 0} kg</div>\n                          <span className=\"text-xs text-gray-500 mt-1\">\n                            Threshold: {device.thresholds?.wasteWeight || 80} kg\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-xs text-gray-500\">\n                        {lastUpdated}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-green-500 hover:bg-green-50 transition-colors duration-200\"\n                            onClick={() =>\n                              setLocation(`/device-history/${device.id}`)\n                            }\n                            title=\"View History\"\n                          >\n                            <BarChart3 className=\"h-4 w-4 hover:scale-110 transition-transform duration-200\" />\n                          </Button>\n\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"hover:bg-blue-50 transition-colors duration-200\"\n                            onClick={() =>\n                              setLocation(\n                                `/water-level-details?id=${device.id}`\n                              )\n                            }\n                            title=\"View Details\"\n                          >\n                            <Eye className=\"h-4 w-4 hover:scale-110 transition-transform duration-200\" />\n                          </Button>\n\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-blue-500 hover:bg-blue-50 transition-colors duration-200\"\n                            onClick={() => handleEditDevice(device)}\n                          >\n                            <Pencil className=\"h-4 w-4 hover:scale-110 transition-transform duration-200\" />\n                          </Button>\n\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"text-red-500 hover:bg-red-50 transition-colors duration-200\"\n                              >\n                                <Trash2 className=\"h-4 w-4 hover:scale-110 transition-transform duration-200\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Remove Device</DialogTitle>\n                                <DialogDescription>\n                                  Are you sure you want to remove {device.name}?\n                                  This action cannot be undone.\n                                </DialogDescription>\n                              </DialogHeader>\n                              <DialogFooter>\n                                <DialogClose asChild>\n                                  <Button variant=\"outline\">Cancel</Button>\n                                </DialogClose>\n                                <DialogClose asChild>\n                                  <Button\n                                    variant=\"destructive\"\n                                    onClick={() =>\n                                      handleRemoveDevice(device.id)\n                                    }\n                                  >\n                                    Remove\n                                  </Button>\n                                </DialogClose>\n                              </DialogFooter>\n                            </DialogContent>\n                          </Dialog>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      )}\n    </DashboardLayout>\n  );\n}\n","size_bytes":47719},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { \n  GoogleAuthProvider, \n  signInWithPopup, \n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword \n} from \"firebase/auth\";\nimport { auth, database } from \"@/lib/firebase\";\nimport { ref, set } from \"firebase/database\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Login() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n\n  if (user) {\n    navigate(\"/\");\n    return null;\n  }\n\n  const handleGoogleSignIn = async () => {\n    setIsLoading(true);\n    \n    try {\n      const provider = new GoogleAuthProvider();\n      await signInWithPopup(auth, provider);\n      toast({\n        title: \"Sign in successful\",\n        description: \"Welcome to DrainSentry monitoring system!\",\n      });\n      navigate(\"/\");\n    } catch (error: any) {\n      console.error(\"Login error:\", error);\n      toast({\n        title: \"Sign in failed\",\n        description: error.message || \"There was an error signing in with Google\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignIn = async () => {\n    if (!email || !password) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please enter both email and password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n      toast({\n        title: \"Sign in successful\",\n        description: \"Welcome to DrainSentry monitoring system!\",\n      });\n      navigate(\"/\");\n    } catch (error: any) {\n      console.error(\"Login error:\", error);\n      toast({\n        title: \"Sign in failed\",\n        description: error.message || \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignUp = async () => {\n    if (!email || !password) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please enter both email and password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (password !== confirmPassword) {\n      toast({\n        title: \"Passwords do not match\",\n        description: \"Please make sure your passwords match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (password.length < 6) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password should be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      \n      // Get the new user's ID\n      const userId = userCredential.user.uid;\n      \n      // Initialize only basic user settings in Firebase (no default devices or data)\n      const settingsRef = ref(database, `users/${userId}/settings`);\n      await set(settingsRef, {\n        system: {\n          name: \"DrainSentry\",\n          dataRefreshInterval: \"30\",\n          dataRetentionPeriod: \"6\",\n        },\n        regional: {\n          timeZone: \"UTC-8\",\n        },\n        thresholds: {\n          waterLevel: 75,\n          binFullness: 80,\n          wasteWeight: 50,\n        },\n        notifications: {\n          smsEnabled: true,\n          emailEnabled: false,\n          emailAddress: email,\n        }\n      });\n      \n      toast({\n        title: \"Account created successfully\",\n        description: \"Welcome to DrainSentry monitoring system!\",\n      });\n      navigate(\"/\");\n    } catch (error: any) {\n      console.error(\"Signup error:\", error);\n      toast({\n        title: \"Sign up failed\",\n        description: error.message || \"There was an error creating your account\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-[#F5F7FA] p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl\">\n            <span className=\"text-primary\">Drain</span>\n            <span className=\"text-secondary\">Sentry</span>\n          </CardTitle>\n          <CardDescription>Sewer Monitoring System</CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <Tabs defaultValue=\"signin\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n              <TabsTrigger value=\"signin\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"signup\">Sign Up</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"signin\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input \n                    id=\"email\" \n                    type=\"email\" \n                    placeholder=\"you@example.com\" \n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Input \n                    id=\"password\" \n                    type=\"password\" \n                    placeholder=\"••••••••\" \n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                  />\n                </div>\n                \n                <Button \n                  className=\"w-full\" \n                  disabled={isLoading}\n                  onClick={handleSignIn}\n                >\n                  {isLoading ? \"Signing in...\" : \"Sign In\"}\n                </Button>\n              </div>\n              \n              <div className=\"relative my-6\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t border-gray-300\"></div>\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"px-2 bg-white text-gray-500\">Or continue with</span>\n                </div>\n              </div>\n              \n              <Button \n                variant=\"outline\" \n                className=\"w-full flex items-center justify-center gap-2\"\n                disabled={isLoading}\n                onClick={handleGoogleSignIn}\n              >\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\">\n                  <path\n                    d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                    fill=\"#4285F4\"\n                  />\n                  <path\n                    d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                    fill=\"#34A853\"\n                  />\n                  <path\n                    d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                    fill=\"#FBBC05\"\n                  />\n                  <path\n                    d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                    fill=\"#EA4335\"\n                  />\n                  <path d=\"M1 1h22v22H1z\" fill=\"none\" />\n                </svg>\n                Google\n              </Button>\n            </TabsContent>\n            \n            <TabsContent value=\"signup\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-email\">Email</Label>\n                  <Input \n                    id=\"signup-email\" \n                    type=\"email\" \n                    placeholder=\"you@example.com\" \n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-password\">Password</Label>\n                  <Input \n                    id=\"signup-password\" \n                    type=\"password\" \n                    placeholder=\"••••••••\" \n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                  />\n                  <p className=\"text-xs text-gray-500\">Password must be at least 6 characters long</p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n                  <Input \n                    id=\"confirm-password\" \n                    type=\"password\" \n                    placeholder=\"••••••••\" \n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                  />\n                </div>\n                \n                <Button \n                  className=\"w-full\" \n                  disabled={isLoading}\n                  onClick={handleSignUp}\n                >\n                  {isLoading ? \"Creating Account...\" : \"Create Account\"}\n                </Button>\n              </div>\n              \n              <div className=\"relative my-6\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t border-gray-300\"></div>\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"px-2 bg-white text-gray-500\">Or continue with</span>\n                </div>\n              </div>\n              \n              <Button \n                variant=\"outline\" \n                className=\"w-full flex items-center justify-center gap-2\"\n                disabled={isLoading}\n                onClick={handleGoogleSignIn}\n              >\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\">\n                  <path\n                    d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                    fill=\"#4285F4\"\n                  />\n                  <path\n                    d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                    fill=\"#34A853\"\n                  />\n                  <path\n                    d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                    fill=\"#FBBC05\"\n                  />\n                  <path\n                    d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                    fill=\"#EA4335\"\n                  />\n                  <path d=\"M1 1h22v22H1z\" fill=\"none\" />\n                </svg>\n                Google\n              </Button>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11992},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { updatePassword } from \"firebase/auth\";\nimport { auth } from \"@/lib/firebase\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { NotificationSettings } from \"@/components/ui/notification-settings\";\nimport { Eye, EyeOff } from \"lucide-react\";\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isChangingPassword, setIsChangingPassword] = useState(false);\n\n  const handlePasswordChange = async () => {\n    if (!user) return;\n    \n    // Validate inputs\n    if (!currentPassword || !newPassword || !confirmPassword) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please fill in all password fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (newPassword !== confirmPassword) {\n      toast({\n        title: \"Passwords don't match\",\n        description: \"New password and confirmation password must be the same\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (newPassword.length < 6) {\n      toast({\n        title: \"Password too short\",\n        description: \"New password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setIsChangingPassword(true);\n    \n    try {\n      await updatePassword(user, newPassword);\n      \n      toast({\n        title: \"Password updated\",\n        description: \"Your password has been changed successfully\",\n      });\n      \n      // Clear form\n      setCurrentPassword(\"\");\n      setNewPassword(\"\");\n      setConfirmPassword(\"\");\n    } catch (error: any) {\n      console.error(\"Error changing password:\", error);\n      \n      let errorMessage = \"There was an error changing your password. Please try again.\";\n      \n      if (error.code === \"auth/requires-recent-login\") {\n        errorMessage = \"For security reasons, please sign out and sign back in before changing your password.\";\n      } else if (error.code === \"auth/weak-password\") {\n        errorMessage = \"The new password is too weak. Please choose a stronger password.\";\n      }\n      \n      toast({\n        title: \"Failed to change password\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsChangingPassword(false);\n    }\n  };\n\n\n  return (\n    <DashboardLayout \n      title=\"Settings\" \n      subtitle=\"Manage your account settings\"\n    >\n      {/* Account Information */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle>Account Information</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Email Address</Label>\n              <div className=\"mt-1 text-gray-700 font-medium\">{user?.email}</div>\n            </div>\n            \n            <div>\n              <Label>Account Type</Label>\n              <div className=\"mt-1 text-gray-700 font-medium\">Standard</div>\n            </div>\n            \n            <div>\n              <Label>Account Created</Label>\n              <div className=\"mt-1 text-gray-700 font-medium\">\n                {user?.metadata?.creationTime ? new Date(user.metadata.creationTime).toLocaleDateString() : \"Unknown\"}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Push Notifications */}\n      {user && (\n        <div className=\"mb-6\">\n          <NotificationSettings />\n        </div>\n      )}\n\n      {/* Change Password */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Change Password</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4 max-w-md\">\n            <div>\n              <Label htmlFor=\"currentPassword\">Current Password</Label>\n              <div className=\"relative mt-1\">\n                <Input\n                  id=\"currentPassword\"\n                  type={showCurrentPassword ? \"text\" : \"password\"}\n                  value={currentPassword}\n                  onChange={(e) => setCurrentPassword(e.target.value)}\n                  placeholder=\"Enter your current password\"\n                  data-testid=\"input-current-password\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                  data-testid=\"button-toggle-current-password\"\n                >\n                  {showCurrentPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </button>\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"newPassword\">New Password</Label>\n              <div className=\"relative mt-1\">\n                <Input\n                  id=\"newPassword\"\n                  type={showNewPassword ? \"text\" : \"password\"}\n                  value={newPassword}\n                  onChange={(e) => setNewPassword(e.target.value)}\n                  placeholder=\"Enter your new password\"\n                  data-testid=\"input-new-password\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  onClick={() => setShowNewPassword(!showNewPassword)}\n                  data-testid=\"button-toggle-new-password\"\n                >\n                  {showNewPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </button>\n              </div>\n              <p className=\"text-sm text-gray-500 mt-1\">Password must be at least 6 characters long</p>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n              <div className=\"relative mt-1\">\n                <Input\n                  id=\"confirmPassword\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  placeholder=\"Confirm your new password\"\n                  data-testid=\"input-confirm-password\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  data-testid=\"button-toggle-confirm-password\"\n                >\n                  {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </button>\n              </div>\n            </div>\n            \n            <Button \n              onClick={handlePasswordChange}\n              disabled={isChangingPassword || !currentPassword || !newPassword || !confirmPassword}\n              className=\"w-full\"\n              data-testid=\"button-change-password\"\n            >\n              {isChangingPassword ? \"Changing Password...\" : \"Change Password\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </DashboardLayout>\n  );\n}\n","size_bytes":7993},"client/src/pages/waste-bins.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport {\n  ref,\n  onValue,\n  query,\n  limitToLast,\n  orderByKey,\n} from \"firebase/database\";\nimport { database } from \"@/lib/firebase\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Bar,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  Legend,\n  ResponsiveContainer,\n  BarChart as RechartsBarChart,\n} from \"recharts\";\nimport {\n  Droplet,\n  Trash,\n  Scale,\n  CalendarClock,\n  MapPin,\n  Clock,\n  ChevronRight,\n  BarChart2,\n} from \"lucide-react\";\nimport { Device, WaterLevel, WasteBin } from \"@/types\";\nimport { Link, useLocation } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport { useWasteBinHistory } from \"@/hooks/useHistoryData\";\nimport { ref as dbRef, onValue as onDbValue } from \"firebase/database\";\n\nexport default function WasteBins() {\n  const { user } = useAuth();\n  const [location, setLocation] = useLocation();\n  const [devices, setDevices] = useState<Device[]>([]);\n  const [waterLevels, setWaterLevels] = useState<Record<string, WaterLevel>>(\n    {}\n  );\n  const [wasteBins, setWasteBins] = useState<Record<string, WasteBin>>({});\n  const [loading, setLoading] = useState(true);\n  const [selectedDeviceId, setSelectedDeviceId] = useState<string | null>(null);\n  // Store all device histories\n  const [allWasteHistories, setAllWasteHistories] = useState<\n    Record<\n      string,\n      Array<{ timestamp: string; fullness: number; weight: number }>\n    >\n  >({});\n\n  // Debug function to log history data\n  useEffect(() => {\n    console.log(\"Current history data:\", allWasteHistories);\n    console.log(\"Current devices:\", devices);\n  }, [allWasteHistories, devices]);\n  // Get history data for the selected device (for chart)\n  const { history: wasteHistory, loading: historyLoading } = useWasteBinHistory(\n    selectedDeviceId || \"\"\n  );\n\n  useEffect(() => {\n    if (!user) return;\n\n    const devicesRef = ref(database, `users/${user.uid}/devices`);\n    const waterLevelsRef = ref(database, `users/${user.uid}/waterLevels`);\n    const wasteBinsRef = ref(database, `users/${user.uid}/wasteBins`);\n    const historyUnsubscribes: Array<() => void> = [];\n\n    // Get all devices and their histories\n    const devicesUnsubscribe = onValue(devicesRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        const deviceList = Object.entries(data).map(\n          ([key, device]: [string, any]) => ({\n            firebaseKey: key,\n            id: device.id,\n            name: device.name,\n            location: device.location,\n            status: device.status,\n            lastSeen: device.lastSeen,\n            ...device,\n          })\n        );\n        setDevices(deviceList);\n\n        // Set the first device as selected for charts if none is selected\n        if (deviceList.length > 0 && !selectedDeviceId) {\n          setSelectedDeviceId(deviceList[0].id);\n        }\n\n        // Clear previous history subscriptions\n        historyUnsubscribes.forEach((unsub) => unsub());\n        historyUnsubscribes.length = 0;\n\n        // Subscribe to each device's waste bin history\n        deviceList.forEach((device) => {\n          const historyRef = ref(\n            database,\n            `users/${user.uid}/devices/${device.firebaseKey}/wasteBinHistory`\n          );\n          const unsub = onValue(historyRef, (historySnapshot) => {\n            const historyData = historySnapshot.val();\n            if (historyData) {\n              const formattedHistory = Object.entries(historyData).map(\n                ([timestamp, data]: [string, any]) => ({\n                  timestamp,\n                  fullness:\n                    typeof data.fullness === \"number\" ? data.fullness : 0,\n                  weight: typeof data.weight === \"number\" ? data.weight : 0,\n                })\n              );\n\n              setAllWasteHistories((prev) => ({\n                ...prev,\n                [device.firebaseKey]: formattedHistory,\n              }));\n              console.log(`History for ${device.name}:`, formattedHistory);\n            } else {\n              setAllWasteHistories((prev) => ({\n                ...prev,\n                [device.firebaseKey]: [],\n              }));\n            }\n          });\n          historyUnsubscribes.push(unsub);\n        });\n      } else {\n        setDevices([]);\n        setAllWasteHistories({});\n      }\n      setLoading(false);\n    });\n\n    // Get all water level data\n    const waterLevelsUnsubscribe = onValue(waterLevelsRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        setWaterLevels(data);\n      } else {\n        setWaterLevels({});\n      }\n    });\n\n    // Get all waste bin data\n    const wasteBinsUnsubscribe = onValue(wasteBinsRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        setWasteBins(data);\n      } else {\n        setWasteBins({});\n      }\n    });\n\n    return () => {\n      devicesUnsubscribe();\n      waterLevelsUnsubscribe();\n      wasteBinsUnsubscribe();\n      historyUnsubscribes.forEach((unsub) => unsub());\n    };\n  }, [user, selectedDeviceId]);\n\n  // Helper functions for water level\n  function getWaterLevelColor(level: number): string {\n    if (level > 85) return \"bg-destructive\";\n    if (level > 65) return \"bg-warning\";\n    return \"bg-success\";\n  }\n\n  function getWaterLevelTextColor(level: number): string {\n    if (level > 85) return \"text-destructive\";\n    if (level > 65) return \"text-warning\";\n    return \"text-success\";\n  }\n\n  function getWaterLevelStatus(level: number): string {\n    if (level > 85) return \"Critical\";\n    if (level > 65) return \"Warning\";\n    return \"Normal\";\n  }\n\n  // Helper functions for bin fullness\n  function getBinFullnessColor(fullness: number): string {\n    if (fullness > 85) return \"bg-destructive\";\n    if (fullness > 60) return \"bg-warning\";\n    return \"bg-success\";\n  }\n\n  function getBinTextColor(fullness: number): string {\n    if (fullness > 85) return \"text-destructive\";\n    if (fullness > 60) return \"text-warning\";\n    return \"text-success\";\n  }\n\n  function getBinStatus(fullness: number): string {\n    if (fullness > 85) return \"Critical\";\n    if (fullness > 60) return \"Warning\";\n    return \"Normal\";\n  }\n\n  // Calculate active devices based on recent data updates (last 5 minutes)\n  const fiveMinutesAgo = new Date();\n  fiveMinutesAgo.setMinutes(fiveMinutesAgo.getMinutes() - 5);\n\n  // Debug logging\n  useEffect(() => {\n    console.log(\"Devices:\", devices);\n    console.log(\"All Waste Histories:\", allWasteHistories);\n\n    // Log latest values from each device's history\n    devices.forEach((device) => {\n      const history = allWasteHistories[device.firebaseKey] || [];\n      if (history.length > 0) {\n        const latest = history.reduce((a, b) =>\n          new Date(a.timestamp) > new Date(b.timestamp) ? a : b\n        );\n        console.log(`Latest data for ${device.name}:`, latest);\n      }\n    });\n  }, [devices, allWasteHistories]);\n\n  // Format history data for charts\n  function formatWasteBinHistoryData(history: any[]) {\n    if (!history || history.length === 0) {\n      return [];\n    }\n\n    // Take the last 7 days of data\n    const sevenDaysAgo = new Date();\n    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n\n    const recentHistory = history.filter(\n      (item) => new Date(item.timestamp) >= sevenDaysAgo\n    );\n\n    return recentHistory.map((item) => ({\n      date: new Date(item.timestamp).toLocaleDateString(\"en-US\", {\n        month: \"short\",\n        day: \"numeric\",\n      }),\n      fullness: item.fullness || 0,\n      weight: item.weight || 0,\n    }));\n  }\n\n  const chartData = formatWasteBinHistoryData(wasteHistory);\n\n  // Calculate average bin fullness and weight using only the latest history values\n  function getLatestHistoryValueFromAll(\n    deviceFirebaseKey: string,\n    key: \"fullness\" | \"weight\"\n  ) {\n    const deviceHistory = allWasteHistories[deviceFirebaseKey] || [];\n    if (deviceHistory.length > 0) {\n      // Sort by timestamp descending and get the latest\n      const latest = deviceHistory.reduce((a, b) =>\n        new Date(a.timestamp) > new Date(b.timestamp) ? a : b\n      );\n      return typeof latest[key] === \"number\" ? latest[key] : 0;\n    }\n    return 0;\n  }\n\n  // Get all valid latest history values\n  const binFullnessValues = devices\n    .map((d) => getLatestHistoryValueFromAll(d.firebaseKey, \"fullness\"))\n    .filter((v) => typeof v === \"number\");\n\n  const binWeightValues = devices\n    .map((d) => getLatestHistoryValueFromAll(d.firebaseKey, \"weight\"))\n    .filter((v) => typeof v === \"number\");\n\n  // Calculate averages using only history values\n  const averageBinFullness =\n    binFullnessValues.length > 0\n      ? Math.round(\n          binFullnessValues.reduce((sum, val) => sum + val, 0) /\n            binFullnessValues.length\n        )\n      : 0;\n\n  const averageBinWeight =\n    binWeightValues.length > 0\n      ? Math.round(\n          binWeightValues.reduce((sum, val) => sum + val, 0) /\n            binWeightValues.length\n        )\n      : 0;\n\n  return (\n    <DashboardLayout\n      title=\"Waste Management\"\n      subtitle=\"Real-time waste bin analytics\"\n    >\n      <div className=\"mb-6\">\n        <h2 className=\"text-lg font-medium text-gray-800\">\n          Waste Bin Analysis\n        </h2>\n        <p className=\"text-sm text-gray-500 mt-1\">\n          Monitor waste bin fullness and weight across all your connected\n          devices\n        </p>\n      </div>\n\n      {/* Waste bin overview cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-base font-medium\">\n              Total Monitored Bins\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\">{devices.length}</div>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {\n                devices.filter((d) => {\n                  const history = allWasteHistories[d.firebaseKey];\n                  if (!history || history.length === 0) return false;\n                  const latestEntry = history.reduce((a, b) =>\n                    new Date(a.timestamp) > new Date(b.timestamp) ? a : b\n                  );\n                  const lastUpdated = latestEntry\n                    ? new Date(latestEntry.timestamp)\n                    : null;\n                  return lastUpdated && lastUpdated >= fiveMinutesAgo;\n                }).length\n              }{\" \"}\n              active\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-base font-medium\">\n              Average Bin Fullness\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\">{averageBinFullness}%</div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden\">\n              <div\n                className={`h-2 rounded-full ${\n                  averageBinFullness > 85\n                    ? \"bg-destructive\"\n                    : averageBinFullness > 60\n                    ? \"bg-warning\"\n                    : \"bg-success\"\n                }`}\n                style={{ width: `${averageBinFullness}%` }}\n              ></div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-base font-medium\">\n              Average Bin Weight\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\">{averageBinWeight} kg</div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden\">\n              <div\n                className=\"h-2 rounded-full bg-emerald-500\"\n                style={{\n                  width: `${Math.min((averageBinWeight / 100) * 100, 100)}%`,\n                }}\n              ></div>\n            </div>\n            {/* {Math.round((averageBinWeight / 100) * 100)}% of capacity (100kg)   */}\n            <p className=\"text-xs text-gray-500 mt-1\">\n              {Math.round((averageBinWeight / 10000) * 100)}% of capacity (10kg)\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Device Selector for Charts */}\n      {devices.length > 0 && (\n        <div className=\"mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-medium text-gray-700\">\n              Select device for charts:\n            </span>\n            <Select\n              value={selectedDeviceId || \"\"}\n              onValueChange={setSelectedDeviceId}\n            >\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Select a device\" />\n              </SelectTrigger>\n              <SelectContent>\n                {devices.map((device) => (\n                  <SelectItem key={device.id} value={device.id}>\n                    {device.name} - {device.location}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      )}\n\n      {/* Waste bin charts */}\n      {devices.length > 0 && selectedDeviceId && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 mb-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base font-medium\">\n                Bin Fullness Trends\n              </CardTitle>\n              <CardDescription>7-day bin fullness history</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-72\">\n                {historyLoading ? (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <p className=\"text-gray-500\">Loading chart data...</p>\n                  </div>\n                ) : chartData.length === 0 ? (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <p className=\"text-gray-500\">\n                      No historical data available\n                    </p>\n                  </div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <RechartsBarChart\n                      data={chartData}\n                      margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n                    >\n                      <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                      <XAxis dataKey=\"date\" />\n                      <YAxis domain={[0, 100]} />\n                      <RechartsTooltip\n                        formatter={(value: any) => [\n                          `${value}%`,\n                          \"Bin Fullness\",\n                        ]}\n                      />\n                      <Bar\n                        dataKey=\"fullness\"\n                        name=\"Bin Fullness\"\n                        radius={[4, 4, 0, 0]}\n                        barSize={30}\n                        fill=\"#10b981\"\n                      />\n                      <Legend />\n                    </RechartsBarChart>\n                  </ResponsiveContainer>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base font-medium\">\n                Bin Weight Trends\n              </CardTitle>\n              <CardDescription>7-day waste weight history</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-72\">\n                {historyLoading ? (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <p className=\"text-gray-500\">Loading chart data...</p>\n                  </div>\n                ) : chartData.length === 0 ? (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <p className=\"text-gray-500\">\n                      No historical data available\n                    </p>\n                  </div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart\n                      data={chartData}\n                      margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n                    >\n                      <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                      <XAxis dataKey=\"date\" />\n                      <YAxis domain={[0, 100]} />\n                      <RechartsTooltip\n                        formatter={(value: any) => [\n                          `${value} kg`,\n                          \"Bin Weight\",\n                        ]}\n                      />\n                      <Line\n                        type=\"monotone\"\n                        dataKey=\"weight\"\n                        name=\"Weight (kg)\"\n                        stroke=\"#8884d8\"\n                        strokeWidth={2}\n                        dot={{ r: 3 }}\n                        activeDot={{ r: 5 }}\n                      />\n                      <Legend />\n                    </LineChart>\n                  </ResponsiveContainer>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </DashboardLayout>\n  );\n}\n","size_bytes":17748},"client/src/pages/water-level-details.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ref, onValue } from \"firebase/database\";\nimport { database } from \"@/lib/firebase\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  LineChart, \n  Line, \n  BarChart,\n  Bar,\n  AreaChart,\n  Area,\n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  Legend, \n  ResponsiveContainer\n} from \"recharts\";\nimport { AlertTriangleIcon, InfoIcon, TrendingUpIcon, TrendingDownIcon, CloudRainIcon } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { WaterLevel, WasteBin, Device } from \"@/types\";\nimport { useWaterLevelHistory, useWasteBinHistory } from \"@/hooks/useHistoryData\";\n\n// Define the interface for water level history\ninterface WaterLevelHistory {\n  timestamp: string;\n  level: number;\n}\n\n// Define the interface for waste bin history\ninterface WasteBinHistory {\n  timestamp: string;\n  fullness: number;\n  weight: number;\n}\n\n// Define prediction interface for predictive analytics\ninterface Prediction {\n  timestamp: string;\n  predictedLevel: number;\n  confidence: number;\n}\n\n// Define trend data interface for trend analysis\ninterface TrendData {\n  period: string;\n  value: number;\n  trend: 'increasing' | 'decreasing' | 'stable';\n  changePct: number;\n}\n\ninterface RainData {\n  date: string;\n  precipitation: number;\n}\n\nexport default function WaterLevelDetails() {\n  const { user } = useAuth();\n  const [location, setLocation] = useLocation();\n  const [device, setDevice] = useState<Device | null>(null);\n  const [waterLevel, setWaterLevel] = useState<WaterLevel | null>(null);\n  const [wasteBin, setWasteBin] = useState<WasteBin | null>(null);\n  const [predictions, setPredictions] = useState<Prediction[]>([]);\n  const [waterTrends, setWaterTrends] = useState<TrendData[]>([]);\n  const [wasteTrends, setWasteTrends] = useState<TrendData[]>([]);\n  const [rainData, setRainData] = useState<RainData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\n  \n  // Get device ID from URL - either query parameter or path parameter\n  let deviceId: string | null = null;\n  \n  // Check for query parameter format (?id=XXX)\n  const urlParams = new URLSearchParams(window.location.search);\n  const queryId = urlParams.get('id');\n  \n  // Check for path parameter format (/water-levels/XXX)\n  const [, pathId] = location.split(\"/water-levels/\");\n  \n  // Use query parameter if available, otherwise use path parameter\n  deviceId = queryId || pathId;\n  \n  // Get history data using the hooks\n  const { history: waterHistory, loading: waterHistoryLoading } = useWaterLevelHistory(deviceId || \"\");\n  const { history: binHistory, loading: binHistoryLoading } = useWasteBinHistory(deviceId || \"\");\n\n  useEffect(() => {\n    if (!user || !deviceId) return;\n    \n    const deviceRef = ref(database, `users/${user.uid}/devices`);\n    const deviceUnsubscribe = onValue(deviceRef, (snapshot) => {\n      if (!snapshot.exists()) {\n        setDevice(null);\n        setLoading(false);\n        return;\n      }\n      \n      // Find device by ID\n      const devices = snapshot.val();\n      let foundDevice = null;\n      let deviceKey = null;\n      \n      Object.entries(devices).forEach(([key, value]: [string, any]) => {\n        if (value.id === deviceId) {\n          foundDevice = { ...value, id: deviceId };\n          deviceKey = key;\n        }\n      });\n      \n      if (!foundDevice) {\n        setDevice(null);\n        setLoading(false);\n        return;\n      }\n      \n      setDevice(foundDevice);\n      \n      // Get water level data\n      const waterLevelRef = ref(database, `users/${user.uid}/waterLevels/${deviceKey}`);\n      const waterLevelUnsubscribe = onValue(waterLevelRef, (waterLevelSnapshot) => {\n        if (waterLevelSnapshot.exists()) {\n          setWaterLevel(waterLevelSnapshot.val());\n        } else {\n          setWaterLevel(null);\n        }\n      });\n      \n      // Get waste bin data\n      const wasteBinRef = ref(database, `users/${user.uid}/wasteBins/${deviceKey}`);\n      const wasteBinUnsubscribe = onValue(wasteBinRef, (wasteBinSnapshot) => {\n        if (wasteBinSnapshot.exists()) {\n          setWasteBin(wasteBinSnapshot.val());\n        } else {\n          setWasteBin(null);\n        }\n      });\n      \n    });\n    \n    setLoading(false);\n\n    return () => {\n      deviceUnsubscribe();\n    };\n  }, [user, deviceId]);\n  \n  // Generate predictions and trends when history data changes\n  useEffect(() => {\n    if (waterHistory.length > 0) {\n      // Convert HistoryEntry[] to WaterLevelHistory[] format\n      const waterLevelHistory: WaterLevelHistory[] = waterHistory.map(entry => ({\n        timestamp: entry.timestamp,\n        level: entry.level || 0\n      }));\n      \n      setPredictions(generateSamplePredictions(waterLevelHistory));\n      setWaterTrends(generateSampleWaterTrends(waterLevelHistory));\n      setRainData(generateSampleRainData());\n    }\n  }, [waterHistory]);\n  \n  useEffect(() => {\n    if (binHistory.length > 0) {\n      // Convert HistoryEntry[] to WasteBinHistory[] format\n      const wasteBinHistory: WasteBinHistory[] = binHistory.map(entry => ({\n        timestamp: entry.timestamp,\n        fullness: entry.fullness || 0,\n        weight: entry.weight || 0\n      }));\n      \n      setWasteTrends(generateSampleWasteTrends(wasteBinHistory));\n    }\n  }, [binHistory]);\n  \n\n  function generateSamplePredictions(history: WaterLevelHistory[]): Prediction[] {\n    if (!history.length) return [];\n    \n    const predictions: Prediction[] = [];\n    const lastPoint = history[history.length - 1];\n    const now = new Date(lastPoint.timestamp);\n    \n    // Simple linear trend-based prediction (simplified)\n    // In a real app, this would use more sophisticated algorithms\n    let trend = 0;\n    if (history.length > 1) {\n      const recentHistory = history.slice(-5);\n      const avgChange = recentHistory.reduce((sum, curr, i, arr) => {\n        if (i === 0) return sum;\n        return sum + (curr.level - arr[i-1].level);\n      }, 0) / (recentHistory.length - 1);\n      \n      trend = avgChange;\n    }\n    \n    // Generate predictions for the next 5 days\n    for (let i = 1; i <= 5; i++) {\n      const predictionDate = new Date(now);\n      predictionDate.setDate(now.getDate() + i);\n      \n      // Use trend to predict future values, with confidence decreasing over time\n      const predictedLevel = Math.max(0, Math.min(100, lastPoint.level + (trend * i)));\n      const confidence = Math.max(10, 90 - (i * 15)); // Confidence decreases over time\n      \n      predictions.push({\n        timestamp: predictionDate.toISOString(),\n        predictedLevel,\n        confidence\n      });\n    }\n    \n    return predictions;\n  }\n  \n  function generateSampleWaterTrends(history: WaterLevelHistory[]): TrendData[] {\n    if (!history.length) return [];\n    \n    // Calculate trends for different time periods\n    const now = new Date();\n    const trends: TrendData[] = [];\n    \n    // Daily trend (last 24 hours)\n    const dayStart = new Date(now);\n    dayStart.setHours(now.getHours() - 24);\n    const dayData = history.filter(item => new Date(item.timestamp) >= dayStart);\n    \n    if (dayData.length >= 2) {\n      const startValue = dayData[0].level;\n      const endValue = dayData[dayData.length - 1].level;\n      const changePct = ((endValue - startValue) / startValue) * 100;\n      const trend = changePct > 1 ? 'increasing' : (changePct < -1 ? 'decreasing' : 'stable');\n      \n      trends.push({\n        period: \"24 hours\",\n        value: endValue,\n        trend,\n        changePct\n      });\n    }\n    \n    // Weekly trend\n    const weekStart = new Date(now);\n    weekStart.setDate(now.getDate() - 7);\n    const weekData = history.filter(item => new Date(item.timestamp) >= weekStart);\n    \n    if (weekData.length >= 2) {\n      const startValue = weekData[0].level;\n      const endValue = weekData[weekData.length - 1].level;\n      const changePct = ((endValue - startValue) / startValue) * 100;\n      const trend = changePct > 1 ? 'increasing' : (changePct < -1 ? 'decreasing' : 'stable');\n      \n      trends.push({\n        period: \"7 days\",\n        value: endValue,\n        trend,\n        changePct\n      });\n    }\n    \n    // Monthly trend\n    const monthStart = new Date(now);\n    monthStart.setDate(now.getDate() - 30);\n    const monthData = history.filter(item => new Date(item.timestamp) >= monthStart);\n    \n    if (monthData.length >= 2) {\n      const startValue = monthData[0].level;\n      const endValue = monthData[monthData.length - 1].level;\n      const changePct = ((endValue - startValue) / startValue) * 100;\n      const trend = changePct > 1 ? 'increasing' : (changePct < -1 ? 'decreasing' : 'stable');\n      \n      trends.push({\n        period: \"30 days\",\n        value: endValue,\n        trend,\n        changePct\n      });\n    }\n    \n    return trends;\n  }\n  \n  function generateSampleWasteTrends(history: WasteBinHistory[]): TrendData[] {\n    if (!history.length) return [];\n    \n    // Calculate trends for different time periods\n    const now = new Date();\n    const trends: TrendData[] = [];\n    \n    // Daily trend (last 24 hours)\n    const dayStart = new Date(now);\n    dayStart.setHours(now.getHours() - 24);\n    const dayData = history.filter(item => new Date(item.timestamp) >= dayStart);\n    \n    if (dayData.length >= 2) {\n      const startValue = dayData[0].fullness;\n      const endValue = dayData[dayData.length - 1].fullness;\n      const changePct = ((endValue - startValue) / (startValue || 1)) * 100;\n      const trend = changePct > 1 ? 'increasing' : (changePct < -1 ? 'decreasing' : 'stable');\n      \n      trends.push({\n        period: \"24 hours\",\n        value: endValue,\n        trend,\n        changePct\n      });\n    }\n    \n    // Weekly trend\n    const weekStart = new Date(now);\n    weekStart.setDate(now.getDate() - 7);\n    const weekData = history.filter(item => new Date(item.timestamp) >= weekStart);\n    \n    if (weekData.length >= 2) {\n      const startValue = weekData[0].fullness;\n      const endValue = weekData[weekData.length - 1].fullness;\n      const changePct = ((endValue - startValue) / (startValue || 1)) * 100;\n      const trend = changePct > 1 ? 'increasing' : (changePct < -1 ? 'decreasing' : 'stable');\n      \n      trends.push({\n        period: \"7 days\",\n        value: endValue,\n        trend,\n        changePct\n      });\n    }\n    \n    // Monthly trend\n    const monthStart = new Date(now);\n    monthStart.setDate(now.getDate() - 30);\n    const monthData = history.filter(item => new Date(item.timestamp) >= monthStart);\n    \n    if (monthData.length >= 2) {\n      const startValue = monthData[0].fullness;\n      const endValue = monthData[monthData.length - 1].fullness;\n      const changePct = ((endValue - startValue) / (startValue || 1)) * 100;\n      const trend = changePct > 1 ? 'increasing' : (changePct < -1 ? 'decreasing' : 'stable');\n      \n      trends.push({\n        period: \"30 days\",\n        value: endValue,\n        trend,\n        changePct\n      });\n    }\n    \n    return trends;\n  }\n  \n  function generateSampleRainData(): RainData[] {\n    const rainData: RainData[] = [];\n    const now = new Date();\n    \n    // Past 5 days\n    for (let i = 6; i >= 0; i--) {\n      const date = new Date(now);\n      date.setDate(now.getDate() - i);\n      \n      // Random precipitation data (mm)\n      const precipitation = Math.random() * 15;\n      \n      rainData.push({\n        date: date.toISOString().split('T')[0],\n        precipitation: Number(precipitation.toFixed(1))\n      });\n    }\n    \n    // Future 5 days (forecast)\n    for (let i = 1; i <= 5; i++) {\n      const date = new Date(now);\n      date.setDate(now.getDate() + i);\n      \n      // Random precipitation forecast (mm)\n      const precipitation = Math.random() * 10;\n      \n      rainData.push({\n        date: date.toISOString().split('T')[0],\n        precipitation: Number(precipitation.toFixed(1))\n      });\n    }\n    \n    return rainData;\n  }\n  \n  function getWaterLevelColor(level: number): string {\n    if (level > 85) return \"bg-red-500\";\n    if (level > 65) return \"bg-amber-500\";\n    if (level > 35) return \"bg-green-500\";\n    return \"bg-blue-500\";\n  }\n  \n  function getWaterLevelTextColor(level: number): string {\n    if (level > 85) return \"text-red-500\";\n    if (level > 65) return \"text-amber-500\";\n    if (level > 35) return \"text-green-500\";\n    return \"text-blue-500\";\n  }\n  \n  function getWaterLevelStatus(level: number): string {\n    if (level > 85) return \"Critical\";\n    if (level > 65) return \"Warning\";\n    if (level > 35) return \"Normal\";\n    return \"Low\";\n  }\n  \n  function getStatusBackground(level: number): string {\n    if (level > 85) return \"bg-red-100\";\n    if (level > 65) return \"bg-amber-100\";\n    if (level > 35) return \"bg-green-100\";\n    return \"bg-blue-100\";\n  }\n  \n  function getBinFullnessColor(fullness: number): string {\n    if (fullness > 85) return \"bg-red-500\";\n    if (fullness > 65) return \"bg-amber-500\";\n    return \"bg-green-500\";\n  }\n  \n  function getBinTextColor(fullness: number): string {\n    if (fullness > 85) return \"text-red-500\";\n    if (fullness > 65) return \"text-amber-500\";\n    return \"text-green-500\";\n  }\n  \n  function getBinStatus(fullness: number): string {\n    if (fullness > 85) return \"Full\";\n    if (fullness > 65) return \"Warning\";\n    return \"OK\";\n  }\n  \n  function getTrendAnalysis(): string {\n    if (!waterHistory.length) return \"Insufficient data\";\n    \n    const current = waterHistory[waterHistory.length - 1].level;\n    const previous = waterHistory[0].level;\n    const change = current - previous;\n    \n    if (Math.abs(change) < 5) {\n      return \"Water levels have remained relatively stable over the monitored period.\";\n    } else if (change > 0) {\n      return `Water levels have increased by approximately ${change.toFixed(1)}% over the monitored period. This could indicate increased rainfall or reduced drainage capacity.`;\n    } else {\n      return `Water levels have decreased by approximately ${Math.abs(change).toFixed(1)}% over the monitored period. This indicates effective drainage or reduced water input.`;\n    }\n  }\n  \n  function getRecommendations(): string[] {\n    const recommendations = [];\n    \n    // Water level based recommendations\n    if (waterLevel) {\n      if (waterLevel.level > 85) {\n        recommendations.push(\"URGENT: Water levels are critically high. Immediate inspection recommended.\");\n        recommendations.push(\"Consider emergency drainage protocols.\");\n      } else if (waterLevel.level > 65) {\n        recommendations.push(\"Water levels are elevated. Schedule an inspection within 24-48 hours.\");\n        recommendations.push(\"Monitor drainage outflow for potential blockages.\");\n      }\n    }\n    \n    // Waste bin based recommendations\n    if (wasteBin) {\n      if (wasteBin.fullness > 85) {\n        recommendations.push(\"Waste bin is nearly full. Schedule collection immediately.\");\n      } else if (wasteBin.fullness > 65) {\n        recommendations.push(\"Waste bin is filling up. Plan collection within the next 3 days.\");\n      }\n      \n      if (wasteBin.weight > 50) {\n        recommendations.push(\"Waste weight is high. Ensure appropriate handling equipment is used during collection.\");\n      }\n    }\n    \n    // Trend based recommendations\n    if (waterTrends.length > 0) {\n      const latestTrend = waterTrends[0];\n      if (latestTrend.trend === 'increasing' && latestTrend.changePct > 10) {\n        recommendations.push(`Water level is rising rapidly (${latestTrend.changePct.toFixed(1)}% in ${latestTrend.period}). Investigate potential inflow issues.`);\n      }\n    }\n    \n    if (recommendations.length === 0) {\n      recommendations.push(\"All systems operating within normal parameters. No immediate action required.\");\n      recommendations.push(\"Continue regular maintenance schedule.\");\n    }\n    \n    return recommendations;\n  }\n  \n  if (loading) {\n    return (\n      <DashboardLayout title=\"Loading...\" subtitle=\"Please wait\">\n        <div className=\"flex justify-center items-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n  \n  if (!device) {\n    return (\n      <DashboardLayout title=\"Device Not Found\" subtitle=\"The requested device could not be found\">\n        <div className=\"flex flex-col items-center justify-center h-64 space-y-4\">\n          <AlertTriangleIcon className=\"w-16 h-16 text-amber-500\" />\n          <h2 className=\"text-xl font-semibold\">Device Not Found</h2>\n          <p className=\"text-gray-500\">The water level device you're looking for could not be found.</p>\n          <Button onClick={() => setLocation(\"/water-levels\")}>Return to Water Levels</Button>\n        </div>\n      </DashboardLayout>\n    );\n  }\n  \n  return (\n    <DashboardLayout \n      title={device.name || \"Water Level Details\"} \n      subtitle={device.location || \"Location not specified\"}\n    >\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        {/* Water Level Card */}\n        <Card className=\"relative overflow-hidden\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-lg font-medium\">Current Water Level</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-3xl font-bold\">\n                  {waterLevel ? `${waterLevel.level}%` : \"N/A\"}\n                </div>\n                <div className=\"text-sm text-gray-500\">\n                  Last updated: {waterLevel ? waterLevel.lastUpdated : \"Never\"}\n                </div>\n              </div>\n              <div className=\"w-16 h-16 rounded-full flex items-center justify-center\">\n                <div \n                  className={`w-full h-full rounded-full flex items-center justify-center ${waterLevel ? getStatusBackground(waterLevel.level) : \"bg-gray-100\"}`}\n                >\n                  <div \n                    className={`text-sm font-medium ${waterLevel ? getWaterLevelTextColor(waterLevel.level) : \"text-gray-400\"}`}\n                  >\n                    {waterLevel ? getWaterLevelStatus(waterLevel.level) : \"No data\"}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Water level visualization */}\n            <div className=\"mt-4 h-6 bg-gray-200 rounded-full overflow-hidden\">\n              <div \n                className={`h-full ${waterLevel ? getWaterLevelColor(waterLevel.level) : \"bg-gray-400\"}`}\n                style={{ width: `${waterLevel ? waterLevel.level : 0}%` }}\n              ></div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Waste Bin Card */}\n        <Card className=\"relative overflow-hidden\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-lg font-medium\">Waste Bin Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-3xl font-bold\">\n                  {wasteBin ? `${wasteBin.fullness}%` : \"N/A\"}\n                </div>\n                <div className=\"text-sm text-gray-500\">\n                  Last emptied: {wasteBin ? wasteBin.lastEmptied : \"Never\"}\n                </div>\n              </div>\n              <div className=\"w-16 h-16 rounded-full flex items-center justify-center\">\n                <div \n                  className={`w-full h-full rounded-full flex items-center justify-center ${wasteBin ? (wasteBin.fullness > 85 ? \"bg-red-100\" : wasteBin.fullness > 65 ? \"bg-amber-100\" : \"bg-green-100\") : \"bg-gray-100\"}`}\n                >\n                  <div \n                    className={`text-sm font-medium ${wasteBin ? getBinTextColor(wasteBin.fullness) : \"text-gray-400\"}`}\n                  >\n                    {wasteBin ? getBinStatus(wasteBin.fullness) : \"No data\"}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Fullness visualization */}\n            <div className=\"mt-4 h-6 bg-gray-200 rounded-full overflow-hidden\">\n              <div \n                className={`h-full ${wasteBin ? getBinFullnessColor(wasteBin.fullness) : \"bg-gray-400\"}`}\n                style={{ width: `${wasteBin ? wasteBin.fullness : 0}%` }}\n              ></div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Waste Weight Card */}\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-lg font-medium\">Waste Weight</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-3xl font-bold\">\n                  {wasteBin ? `${wasteBin.weight.toFixed(1)} kg` : \"N/A\"}\n                </div>\n                <div className=\"text-sm text-gray-500\">\n                  Measured capacity: 100 kg\n                </div>\n              </div>\n              <div className=\"w-16 h-16\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 24 24\" fill=\"none\">\n                  <path d=\"M12 3L4 10H20L12 3Z\" fill=\"#94A3B8\" />\n                  <rect x=\"5\" y=\"10\" width=\"14\" height=\"2\" fill=\"#94A3B8\" />\n                  <rect x=\"6\" y=\"12\" width=\"12\" height=\"8\" fill=\"#94A3B8\" />\n                  <rect x=\"8\" y=\"20\" width=\"8\" height=\"1\" fill=\"#94A3B8\" />\n                </svg>\n              </div>\n            </div>\n            \n            {/* Weight visualization */}\n            <div className=\"mt-4 h-6 bg-gray-200 rounded-full overflow-hidden\">\n              <div \n                className=\"h-full bg-indigo-500\"\n                style={{ width: `${wasteBin ? Math.min(100, (wasteBin.weight / 100) * 100) : 0}%` }}\n              ></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Overview Section */}\n      <div className=\"w-full mb-6\">\n        \n        {/* Overview Content */}\n        <div className=\"space-y-6\">\n          {/* Chart Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Combined Sensor Readings</CardTitle>\n              <CardDescription>Last 7 days of data</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80\">\n                {waterHistory.length > 0 || binHistory.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart\n                      data={waterHistory.map((item, index) => ({\n                        date: new Date(item.timestamp).toLocaleDateString(),\n                        waterLevel: item.level,\n                        binFullness: binHistory[index]?.fullness || 0,\n                        binWeight: binHistory[index]?.weight || 0,\n                      }))}\n                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                    >\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"date\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"waterLevel\" \n                        name=\"Water Level (%)\"\n                        stroke=\"#2563eb\" \n                        activeDot={{ r: 8 }} \n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"binFullness\" \n                        name=\"Bin Fullness (%)\"\n                        stroke=\"#16a34a\" \n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"binWeight\" \n                        name=\"Bin Weight (kg)\"\n                        stroke=\"#7c3aed\" \n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <div className=\"text-center text-gray-500\">\n                      <p className=\"mb-2\">No historical data available</p>\n                      <p className=\"text-sm\">Data will appear here once readings are received</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Trends and Insights */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {/* Average Water Level */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Average Water Level</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-col items-center justify-center h-28\">\n                  <div className=\"text-lg font-bold\">{waterHistory.length > 0 ? Math.round(waterHistory.reduce((acc, item) => acc + item.level, 0) / waterHistory.length) : 0}%</div>\n                  {waterHistory.length === 0 && (\n                    <div className=\"text-xs text-gray-500 mt-2\">No data available</div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Average Bin Fullness */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Average Bin Fullness</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-col items-center justify-center h-28\">\n                  <div className=\"text-lg font-bold\">{binHistory.length > 0 ? Math.round(binHistory.reduce((acc, item) => acc + item.fullness, 0) / binHistory.length) : 0}%</div>\n                  {binHistory.length === 0 && (\n                    <div className=\"text-xs text-gray-500 mt-2\">No data available</div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Device Status */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Device Status</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-col items-center justify-center h-28\">\n                  <Badge variant={device.status === \"active\" ? \"default\" : \"outline\"}>\n                    {device.status === \"active\" ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                  <div className=\"text-xs text-gray-500 mt-2\">\n                    Last seen: {device.lastSeen}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n        \n        {/* Action Button Group */}\n        <div className=\"flex flex-wrap gap-2 mt-6\">\n          <Button \n            variant=\"outline\"\n            className=\"flex items-center\"\n            onClick={() => setLocation(\"/devices\")}\n          >\n            Manage Device\n          </Button>\n          <Button \n            variant=\"outline\"\n            className=\"flex items-center\"\n            onClick={() => setLocation(\"/device-history/\" + deviceId)}\n          >\n            View Device History\n          </Button>\n          <Button\n            className=\"flex items-center ml-auto\"\n            onClick={() => setLocation(\"/water-levels\")}\n          >\n            Back to Water Levels\n          </Button>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":27987},"client/src/pages/water-levels.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ref, onValue } from \"firebase/database\";\nimport { database } from \"@/lib/firebase\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Droplet, BarChart2, ChevronRight } from \"lucide-react\";\nimport { Device, WaterLevel, WasteBin } from \"@/types\";\nimport { Link, useLocation } from \"wouter\";\nimport { motion } from \"framer-motion\";\n\nexport default function WaterLevels() {\n  const { user } = useAuth();\n  const [location, setLocation] = useLocation();\n  const [devices, setDevices] = useState<Device[]>([]);\n  const [deviceLatestValues, setDeviceLatestValues] = useState<\n    Record<\n      string,\n      {\n        waterLevel: number;\n        binFullness: number;\n        binWeight: number;\n        waterTimestamp: string;\n        binTimestamp: string;\n      }\n    >\n  >({});\n  const [loading, setLoading] = useState(true);\n\n  // Helper function to get the latest values from history\n  const getLatestValues = (\n    waterHistory: Record<string, any> | null | undefined,\n    wasteHistory: Record<string, any> | null | undefined\n  ) => {\n    const result = {\n      waterLevel: 0,\n      binFullness: 0,\n      binWeight: 0,\n      waterTimestamp: \"\",\n      binTimestamp: \"\",\n    };\n\n    if (waterHistory) {\n      const waterEntries = Object.entries(waterHistory);\n      if (waterEntries.length > 0) {\n        const [timestamp, value] = waterEntries.sort(\n          (a, b) => new Date(b[0]).getTime() - new Date(a[0]).getTime()\n        )[0];\n        result.waterLevel = value.level || 0;\n        result.waterTimestamp = timestamp;\n      }\n    }\n\n    if (wasteHistory) {\n      const wasteEntries = Object.entries(wasteHistory);\n      if (wasteEntries.length > 0) {\n        const [timestamp, value] = wasteEntries.sort(\n          (a, b) => new Date(b[0]).getTime() - new Date(a[0]).getTime()\n        )[0];\n        result.binFullness = value.fullness || 0;\n        result.binWeight = value.weight || 0;\n        result.binTimestamp = timestamp;\n      }\n    }\n\n    return result;\n  };\n\n  useEffect(() => {\n    if (!user) return;\n\n    const devicesRef = ref(database, `users/${user.uid}/devices`);\n    const historyUnsubscribes: Array<() => void> = [];\n\n    // Get all devices\n    const devicesUnsubscribe = onValue(devicesRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        const deviceList = Object.entries(data).map(\n          ([key, device]: [string, any]) => ({\n            firebaseKey: key,\n            id: device.id,\n            name: device.name,\n            location: device.location,\n            status: device.status,\n            lastSeen: device.lastSeen,\n            ...device,\n          })\n        );\n        setDevices(deviceList);\n\n        // Clear previous history subscriptions\n        historyUnsubscribes.forEach((unsub) => unsub());\n        historyUnsubscribes.length = 0;\n\n        // Subscribe to each device's history (both water and waste)\n        deviceList.forEach((device) => {\n          const waterHistoryRef = ref(\n            database,\n            `users/${user.uid}/devices/${device.firebaseKey}/waterLevelHistory`\n          );\n          const wasteBinHistoryRef = ref(\n            database,\n            `users/${user.uid}/devices/${device.firebaseKey}/wasteBinHistory`\n          );\n\n          const unsubWater = onValue(waterHistoryRef, (waterSnapshot) => {\n            const waterData = waterSnapshot.val();\n            const wasteHistoryRef = ref(\n              database,\n              `users/${user.uid}/devices/${device.firebaseKey}/wasteBinHistory`\n            );\n\n            // Get waste bin data\n            onValue(wasteHistoryRef, (wasteSnapshot) => {\n              const wasteData = wasteSnapshot.val();\n              const latestValues = getLatestValues(waterData, wasteData);\n\n              setDeviceLatestValues((prev) => ({\n                ...prev,\n                [device.firebaseKey]: latestValues,\n              }));\n            });\n          });\n\n          historyUnsubscribes.push(unsubWater);\n        });\n      } else {\n        setDevices([]);\n        setDeviceLatestValues({});\n      }\n      setLoading(false);\n    });\n\n    return () => {\n      devicesUnsubscribe();\n      historyUnsubscribes.forEach((unsub) => unsub());\n    };\n  }, [user]);\n\n  // Helper functions for water level\n  function getWaterLevelColor(level: number): string {\n    if (level > 65) return \"bg-destructive\";\n    if (level > 45) return \"bg-warning\";\n    return \"bg-success\";\n  }\n\n  function getWaterLevelTextColor(level: number): string {\n    if (level > 65) return \"text-destructive\";\n    if (level > 45) return \"text-warning\";\n    return \"text-success\";\n  }\n\n  function getWaterLevelStatus(level: number): string {\n    if (level > 65) return \"Critical\";\n    if (level > 45) return \"Warning\";\n    return \"Normal\";\n  }\n\n  function getBinFullnessColor(fullness: number): string {\n    if (fullness > 60) return \"bg-destructive\";\n    if (fullness > 44) return \"bg-warning\";\n    return \"bg-success\";\n  }\n\n  function getBinStatus(fullness: number): string {\n    if (fullness > 60) return \"Critical\";\n    if (fullness > 44) return \"Warning\";\n    return \"Normal\";\n  }\n\n  // Calculate active devices based on recent data updates (last 5 minutes)\n  const fiveMinutesAgo = new Date();\n  fiveMinutesAgo.setMinutes(fiveMinutesAgo.getMinutes() - 5);\n\n  // Calculate average of water levels across all devices using history data\n  const waterLevelValues = Object.values(deviceLatestValues).map(\n    (v) => v.waterLevel\n  );\n  const averageWaterLevel =\n    waterLevelValues.length > 0\n      ? Math.round(\n          waterLevelValues.reduce((sum, level) => sum + level, 0) /\n            waterLevelValues.length\n        )\n      : 0;\n\n  // Calculate number of critical stations using history data (level > 65)\n  const criticalStations = waterLevelValues.filter(\n    (level) => level > 65\n  ).length;\n\n  return (\n    <DashboardLayout\n      title=\"Water Level Monitoring\"\n      subtitle=\"Real-time sewer water level analytics\"\n    >\n      <div className=\"mb-6\">\n        <h2 className=\"text-lg font-medium text-gray-800\">\n          Water Level Analysis\n        </h2>\n        <p className=\"text-sm text-gray-500 mt-1\">\n          Monitor sewer water levels across all your connected devices\n        </p>\n      </div>\n\n      {/* Water level overview cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-base font-medium\">\n              Total Monitoring Points\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\">{devices.length}</div>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {\n                devices.filter((d) => {\n                  const lastValue = deviceLatestValues[d.firebaseKey];\n                  const lastWaterUpdate = lastValue?.waterTimestamp\n                    ? new Date(lastValue.waterTimestamp)\n                    : null;\n                  const lastBinUpdate = lastValue?.binTimestamp\n                    ? new Date(lastValue.binTimestamp)\n                    : null;\n\n                  return (\n                    (lastWaterUpdate && lastWaterUpdate >= fiveMinutesAgo) ||\n                    (lastBinUpdate && lastBinUpdate >= fiveMinutesAgo)\n                  );\n                }).length\n              }{\" \"}\n              active\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card\n          className={`animated-card slide-in hover-scale ${\n            averageWaterLevel > 65\n              ? \"danger-card\"\n              : averageWaterLevel > 45\n              ? \"warning-card\"\n              : \"success-card\"\n          }`}\n          style={{ animationDelay: \"0.05s\" }}\n        >\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-base font-medium\">\n              Average Water Level\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div\n              className={`text-3xl font-bold ${\n                averageWaterLevel > 65\n                  ? \"text-destructive\"\n                  : averageWaterLevel > 45\n                  ? \"text-warning\"\n                  : \"text-success\"\n              }`}\n            >\n              {waterLevelValues.length > 0\n                ? `${averageWaterLevel}%`\n                : \"No data\"}\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden\">\n              <div\n                className={`h-2 rounded-full ${\n                  averageWaterLevel > 65\n                    ? \"bg-destructive\"\n                    : averageWaterLevel > 45\n                    ? \"bg-warning\"\n                    : \"bg-success\"\n                }`}\n                style={{\n                  width: `${averageWaterLevel}%`,\n                  transition: \"width 0.5s ease-in-out\",\n                }}\n              ></div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card\n          className={`animated-card slide-in ${\n            criticalStations > 0 ? \"danger-card\" : \"success-card\"\n          }`}\n          style={{ animationDelay: \"0.1s\" }}\n        >\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-base font-medium\">\n              Critical Stations\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"relative\">\n            <div\n              className={`text-3xl font-bold ${\n                criticalStations > 0 ? \"text-destructive\" : \"text-success\"\n              }`}\n            >\n              {waterLevelValues.length > 0 ? criticalStations : \"No data\"}\n            </div>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {criticalStations > 0 ? (\n                <span className=\"text-destructive\">Requires attention</span>\n              ) : waterLevelValues.length > 0 ? (\n                \"All normal\"\n              ) : (\n                \"No data\"\n              )}\n            </p>\n            {criticalStations > 0 && (\n              <div className=\"absolute top-0 right-0 w-2 h-2 rounded-full bg-red-500 pulse-animation\"></div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* No quick actions needed as they are accessible through the sidebar */}\n    </DashboardLayout>\n  );\n}\n","size_bytes":10674},"client/src/types/index.ts":{"content":"// User data types\nexport interface WaterLevel {\n  id: string;\n  location: string;\n  level: number;\n  lastUpdated: string;\n}\n\nexport interface WasteBin {\n  id: string;\n  location: string;\n  fullness: number;\n  weight: number;\n  lastEmptied: string;\n}\n\nexport interface Device {\n  firebaseKey: string;\n  id: string;\n  name: string;\n  location: string;\n  status: \"active\" | \"inactive\";\n  lastSeen: string;\n  thresholds?: {\n    waterLevel?: number;\n    binFullness?: number;\n    wasteWeight?: number;\n  };\n  notifications?: {\n    enabled: boolean;\n    notifyOnWaterLevel: boolean;\n    notifyOnBinFullness: boolean;\n    notifyOnWeight: boolean;\n    notifyContacts: string[]; // IDs of contacts to notify\n  };\n}\n\nexport interface Contact {\n  id: string;\n  name: string;\n  phone: string;\n  status: \"active\" | \"inactive\";\n}\n\nexport interface Settings {\n  system: {\n    name: string;\n    dataRefreshInterval: string;\n    dataRetentionPeriod: string;\n  };\n  regional: {\n    timeZone: string;\n  };\n  thresholds: {\n    waterLevel: number;\n    binFullness: number;\n    wasteWeight: number;\n  };\n  notifications: {\n    smsEnabled: boolean;\n    emailEnabled: boolean;\n    emailAddress?: string;\n  };\n}\n\nexport interface WaterLevelHistory {\n  date: string;\n  [stationId: string]: number | string;\n}\n\nexport interface WasteBinHistory {\n  date: string;\n  [binId: string]:\n    | {\n        weight: number;\n        fullness: number;\n      }\n    | string;\n}\n","size_bytes":1437},"client/src/components/layout/DashboardLayout.tsx":{"content":"import { ReactNode } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport Header from \"./Header\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Redirect } from \"wouter\";\n\ninterface DashboardLayoutProps {\n  children: ReactNode;\n  title: string;\n  subtitle?: string;\n}\n\nexport default function DashboardLayout({ \n  children, \n  title, \n  subtitle \n}: DashboardLayoutProps) {\n  const { user, loading } = useAuth();\n  \n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n  \n  if (!user) {\n    return <Redirect to=\"/login\" />;\n  }\n  \n  return (\n    <div className=\"flex h-screen bg-[#F5F7FA]\">\n      {/* Sidebar for larger screens */}\n      <div className=\"hidden md:block\">\n        <Sidebar />\n      </div>\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title={title} />\n        \n        <main className=\"flex-1 overflow-y-auto p-4 md:p-6 pb-16 md:pb-6\">\n          {subtitle && (\n            <div className=\"mb-4 text-gray-600\">{subtitle}</div>\n          )}\n          {children}\n        </main>\n        \n        {/* Mobile bottom navigation */}\n        <div className=\"md:hidden fixed bottom-0 left-0 right-0 bg-white shadow-lg border-t border-gray-200\">\n          <Sidebar mobile={true} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1443},"client/src/components/layout/Header.tsx":{"content":"import { Bell, LogOut, User } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { auth } from \"@/lib/firebase\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuSeparator, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { motion } from \"framer-motion\";\n\ninterface HeaderProps {\n  title: string;\n}\n\nexport default function Header({ title }: HeaderProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const handleSignOut = async () => {\n    try {\n      await auth.signOut();\n      toast({\n        title: \"Signed out successfully\",\n        description: \"You have been logged out of DrainSentry\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Sign out failed\",\n        description: \"There was an error signing out. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  // Get username from email (part before @)\n  const username = user?.email ? user.email.split('@')[0] : \"User\";\n  \n  return (\n    <div className=\"bg-white px-4 py-4 border-b border-gray-200 flex justify-between items-center\">\n      <h1 className=\"text-xl md:text-2xl font-semibold text-gray-800\">{title}</h1>\n      \n      <div className=\"flex items-center\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"flex items-center gap-2 hover:bg-blue-50 transition-colors\">\n              <User size={18} className=\"text-primary\" />\n              <span className=\"font-medium text-gray-700 hidden sm:inline-block\">{username}</span>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-56\">\n            <div className=\"flex flex-col space-y-1 p-2\">\n              <p className=\"text-sm font-medium text-gray-700 truncate\">{username}</p>\n              <p className=\"text-xs text-gray-500 truncate\">{user?.email}</p>\n            </div>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem \n              className=\"cursor-pointer flex items-center text-red-600 focus:text-red-600 focus:bg-red-50\"\n              onClick={handleSignOut}\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              <span>Log Out</span>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2511},"client/src/components/layout/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport {\n  LayoutDashboard,\n  Droplet,\n  Trash2,\n  CircuitBoard,\n  Users,\n  Settings,\n  LogOut,\n  Power,\n} from \"lucide-react\";\nimport { auth } from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface SidebarProps {\n  mobile?: boolean;\n}\n\nexport default function Sidebar({ mobile = false }: SidebarProps) {\n  const [location] = useLocation();\n  const { toast } = useToast();\n\n  const handleSignOut = async () => {\n    try {\n      await auth.signOut();\n      toast({\n        title: \"Signed out successfully\",\n        description: \"You have been logged out of DrainSentry\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Sign out failed\",\n        description: \"There was an error signing out. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const isActive = (path: string) => {\n    return location === path ? \"active\" : \"\";\n  };\n\n  const navItems = [\n    {\n      icon: <LayoutDashboard size={mobile ? 20 : 18} />,\n      label: \"Dashboard\",\n      path: \"/\",\n    },\n    {\n      icon: <Droplet size={mobile ? 20 : 18} />,\n      label: \"Water Levels\",\n      path: \"/water-levels\",\n    },\n    {\n      icon: <Trash2 size={mobile ? 20 : 18} />,\n      label: \"Waste Bins\",\n      path: \"/waste-bins\",\n    },\n    {\n      icon: <CircuitBoard size={mobile ? 20 : 18} />,\n      label: \"Devices\",\n      path: \"/devices\",\n    },\n    {\n      icon: <Users size={mobile ? 20 : 18} />,\n      label: \"Contacts\",\n      path: \"/contacts\",\n    },\n    {\n      icon: <Power size={mobile ? 20 : 18} />,\n      label: \"Conveyor\",\n      path: \"/conveyor\",\n    },\n    {\n      icon: <Settings size={mobile ? 20 : 18} />,\n      label: \"Settings\",\n      path: \"/settings\",\n    },\n  ];\n\n  if (mobile) {\n    return (\n      <div className=\"flex justify-around py-2 bg-white border-t border-gray-200 fixed bottom-0 left-0 right-0 z-50\">\n        {navItems.map((item) => (\n          <Link \n            key={item.path} \n            href={item.path}\n            className={`flex flex-col items-center p-2 ${\n              isActive(item.path) ? \"text-primary\" : \"text-gray-500\"\n            }`}\n          >\n            {item.icon}\n            <span className=\"text-xs mt-1\">{item.label}</span>\n          </Link>\n        ))}\n        {/* Add logout button to mobile navbar */}\n        <button\n          onClick={handleSignOut}\n          className=\"flex flex-col items-center p-2 text-gray-500\"\n          style={{ background: \"none\", border: \"none\" }}\n          aria-label=\"Logout\"\n        >\n          <LogOut size={mobile ? 20 : 18} />\n          <span className=\"text-xs mt-1\">Logout</span>\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-64 h-full bg-white shadow-md flex flex-col\">\n      <div className=\"p-4 border-b border-gray-200\">\n        <h1 className=\"text-2xl font-bold\">\n          <span className=\"text-primary\">Drain</span>\n          <span className=\"text-secondary\">Sentry</span>\n        </h1>\n      </div>\n\n      <div className=\"flex-1 p-2\">\n        {navItems.map((item) => (\n          <Link\n            key={item.path}\n            href={item.path}\n            className={`sidebar-link ${isActive(item.path)}`}\n          >\n            <span className=\"mr-3 text-gray-500\">{item.icon}</span>\n            <span>{item.label}</span>\n          </Link>\n        ))}\n      </div>\n\n      <div className=\"p-4 border-t border-gray-200\">\n        <button\n          onClick={handleSignOut}\n          className=\"sidebar-link w-full text-gray-700\"\n        >\n          <LogOut size={18} className=\"mr-3\" />\n          <span>Logout</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3673},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/error-boundary.tsx":{"content":"","size_bytes":0},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/loading-state.tsx":{"content":"","size_bytes":0},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# DrainSentry Monitoring System\n\n## Overview\n\nDrainSentry is a comprehensive IoT monitoring system designed to track water levels and waste bin status in real-time. The application provides a web dashboard for monitoring multiple devices, receiving alerts, and analyzing historical data. It integrates with Arduino-based IoT devices that collect sensor data and communicate through Firebase Realtime Database. The system features push notifications, device management, contact management, and data visualization capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Replit Environment Setup\n\n### Configuration Status\n- ✅ **Database**: PostgreSQL database provisioned and schema pushed successfully\n- ✅ **Session Management**: Express session middleware configured with secure settings\n- ✅ **Dependencies**: All required packages installed including `nanoid`\n- ✅ **Workflow**: Configured to run `npm run dev` on port 5000 with webview output\n- ✅ **Vite Server**: Configured with `allowedHosts: true` for Replit proxy compatibility\n- ✅ **Server Binding**: Express server binds to `0.0.0.0:5000` as required\n\n### Development\n- **Start Command**: `npm run dev` (runs both Express backend and Vite dev server)\n- **Port**: 5000 (frontend and backend on same port)\n- **Database Migration**: Use `npm run db:push` (or `npm run db:push --force` if data-loss warning)\n- **TypeScript Check**: `npm run check`\n\n### Production\n- **Build Command**: `npm run build` (builds frontend with Vite, bundles backend with esbuild)\n- **Start Command**: `npm run start` (runs production server from `dist/index.js`)\n- **Deployment**: Configured for Replit autoscale deployment\n\n### Environment Variables\n- `DATABASE_URL`: PostgreSQL connection string (auto-configured by Replit)\n- `SESSION_SECRET`: Session secret key (defaults to dev secret, should be set in production)\n- `NODE_ENV`: Set to `development` or `production`\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Radix UI components with shadcn/ui design system\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack React Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Charts**: Recharts for data visualization\n- **Animations**: Framer Motion for smooth UI transitions\n\n### Backend Architecture\n- **Server**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Session Management**: Connect-pg-simple for PostgreSQL session storage\n- **API Design**: RESTful endpoints with proper error handling middleware\n- **Real-time Data**: Firebase Realtime Database for device data synchronization\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL (configured via Drizzle) for user accounts, device metadata, and application settings\n- **Real-time Database**: Firebase Realtime Database for live sensor data, device readings, and historical data\n- **Schema Management**: Drizzle Kit for database migrations and schema management\n\n### Authentication and Authorization\n- **Authentication Provider**: Firebase Authentication with Google OAuth and email/password\n- **Session Management**: Express sessions with PostgreSQL storage\n- **Token Verification**: Firebase ID token verification on the server\n- **Access Control**: Session-based authentication for API endpoints\n\n### Push Notifications\n- **Service**: Firebase Cloud Messaging (FCM) for push notifications\n- **Architecture**: Service worker for background message handling\n- **Features**: Critical alerts for water levels, waste bin fullness, and device offline status\n- **Storage**: FCM tokens stored in PostgreSQL with user associations\n\n### External Dependencies\n\n- **Firebase Services**: Authentication, Realtime Database, and Cloud Messaging for complete IoT data pipeline\n- **Database**: PostgreSQL via Neon serverless for application data\n- **UI Components**: Radix UI primitives with shadcn/ui implementation\n- **Charts**: Recharts for responsive data visualization\n- **Deployment**: Firebase Hosting for static asset serving\n- **Build Tools**: Vite for fast development and optimized production builds\n- **ORM**: Drizzle ORM for type-safe database operations\n\n### IoT Device Integration\n- **Communication Protocol**: Arduino devices communicate via HTTP requests to Firebase Realtime Database\n- **Data Structure**: Hierarchical data organization by user, device, and timestamp\n- **Real-time Sync**: Automatic data synchronization between devices and web dashboard\n- **Device Management**: Registration, status tracking, and threshold configuration through the web interface","size_bytes":4738},"public/firebase-messaging-sw.js":{"content":"// Firebase messaging service worker for push notifications\nimportScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js');\nimportScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-compat.js');\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD50Lsmg3khTmYkGiu7LREqivXsBkePQMI\",\n  authDomain: \"drainsentry.firebaseapp.com\",\n  databaseURL: \"https://drainsentry-default-rtdb.firebaseio.com\",\n  projectId: \"drainsentry\",\n  storageBucket: \"drainsentry.firebasestorage.app\",\n  messagingSenderId: \"610406293973\",\n  appId: \"1:610406293973:web:e112664f4dbfd9d6dd1d5c\",\n  measurementId: \"G-PF2451RX9Q\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst messaging = firebase.messaging();\n\n// Handle background messages\nmessaging.onBackgroundMessage((payload) => {\n  console.log('Received background message:', payload);\n  \n  const notificationTitle = payload.notification?.title || 'DrainSentry Alert';\n  const notificationOptions = {\n    body: payload.notification?.body || 'Critical alert detected',\n    icon: '/favicon.ico',\n    badge: '/favicon.ico',\n    tag: payload.data?.type || 'general',\n    data: payload.data,\n    actions: [\n      {\n        action: 'view',\n        title: 'View Details'\n      },\n      {\n        action: 'dismiss',\n        title: 'Dismiss'\n      }\n    ]\n  };\n\n  self.registration.showNotification(notificationTitle, notificationOptions);\n});\n\n// Handle notification clicks\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close();\n  \n  if (event.action === 'view') {\n    const urlToOpen = event.notification.data?.url || '/';\n    event.waitUntil(\n      clients.matchAll({ type: 'window', includeUncontrolled: true })\n        .then((clientList) => {\n          // Check if there's already a window/tab open with the target URL\n          for (const client of clientList) {\n            if (client.url === urlToOpen && 'focus' in client) {\n              return client.focus();\n            }\n          }\n          // If not, open a new window/tab\n          if (clients.openWindow) {\n            return clients.openWindow(urlToOpen);\n          }\n        })\n    );\n  }\n});","size_bytes":2140},"server/notification-service.ts":{"content":"import { storage } from \"./storage\";\n\n// Note: In a real implementation, you would use Firebase Admin SDK\n// For this demo, we'll simulate the notification sending\nexport class PushNotificationService {\n  private static instance: PushNotificationService;\n\n  private constructor() {}\n\n  static getInstance(): PushNotificationService {\n    if (!PushNotificationService.instance) {\n      PushNotificationService.instance = new PushNotificationService();\n    }\n    return PushNotificationService.instance;\n  }\n\n  async sendCriticalAlert(userId: number, alert: {\n    type: 'water_level' | 'waste_bin' | 'device_offline';\n    message: string;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    deviceId?: number;\n  }) {\n    try {\n      // Get user's FCM tokens\n      const tokens = await storage.getFcmTokens(userId);\n      const activeTokens = tokens.filter(token => token.isActive);\n\n      if (activeTokens.length === 0) {\n        console.log(`No active FCM tokens found for user ${userId}`);\n        return;\n      }\n\n      // Create notification payload\n      const notification = {\n        title: this.getNotificationTitle(alert.type, alert.severity),\n        body: alert.message,\n        icon: '/favicon.ico',\n        badge: '/favicon.ico',\n        tag: alert.type,\n        data: {\n          type: alert.type,\n          severity: alert.severity,\n          deviceId: alert.deviceId?.toString(),\n          url: this.getNotificationUrl(alert.type, alert.deviceId),\n          timestamp: new Date().toISOString()\n        }\n      };\n\n      // In a real implementation, you would use Firebase Admin SDK here:\n      // const admin = require('firebase-admin');\n      // const messaging = admin.messaging();\n      // \n      // for (const token of activeTokens) {\n      //   try {\n      //     await messaging.send({\n      //       token: token.token,\n      //       notification: notification.title && notification.body ? {\n      //         title: notification.title,\n      //         body: notification.body,\n      //       } : undefined,\n      //       data: notification.data,\n      //       webpush: {\n      //         notification: {\n      //           title: notification.title,\n      //           body: notification.body,\n      //           icon: notification.icon,\n      //           badge: notification.badge,\n      //           tag: notification.tag,\n      //           data: notification.data\n      //         }\n      //       }\n      //     });\n      //     \n      //     // Update last used timestamp\n      //     await storage.updateFcmToken(token.token, new Date().toISOString());\n      //     console.log(`Push notification sent to token: ${token.token.substring(0, 10)}...`);\n      //   } catch (error) {\n      //     console.error(`Failed to send to token ${token.token.substring(0, 10)}...:`, error);\n      //     \n      //     // If token is invalid, mark as inactive\n      //     if (error.code === 'messaging/registration-token-not-registered') {\n      //       await storage.deleteFcmToken(token.token);\n      //     }\n      //   }\n      // }\n\n      // For demo purposes, just log the notification\n      console.log('🔔 PUSH NOTIFICATION SENT:');\n      console.log(`👤 User ID: ${userId}`);\n      console.log(`📱 Tokens: ${activeTokens.length} active`);\n      console.log(`🚨 Type: ${alert.type} (${alert.severity})`);\n      console.log(`💬 Message: ${alert.message}`);\n      console.log(`📄 Payload:`, JSON.stringify(notification, null, 2));\n\n      return {\n        success: true,\n        tokensCount: activeTokens.length,\n        notification\n      };\n\n    } catch (error) {\n      console.error('Error sending push notification:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  private getNotificationTitle(type: string, severity: string): string {\n    const severityEmoji: Record<string, string> = {\n      low: '🟡',\n      medium: '🟠', \n      high: '🔴',\n      critical: '🚨'\n    };\n\n    const typeMessages: Record<string, string> = {\n      water_level: 'Water Level Alert',\n      waste_bin: 'Waste Bin Alert', \n      device_offline: 'Device Offline'\n    };\n\n    return `${severityEmoji[severity] || '🔔'} ${typeMessages[type] || 'Alert'}`;\n  }\n\n  private getNotificationUrl(type: string, deviceId?: number): string {\n    switch (type) {\n      case 'water_level':\n        return deviceId ? `/water-levels/${deviceId}` : '/water-levels';\n      case 'waste_bin':\n        return '/waste-bins';\n      case 'device_offline':\n        return deviceId ? `/devices` : '/devices';\n      default:\n        return '/';\n    }\n  }\n\n  // Monitor and send notifications for critical alerts\n  async checkAndNotifyAlerts(userId: number) {\n    try {\n      // Get critical alerts\n      const alerts = await this.getCriticalAlerts(userId);\n      \n      // Send notifications for critical and high severity alerts\n      const alertsToNotify = alerts.filter(alert => \n        alert.severity === 'critical' || alert.severity === 'high'\n      );\n\n      for (const alert of alertsToNotify) {\n        await this.sendCriticalAlert(userId, {\n          type: alert.type as 'water_level' | 'waste_bin' | 'device_offline',\n          message: alert.message,\n          severity: alert.severity as 'low' | 'medium' | 'high' | 'critical',\n          deviceId: alert.deviceId\n        });\n      }\n\n      return {\n        totalAlerts: alerts.length,\n        notifiedAlerts: alertsToNotify.length,\n        alerts: alertsToNotify\n      };\n\n    } catch (error) {\n      console.error('Error checking and notifying alerts:', error);\n      return { error: error instanceof Error ? error.message : 'Unknown error' };\n    }\n  }\n\n  private async getCriticalAlerts(userId: number) {\n    const alerts: Array<{ type: string; message: string; severity: string; deviceId?: number }> = [];\n\n    try {\n      // Check water levels for high readings\n      const waterLevels = await storage.getWaterLevels(userId);\n      const devices = await storage.getDevices(userId);\n      \n      for (const level of waterLevels) {\n        if (level.level > 80) { // High water level threshold\n          const device = devices.find(d => d.id === level.deviceId);\n          alerts.push({\n            type: 'water_level',\n            message: `High water level detected: ${level.level}% at ${device?.name || 'Unknown Device'}`,\n            severity: level.level > 95 ? 'critical' : 'high',\n            deviceId: level.deviceId\n          });\n        }\n      }\n\n      // Check waste bins for fullness\n      const wasteBins = await storage.getWasteBins(userId);\n      for (const bin of wasteBins) {\n        if (bin.fullness > 85) { // Full waste bin threshold\n          const device = devices.find(d => d.id === bin.deviceId);\n          alerts.push({\n            type: 'waste_bin',\n            message: `Waste bin is ${bin.fullness}% full at ${device?.name || 'Unknown Device'}`,\n            severity: bin.fullness > 95 ? 'critical' : 'high',\n            deviceId: bin.deviceId\n          });\n        }\n      }\n\n      // Check for offline devices\n      const now = new Date();\n      for (const device of devices) {\n        if (device.lastSeen) {\n          const lastSeen = new Date(device.lastSeen);\n          const hoursSinceLastSeen = (now.getTime() - lastSeen.getTime()) / (1000 * 60 * 60);\n          \n          if (hoursSinceLastSeen > 2) { // Device offline for more than 2 hours\n            alerts.push({\n              type: 'device_offline',\n              message: `Device ${device.name} has been offline for ${Math.round(hoursSinceLastSeen)} hours`,\n              severity: hoursSinceLastSeen > 24 ? 'critical' : 'medium',\n              deviceId: device.id\n            });\n          }\n        }\n      }\n\n    } catch (error) {\n      console.error(\"Error checking critical alerts:\", error);\n    }\n\n    return alerts;\n  }\n}","size_bytes":7888},"client/public/firebase-messaging-sw.js":{"content":"// Firebase messaging service worker for push notifications\nimportScripts(\n  \"https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js\"\n);\nimportScripts(\n  \"https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-compat.js\"\n);\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD50Lsmg3khTmYkGiu7LREqivXsBkePQMI\",\n  authDomain: \"drainsentry.firebaseapp.com\",\n  databaseURL: \"https://drainsentry-default-rtdb.firebaseio.com\",\n  projectId: \"drainsentry\",\n  storageBucket: \"drainsentry.firebasestorage.app\",\n  messagingSenderId: \"610406293973\",\n  appId: \"1:610406293973:web:e112664f4dbfd9d6dd1d5c\",\n  measurementId: \"G-PF2451RX9Q\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst messaging = firebase.messaging();\n\n// Handle background messages\nmessaging.onBackgroundMessage((payload) => {\n  console.log(\"Received background message:\", payload);\n\n  const notificationTitle = payload.notification?.title || \"DrainSentry Alert\";\n  const notificationOptions = {\n    body: payload.notification?.body || \"Critical alert detected\",\n    icon: \"/favicon.ico\",\n    badge: \"/favicon.ico\",\n    tag: payload.data?.type || \"general\",\n    data: payload.data,\n    actions: [\n      {\n        action: \"view\",\n        title: \"View Details\",\n      },\n      {\n        action: \"dismiss\",\n        title: \"Dismiss\",\n      },\n    ],\n  };\n\n  self.registration.showNotification(notificationTitle, notificationOptions);\n});\n\n// Handle notification clicks\nself.addEventListener(\"notificationclick\", (event) => {\n  event.notification.close();\n\n  if (event.action === \"view\") {\n    const urlToOpen = event.notification.data?.url || \"/\";\n    event.waitUntil(\n      clients\n        .matchAll({ type: \"window\", includeUncontrolled: true })\n        .then((clientList) => {\n          // Check if there's already a window/tab open with the target URL\n          for (const client of clientList) {\n            if (client.url === urlToOpen && \"focus\" in client) {\n              return client.focus();\n            }\n          }\n          // If not, open a new window/tab\n          if (clients.openWindow) {\n            return clients.openWindow(urlToOpen);\n          }\n        })\n    );\n  }\n});\n","size_bytes":2158},"client/src/hooks/useNotifications.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { NotificationService } from \"@/lib/notifications\";\nimport { useToast } from \"./use-toast\";\n\nexport interface NotificationAlert {\n  type: \"water_level\" | \"waste_bin\" | \"device_offline\";\n  message: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  deviceId?: number;\n}\n\nexport function useNotifications() {\n  const [permissionGranted, setPermissionGranted] = useState<boolean>(false);\n  // Hardcoded FCM token for testing\n  const HARDCODED_FCM_TOKEN =\n    \"BAiBMAW5a6LDGPSMz7T_GFqCXtY7i3v_dM34mynRvlFmkFpj7ugH_J692Kt9022jzl7kpvFuk6nmc9YwcK9ofiE\";\n  const [fcmToken, setFcmToken] = useState<string | null>(HARDCODED_FCM_TOKEN);\n  const [notificationService] = useState(() =>\n    NotificationService.getInstance()\n  );\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check current permission status without auto-requesting\n  useEffect(() => {\n    const checkPermission = () => {\n      if (\"Notification\" in window) {\n        setPermissionGranted(Notification.permission === \"granted\");\n      }\n    };\n\n    checkPermission();\n\n    // Only set up message listener if permission already granted\n    if (Notification.permission === \"granted\") {\n      notificationService.setupForegroundMessageListener((payload) => {\n        toast({\n          title: payload.notification?.title || \"Alert\",\n          description:\n            payload.notification?.body || \"You have a new notification\",\n          variant:\n            payload.data?.severity === \"critical\" ? \"destructive\" : \"default\",\n        });\n      });\n    }\n  }, [notificationService, toast]);\n\n  // Register FCM token with backend\n  const registerTokenMutation = useMutation({\n    mutationFn: async ({\n      token,\n      deviceInfo,\n    }: {\n      token: string;\n      deviceInfo?: string;\n    }) => {\n      const response = await fetch(\"/api/notifications/token\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ token, deviceInfo }),\n      });\n\n      if (response.status === 401) {\n        throw new Error(\"Authentication required. Please sign in again.\");\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to register token\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Notifications enabled\",\n        description:\n          \"You will now receive push notifications for critical alerts.\",\n      });\n      // Invalidate alerts to refresh them\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/notifications/alerts\"],\n      });\n    },\n    onError: (error) => {\n      console.error(\"Error registering token:\", error);\n      toast({\n        title: \"Error\",\n        description:\n          error instanceof Error\n            ? error.message\n            : \"Failed to enable notifications. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Fetch critical alerts with proper error handling\n  const {\n    data: alerts,\n    isLoading: alertsLoading,\n    error: alertsError,\n  } = useQuery({\n    queryKey: [\"/api/notifications/alerts\"],\n    refetchInterval: 30000, // Check every 30 seconds\n    select: (data: any) => data?.alerts || [],\n    retry: (failureCount, error: any) => {\n      // Don't retry if unauthorized\n      if (error?.response?.status === 401) {\n        return false;\n      }\n      return failureCount < 3;\n    },\n  });\n\n  // Request notification permission and register token\n  const enableNotifications = async () => {\n    try {\n      // Step 1: Request permission\n      const hasPermission = await notificationService.requestPermission();\n      setPermissionGranted(hasPermission);\n\n      if (!hasPermission) {\n        toast({\n          title: \"Permission denied\",\n          description:\n            \"Please enable notifications in your browser settings to receive alerts.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Step 2: Use hardcoded FCM token\n      const token = HARDCODED_FCM_TOKEN;\n      setFcmToken(token);\n\n      // Step 3: Register token immediately (don't use state)\n      const deviceInfo = navigator.userAgent;\n      registerTokenMutation.mutate({ token, deviceInfo });\n\n      // Step 4: Set up foreground message listener\n      notificationService.setupForegroundMessageListener((payload) => {\n        toast({\n          title: payload.notification?.title || \"Alert\",\n          description:\n            payload.notification?.body || \"You have a new notification\",\n          variant:\n            payload.data?.severity === \"critical\" ? \"destructive\" : \"default\",\n        });\n      });\n    } catch (error) {\n      console.error(\"Error enabling notifications:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to enable notifications. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Disable notifications\n  const disableNotifications = async () => {\n    if (HARDCODED_FCM_TOKEN) {\n      try {\n        await fetch(\n          `/api/notifications/token/${encodeURIComponent(HARDCODED_FCM_TOKEN)}`,\n          {\n            method: \"DELETE\",\n          }\n        );\n\n        setPermissionGranted(false);\n        setFcmToken(null);\n\n        toast({\n          title: \"Notifications disabled\",\n          description: \"You will no longer receive push notifications.\",\n        });\n      } catch (error) {\n        console.error(\"Error disabling notifications:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to disable notifications.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  return {\n    permissionGranted,\n    fcmToken,\n    alerts: alerts || [],\n    alertsLoading,\n    alertsError,\n    enableNotifications,\n    disableNotifications,\n    registeringToken: registerTokenMutation.isPending,\n  };\n}\n","size_bytes":6037},"client/src/lib/notifications.ts":{"content":"import { getToken, onMessage } from \"firebase/messaging\";\nimport { messaging } from \"./firebase\";\n\nexport interface NotificationData {\n  type: 'water_level' | 'waste_bin' | 'device_offline';\n  deviceId: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  url?: string;\n}\n\n// Vapid key for push notifications - you'll need to get this from Firebase Console\nconst VAPID_KEY = \"BKqKz8ZQhHllbS8C9VZQKf8JXoNDJ6O_Y0FQ8fD2HxYJJxX_aKqKz8ZQhHllbS8C9VZQKf8JXoNDJ6O_Y0FQ8fD2HxY\";\n\nexport class NotificationService {\n  private static instance: NotificationService;\n  private fcmToken: string | null = null;\n\n  private constructor() {}\n\n  static getInstance(): NotificationService {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService();\n    }\n    return NotificationService.instance;\n  }\n\n  async requestPermission(): Promise<boolean> {\n    if (!('Notification' in window)) {\n      console.warn('This browser does not support notifications');\n      return false;\n    }\n\n    if (Notification.permission === 'granted') {\n      return true;\n    }\n\n    if (Notification.permission === 'denied') {\n      return false;\n    }\n\n    const permission = await Notification.requestPermission();\n    return permission === 'granted';\n  }\n\n  async getFCMToken(): Promise<string | null> {\n    if (!messaging) {\n      console.warn('Firebase messaging not available');\n      return null;\n    }\n\n    try {\n      const hasPermission = await this.requestPermission();\n      if (!hasPermission) {\n        console.warn('Notification permission denied');\n        return null;\n      }\n\n      // Register service worker\n      if ('serviceWorker' in navigator) {\n        await navigator.serviceWorker.register('/firebase-messaging-sw.js');\n      }\n\n      const token = await getToken(messaging, {\n        vapidKey: VAPID_KEY\n      });\n\n      if (token) {\n        this.fcmToken = token;\n        console.log('FCM Token:', token);\n        return token;\n      } else {\n        console.warn('No registration token available');\n        return null;\n      }\n    } catch (error) {\n      console.error('Error getting FCM token:', error);\n      return null;\n    }\n  }\n\n  setupForegroundMessageListener(callback: (payload: any) => void) {\n    if (!messaging) return;\n\n    onMessage(messaging, (payload) => {\n      console.log('Foreground message received:', payload);\n      callback(payload);\n      \n      // Show notification if page is not in focus\n      if (document.hidden) {\n        this.showLocalNotification(payload);\n      }\n    });\n  }\n\n  private showLocalNotification(payload: any) {\n    if (Notification.permission === 'granted') {\n      const notification = new Notification(\n        payload.notification?.title || 'DrainSentry Alert',\n        {\n          body: payload.notification?.body || 'Critical alert detected',\n          icon: '/favicon.ico',\n          badge: '/favicon.ico',\n          tag: payload.data?.type || 'general',\n          data: payload.data\n        }\n      );\n\n      notification.onclick = () => {\n        window.focus();\n        if (payload.data?.url) {\n          window.location.href = payload.data.url;\n        }\n        notification.close();\n      };\n    }\n  }\n\n  getStoredToken(): string | null {\n    return this.fcmToken;\n  }\n\n  async updateTokenOnServer(token: string, userId: number): Promise<void> {\n    try {\n      const response = await fetch('/api/notifications/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ token, userId }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update token on server');\n      }\n    } catch (error) {\n      console.error('Error updating token on server:', error);\n    }\n  }\n\n  static createCriticalAlert(data: NotificationData): string {\n    const severityEmoji = {\n      low: '🟡',\n      medium: '🟠', \n      high: '🔴',\n      critical: '🚨'\n    };\n\n    const typeMessages = {\n      water_level: 'Water level alert',\n      waste_bin: 'Waste bin alert',\n      device_offline: 'Device offline alert'\n    };\n\n    return `${severityEmoji[data.severity]} ${typeMessages[data.type]}: ${data.message}`;\n  }\n}","size_bytes":4231},"client/src/components/ui/notification-settings.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Bell, BellOff, AlertTriangle, Droplets, Trash2, WifiOff } from 'lucide-react';\nimport { useNotifications } from '@/hooks/useNotifications';\n\ninterface NotificationSettingsProps {\n  // No need for userId prop - get from auth context\n}\n\nexport function NotificationSettings({}: NotificationSettingsProps) {\n  const {\n    permissionGranted,\n    fcmToken,\n    alerts,\n    alertsLoading,\n    alertsError,\n    enableNotifications,\n    disableNotifications,\n    registeringToken,\n  } = useNotifications();\n\n  const [notificationTypes, setNotificationTypes] = useState({\n    waterLevel: true,\n    wasteBin: true,\n    deviceOffline: true,\n  });\n\n  const handleToggleNotifications = async () => {\n    if (permissionGranted && fcmToken) {\n      await disableNotifications();\n    } else {\n      await enableNotifications();\n    }\n  };\n\n  const getCriticalAlertsCount = () => {\n    return alerts.filter((alert: any) => alert.severity === 'critical').length;\n  };\n\n  const getAlertIcon = (type: string) => {\n    switch (type) {\n      case 'water_level':\n        return <Droplets className=\"h-4 w-4\" />;\n      case 'waste_bin':\n        return <Trash2 className=\"h-4 w-4\" />;\n      case 'device_offline':\n        return <WifiOff className=\"h-4 w-4\" />;\n      default:\n        return <AlertTriangle className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'destructive';\n      case 'high':\n        return 'destructive';\n      case 'medium':\n        return 'default';\n      case 'low':\n        return 'secondary';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"notification-settings\">\n      {/* Main Notification Toggle */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              {permissionGranted && fcmToken ? (\n                <Bell className=\"h-5 w-5 text-green-600\" />\n              ) : (\n                <BellOff className=\"h-5 w-5 text-gray-400\" />\n              )}\n              <CardTitle>Push Notifications</CardTitle>\n            </div>\n            {permissionGranted && fcmToken && (\n              <Badge variant=\"secondary\" data-testid=\"status-enabled\">\n                Enabled\n              </Badge>\n            )}\n          </div>\n          <CardDescription>\n            Receive instant alerts for critical system events and device status changes.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"notifications-toggle\">Enable Push Notifications</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Get notified about critical alerts even when the app is closed\n              </p>\n            </div>\n            <Button\n              onClick={handleToggleNotifications}\n              disabled={registeringToken}\n              variant={permissionGranted && fcmToken ? \"destructive\" : \"default\"}\n              data-testid=\"button-toggle-notifications\"\n            >\n              {registeringToken ? (\n                \"Processing...\"\n              ) : permissionGranted && fcmToken ? (\n                \"Disable\"\n              ) : (\n                \"Enable\"\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Notification Types */}\n      {permissionGranted && fcmToken && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Alert Types</CardTitle>\n            <CardDescription>\n              Choose which types of alerts you want to receive\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Droplets className=\"h-4 w-4 text-blue-500\" />\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"water-level\">Water Level Alerts</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    High water levels and flood warnings\n                  </p>\n                </div>\n              </div>\n              <Switch\n                id=\"water-level\"\n                checked={notificationTypes.waterLevel}\n                onCheckedChange={(checked) =>\n                  setNotificationTypes(prev => ({ ...prev, waterLevel: checked }))\n                }\n                data-testid=\"switch-water-level\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Trash2 className=\"h-4 w-4 text-green-500\" />\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"waste-bin\">Waste Bin Alerts</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Full waste bins needing emptying\n                  </p>\n                </div>\n              </div>\n              <Switch\n                id=\"waste-bin\"\n                checked={notificationTypes.wasteBin}\n                onCheckedChange={(checked) =>\n                  setNotificationTypes(prev => ({ ...prev, wasteBin: checked }))\n                }\n                data-testid=\"switch-waste-bin\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <WifiOff className=\"h-4 w-4 text-red-500\" />\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"device-offline\">Device Status Alerts</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Offline devices and connectivity issues\n                  </p>\n                </div>\n              </div>\n              <Switch\n                id=\"device-offline\"\n                checked={notificationTypes.deviceOffline}\n                onCheckedChange={(checked) =>\n                  setNotificationTypes(prev => ({ ...prev, deviceOffline: checked }))\n                }\n                data-testid=\"switch-device-offline\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Current Alerts */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Current Alerts</CardTitle>\n            {getCriticalAlertsCount() > 0 && (\n              <Badge variant=\"destructive\" data-testid=\"critical-alerts-count\">\n                {getCriticalAlertsCount()} Critical\n              </Badge>\n            )}\n          </div>\n          <CardDescription>\n            Active alerts that require your attention\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {alertsError ? (\n            <p className=\"text-sm text-muted-foreground text-red-600\">\n              Error loading alerts. Please try refreshing the page.\n            </p>\n          ) : alertsLoading ? (\n            <p className=\"text-sm text-muted-foreground\">Loading alerts...</p>\n          ) : !Array.isArray(alerts) || alerts.length === 0 ? (\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"no-alerts\">\n              No active alerts. All systems are running normally.\n            </p>\n          ) : (\n            <div className=\"space-y-3\">\n              {alerts.map((alert: any, index: number) => (\n                <div\n                  key={index}\n                  className=\"flex items-center space-x-3 p-3 rounded-lg border\"\n                  data-testid={`alert-${alert.type}-${index}`}\n                >\n                  {getAlertIcon(alert.type)}\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium\">{alert.message}</p>\n                  </div>\n                  <Badge \n                    variant={getSeverityColor(alert.severity) as any}\n                    data-testid={`alert-severity-${alert.severity}`}\n                  >\n                    {alert.severity}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8714}},"version":1}